[{"text": "What are the names of the scientists, and how many projects are each of them working on?", "sql": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the scientists and how many projects are each of them working on", "sql_clean": "<start> select count(*) , t1.name from scientists as t1 join assignedto as t2 on t1.ssn = t2.scientist group by t1.name <end>"}, {"text": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.", "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name elsa", "sql_clean": "<start> select payment_date from payment where amount > 10 union select t1.payment_date from payment as t1 join staff as t2 on t1.staff_id = t2.staff_id where t2.first_name = 'elsa' <end>"}, {"text": "For each company id, what are the companies and how many gas stations does each one operate?", "sql": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id", "db_id": "gas_company", "schema": {"tables": [], "columns": []}, "text_clean": "for each company id what are the companies and how many gas stations does each one operate", "sql_clean": "<start> select t2.company , count(*) from station_company as t1 join company as t2 on t1.company_id = t2.company_id group by t1.company_id <end>"}, {"text": "Who is the nominee who has been nominated for the most musicals?", "sql": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "musical", "schema": {"tables": [], "columns": []}, "text_clean": "who is the nominee who has been nominated for the most musicals", "sql_clean": "<start> select nominee from musical group by nominee order by count(*) desc limit 1 <end>"}, {"text": "How many staff does each project has? List the project id and the number in an ascending order.", "sql": "SELECT T1.project_id ,  count(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) ASC", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "how many staff does each project has list the project id and the number in an ascending order", "sql_clean": "<start> select t1.project_id , count(*) from project_staff as t1 join projects as t2 on t1.project_id = t2.project_id group by t1.project_id order by count(*) asc <end>"}, {"text": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.", "sql": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40", "sql_clean": "<start> select * from employees where salary between 8000 and 12000 and commission_pct != null or department_id != 40 <end>"}, {"text": "How many male and female assistant professors do we have?", "sql": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many male and female assistant professors do we have", "sql_clean": "<start> select sex , count(*) from faculty where rank = asstprof group by sex <end>"}, {"text": "Show the names of countries that have more than one roller coaster.", "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "db_id": "roller_coaster", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of countries that have more than one roller coaster", "sql_clean": "<start> select t1.name from country as t1 join roller_coaster as t2 on t1.country_id = t2.country_id group by t1.name having count(*) > 1 <end>"}, {"text": "Show the type of school and the number of buses for each type.", "sql": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type", "db_id": "school_bus", "schema": {"tables": [], "columns": []}, "text_clean": "show the type of school and the number of buses for each type", "sql_clean": "<start> select t2.type , count(*) from school_bus as t1 join school as t2 on t1.school_id = t2.school_id group by t2.type <end>"}, {"text": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of products that are not white in color and are not measured by the unit handful", "sql_clean": "<start> select t1.product_name from products as t1 join ref_product_categories as t2 on t1.product_category_code = t2.product_category_code join ref_colors as t3 on t1.color_code = t3.color_code where t3.color_description = white and t2.unit_of_measure != handful <end>"}, {"text": "What are the different names for each station that has ever had 7 bikes available?", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different names for each station that has ever had 7 bikes available", "sql_clean": "<start> select distinct t1.name from station as t1 join status as t2 on t1.id = t2.station_id where t2.bikes_available = 7 <end>"}, {"text": "What are the names and ids of documents that have the type code BK?", "sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and ids of documents that have the type code bk", "sql_clean": "<start> select document_name , document_id from documents where document_type_code = bk <end>"}, {"text": "Which club has the most female students as their members? Give me the name of the club.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "which club has the most female students as their members give me the name of the club", "sql_clean": "<start> select t1.clubname from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t3.sex = f group by t1.clubname order by count(*) desc limit 1 <end>"}, {"text": "what are the top 3 highest support rates?", "sql": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3", "db_id": "candidate_poll", "schema": {"tables": [], "columns": []}, "text_clean": "what are the top 3 highest support rates", "sql_clean": "<start> select support_rate from candidate order by support_rate desc limit 3 <end>"}, {"text": "Find the code of city where most of students are living in.", "sql": "SELECT city_code FROM student GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the code of city where most of students are living in", "sql_clean": "<start> select city_code from student group by city_code order by count(*) desc limit 1 <end>"}, {"text": "What is the name of the department with the most students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the department with the most students enrolled", "sql_clean": "<start> select t4.dept_name from class as t1 join enroll as t2 on t1.class_code = t2.class_code join course as t3 on t1.crs_code = t3.crs_code join department as t4 on t3.dept_code = t4.dept_code group by t3.dept_code order by count(*) desc limit 1 <end>"}, {"text": "What are the ids of all female students who play football?", "sql": "SELECT StuID FROM Student WHERE sex  =  'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of all female students who play football", "sql_clean": "<start> select stuid from student where sex = 'f' intersect select stuid from sportsinfo where sportname = football <end>"}, {"text": "Count the number of entrepreneurs.", "sql": "SELECT count(*) FROM entrepreneur", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of entrepreneurs", "sql_clean": "<start> select count(*) from entrepreneur <end>"}, {"text": "Show each location and the number of cinemas there.", "sql": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION", "db_id": "cinema", "schema": {"tables": [], "columns": []}, "text_clean": "show each location and the number of cinemas there", "sql_clean": "<start> select location , count(*) from cinema group by location <end>"}, {"text": "What are the distinct classes that races can have?", "sql": "SELECT DISTINCT CLASS FROM race", "db_id": "race_track", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct classes that races can have", "sql_clean": "<start> select distinct class from race <end>"}, {"text": "How many professors teach a class with the code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many professors teach a class with the code acct 211", "sql_clean": "<start> select count(distinct prof_num) from class where crs_code = acct-211 <end>"}, {"text": "What are the names of customers with credit score less than the average credit score across customers?", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of customers with credit score less than the average credit score across customers", "sql_clean": "<start> select cust_name from customer where credit_score < (select avg(credit_score) from customer) <end>"}, {"text": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and account balance of the customers who have loans with a total amount of more than 5000", "sql_clean": "<start> select t1.cust_name , t1.acc_type from customer as t1 join loan as t2 on t1.cust_id = t2.cust_id group by t1.cust_name having sum(t2.amount) > 5000 <end>"}, {"text": "Find the id of courses which are registered or attended by student whose id is 121?", "sql": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "find the id of courses which are registered or attended by student whose id is 121", "sql_clean": "<start> select course_id from student_course_registrations where student_id = 121 union select course_id from student_course_attendance where student_id = 121 <end>"}, {"text": "Return the average and minimum age of captains in each class.", "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "return the average and minimum age of captains in each class", "sql_clean": "<start> select avg(age) , min(age) , class from captain group by class <end>"}, {"text": "What are the names of the 3 departments with the most courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the 3 departments with the most courses", "sql_clean": "<start> select dept_name from course group by dept_name order by count(*) desc limit 3 <end>"}, {"text": "List name of all tracks in Balls to the Wall.", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "list name of all tracks in balls to the wall", "sql_clean": "<start> select t2.name from albums as t1 join tracks as t2 on t1.id = t2.genre_id where t1.title = balls to the wall; <end>"}, {"text": "What is the name of the patient who made the most recent appointment?", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the patient who made the most recent appointment", "sql_clean": "<start> select t1.name from patient as t1 join appointment as t2 on t1.ssn = t2.patient order by t2.start desc limit 1 <end>"}, {"text": "Who are the players from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "who are the players from indonesia", "sql_clean": "<start> select t2.player from country as t1 join match_season as t2 on t1.country_id = t2.country where t1.country_name = indonesia <end>"}, {"text": "What are the names of all departments in alphabetical order?", "sql": "SELECT dept_name FROM department ORDER BY dept_name", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all departments in alphabetical order", "sql_clean": "<start> select dept_name from department order by dept_name <end>"}, {"text": "What is the country that has the most perpetrators?", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "perpetrator", "schema": {"tables": [], "columns": []}, "text_clean": "what is the country that has the most perpetrators", "sql_clean": "<start> select country , count(*) from perpetrator group by country order by count(*) desc limit 1 <end>"}, {"text": "List the number of invoices from Chicago, IL.", "sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the number of invoices from chicago il", "sql_clean": "<start> select count(*) from invoices where billing_city = chicago and billing_state = il; <end>"}, {"text": "Find the number of students in total.", "sql": "SELECT count(*) FROM STUDENT", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of students in total", "sql_clean": "<start> select count(*) from student <end>"}, {"text": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.", "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "what are the minimum average and maximum quantities ordered check all the invoices", "sql_clean": "<start> select min(order_quantity) , avg(order_quantity) , max(order_quantity) from invoices <end>"}, {"text": "Count the number of bank branches.", "sql": "SELECT count(*) FROM bank", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of bank branches", "sql_clean": "<start> select count(*) from bank <end>"}, {"text": "What are the names of climbers who are not from the country of Switzerland?", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "db_id": "climbing", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of climbers who are not from the country of switzerland", "sql_clean": "<start> select name from climber where country != switzerland <end>"}, {"text": "Find the id of the appointment with the most recent start date?", "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the id of the appointment with the most recent start date", "sql_clean": "<start> select appointmentid from appointment order by start desc limit 1 <end>"}, {"text": "What is the name of the race held most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the race held most recently", "sql_clean": "<start> select name from races order by date desc limit 1 <end>"}, {"text": "Count the number of captains that have each rank.", "sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of captains that have each rank", "sql_clean": "<start> select count(*) , rank from captain group by rank <end>"}, {"text": "What are the names of companies with revenue between 100 and 150?", "sql": "SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of companies with revenue between 100 and 150", "sql_clean": "<start> select name from manufacturers where revenue between 100 and 150 <end>"}, {"text": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.", "sql": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "display the employee number name first name and last name and job title for all employees whose salary is more than any salary of those employees whose job title is pu man", "sql_clean": "<start> select employee_id , first_name , last_name , job_id from employees where salary > ( select max(salary) from employees where job_id = 'pu_man' ) <end>"}, {"text": "How many distinct kinds of injuries happened after season 2010?", "sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010", "db_id": "game_injury", "schema": {"tables": [], "columns": []}, "text_clean": "how many distinct kinds of injuries happened after season 2010", "sql_clean": "<start> select count(distinct t1.injury) from injury_accident as t1 join game as t2 on t1.game_id = t2.id where t2.season > 2010 <end>"}, {"text": "Return the duration of the actor with the greatest age.", "sql": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1", "db_id": "musical", "schema": {"tables": [], "columns": []}, "text_clean": "return the duration of the actor with the greatest age", "sql_clean": "<start> select duration from actor order by age desc limit 1 <end>"}, {"text": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the balances of checking accounts belonging to people with savings balances greater than the average savings balance", "sql_clean": "<start> select t2.balance from accounts as t1 join checking as t2 on t1.custid = t2.custid where t1.name in (select t1.name from accounts as t1 join savings as t2 on t1.custid = t2.custid where t2.balance > (select avg(balance) from savings)) <end>"}, {"text": "What are the different names of all songs without back vocals?", "sql": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different names of all songs without back vocals", "sql_clean": "<start> select distinct title from vocals as t1 join songs as t2 on t1.songid = t2.songid except select t2.title from vocals as t1 join songs as t2 on t1.songid = t2.songid where type = back <end>"}, {"text": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and account balance of the customer whose name includes the letter a", "sql_clean": "<start> select cust_name , acc_bal from customer where cust_name like '%a%' <end>"}, {"text": "How many papers are published in total?", "sql": "SELECT count(*) FROM papers", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many papers are published in total", "sql_clean": "<start> select count(*) from papers <end>"}, {"text": "How many hosts does each nationality have? List the nationality and the count.", "sql": "SELECT Nationality ,  COUNT(*) FROM HOST GROUP BY Nationality", "db_id": "party_host", "schema": {"tables": [], "columns": []}, "text_clean": "how many hosts does each nationality have list the nationality and the count", "sql_clean": "<start> select nationality , count(*) from host group by nationality <end>"}, {"text": "Which game type has least number of games?", "sql": "SELECT gtype FROM Video_games GROUP BY gtype ORDER BY count(*) LIMIT 1", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "which game type has least number of games", "sql_clean": "<start> select gtype from video_games group by gtype order by count(*) limit 1 <end>"}, {"text": "List the name and the number of stations for all the cities that have at least 15 stations.", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the name and the number of stations for all the cities that have at least 15 stations", "sql_clean": "<start> select city , count(*) from station group by city having count(*) >= 15 <end>"}, {"text": "What are the account details with the largest value or with value having char '5' in it?", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "what are the account details with the largest value or with value having char 5 in it", "sql_clean": "<start> select max(account_details) from accounts union select account_details from accounts where account_details like %5% <end>"}, {"text": "What are the official names of cities that have hosted more than one competition?", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "what are the official names of cities that have hosted more than one competition", "sql_clean": "<start> select t1.official_name from city as t1 join farm_competition as t2 on t1.city_id = t2.host_city_id group by t2.host_city_id having count(*) > 1 <end>"}, {"text": "Find the average number of factories for the manufacturers that have more than 20 shops.", "sql": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20", "db_id": "manufacturer", "schema": {"tables": [], "columns": []}, "text_clean": "find the average number of factories for the manufacturers that have more than 20 shops", "sql_clean": "<start> select avg(num_of_factories) from manufacturer where num_of_shops > 20 <end>"}, {"text": "Which course authors teach two or more courses? Give me their addresses and author IDs.", "sql": "SELECT T1.address_line_1 ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id HAVING Count(*)  >=  2", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "which course authors teach two or more courses give me their addresses and author ids", "sql_clean": "<start> select t1.address_line_1 , t2.author_id from course_authors_and_tutors as t1 join courses as t2 on t1.author_id = t2.author_id group by t2.author_id having count(*) >= 2 <end>"}, {"text": "What are the first names of all students that are not enrolled in courses?", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first names of all students that are not enrolled in courses", "sql_clean": "<start> select fname from student where stuid not in (select stuid from enrolled_in) <end>"}, {"text": "What are the types of competition and number of competitions for that type?", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "what are the types of competition and number of competitions for that type", "sql_clean": "<start> select competition_type , count(*) from competition group by competition_type <end>"}, {"text": "What is the name of the department with the most students minoring in it?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the department with the most students minoring in it", "sql_clean": "<start> select t1.dname from department as t1 join minor_in as t2 on t1.dno = t2.dno group by t2.dno order by count(*) desc limit 1 <end>"}, {"text": "How many customers does Steve Johnson support?", "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many customers does steve johnson support", "sql_clean": "<start> select count(*) from employees as t1 join customers as t2 on t2.support_rep_id = t1.id where t1.first_name = steve and t1.last_name = johnson; <end>"}, {"text": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of instructor who is the advisor of the student who has the highest number of total credits", "sql_clean": "<start> select t2.name from advisor as t1 join instructor as t2 on t1.i_id = t2.id join student as t3 on t1.s_id = t3.id order by t3.tot_cred desc limit 1 <end>"}, {"text": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "db_id": "university_basketball", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all the teams in the basketball competition sorted by all home scores in descending order", "sql_clean": "<start> select team_name from basketball_match order by all_home desc <end>"}, {"text": "What are the first and last names of the 5 customers who purchased something most recently?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last names of the 5 customers who purchased something most recently", "sql_clean": "<start> select t1.first_name , t1.last_name from customers as t1 join invoices as t2 on t2.customer_id = t1.id order by t2.invoice_date desc limit 5; <end>"}, {"text": "With which kind of payment method were the least number of payments processed?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "with which kind of payment method were the least number of payments processed", "sql_clean": "<start> select payment_method_code from payments group by payment_method_code order by count(*) asc limit 1 <end>"}, {"text": "Which players are from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "which players are from indonesia", "sql_clean": "<start> select t2.player from country as t1 join match_season as t2 on t1.country_id = t2.country where t1.country_name = indonesia <end>"}, {"text": "What are the highest cost, lowest cost and average cost of procedures?", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the highest cost lowest cost and average cost of procedures", "sql_clean": "<start> select max(cost) , min(cost) , avg(cost) from procedures <end>"}, {"text": "What are the names of the five cities with the greatest proportion of white people?", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "db_id": "county_public_safety", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the five cities with the greatest proportion of white people", "sql_clean": "<start> select name from city order by white desc limit 5 <end>"}, {"text": "What is the average number of pages per minute color?", "sql": "SELECT avg(pages_per_minute_color) FROM product", "db_id": "store_product", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average number of pages per minute color", "sql_clean": "<start> select avg(pages_per_minute_color) from product <end>"}, {"text": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "db_id": "race_track", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and seatings for all tracks opened after 2000 ordered by seating", "sql_clean": "<start> select name , seating from track where year_opened > 2000 order by seating <end>"}, {"text": "What are the names of the pilots in alphabetical order?", "sql": "SELECT Name FROM pilot ORDER BY Name ASC", "db_id": "aircraft", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the pilots in alphabetical order", "sql_clean": "<start> select name from pilot order by name asc <end>"}, {"text": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of members in club bootup baltimore whose age is below 18", "sql_clean": "<start> select count(*) from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t1.clubname = bootup baltimore and t3.age < 18 <end>"}, {"text": "Find the name of the products that are not using the most frequently-used max page size.", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "db_id": "store_product", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the products that are not using the most frequently used max page size", "sql_clean": "<start> select product from product where product != (select max_page_size from product group by max_page_size order by count(*) desc limit 1) <end>"}, {"text": "Find the salary and manager number for those employees who is working under a manager.", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the salary and manager number for those employees who is working under a manager", "sql_clean": "<start> select salary , manager_id from employees where manager_id != null <end>"}, {"text": "What are the invoice dates, order ids, and order details for all invoices?", "sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "what are the invoice dates order ids and order details for all invoices", "sql_clean": "<start> select t1.invoice_date , t1.order_id , t2.order_details from invoices as t1 join orders as t2 on t1.order_id = t2.order_id <end>"}, {"text": "What are the name and primarily affiliated department name of each physician?", "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the name and primarily affiliated department name of each physician", "sql_clean": "<start> select t1.name , t3.name from physician as t1 join affiliated_with as t2 on t1.employeeid = t2.physician join department as t3 on t2.department = t3.departmentid where t2.primaryaffiliation = 1 <end>"}, {"text": "Count the number of book clubs.", "sql": "SELECT count(*) FROM book_club", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of book clubs", "sql_clean": "<start> select count(*) from book_club <end>"}, {"text": "What is the zip code of the hosue of the employee named Janessa Sawayn?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what is the zip code of the hosue of the employee named janessa sawayn", "sql_clean": "<start> select t1.zip_postcode from addresses as t1 join staff as t2 on t1.address_id = t2.staff_address_id where t2.first_name = janessa and t2.last_name = sawayn; <end>"}, {"text": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.", "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;", "db_id": "cre_Doc_Control_Systems", "schema": {"tables": [], "columns": []}, "text_clean": "which shipping agent shipped the most documents list the shipping agent name and the number of documents", "sql_clean": "<start> select ref_shipping_agents.shipping_agent_name , count(documents.document_id) from ref_shipping_agents join documents on documents.shipping_agent_code = ref_shipping_agents.shipping_agent_code group by ref_shipping_agents.shipping_agent_code order by count(documents.document_id) desc limit 1; <end>"}, {"text": "Who is the director of movie Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "who is the director of movie avatar", "sql_clean": "<start> select director from movie where title = 'avatar' <end>"}, {"text": "When did researchers start and stop working?", "sql": "SELECT date_from ,  date_to FROM Project_Staff WHERE role_code  =  'researcher'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "when did researchers start and stop working", "sql_clean": "<start> select date_from , date_to from project_staff where role_code = 'researcher' <end>"}, {"text": "Show name, opening year, and capacity for each cinema.", "sql": "SELECT name ,  openning_year ,  capacity FROM cinema", "db_id": "cinema", "schema": {"tables": [], "columns": []}, "text_clean": "show name opening year and capacity for each cinema", "sql_clean": "<start> select name , openning_year , capacity from cinema <end>"}, {"text": "List the forenames of all distinct drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the forenames of all distinct drivers in alphabetical order", "sql_clean": "<start> select distinct forename from drivers order by forename asc <end>"}, {"text": "Show the status shared by cities with population bigger than 1500 and smaller than 500.", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "show the status shared by cities with population bigger than 1500 and smaller than 500", "sql_clean": "<start> select status from city where population > 1500 intersect select status from city where population < 500 <end>"}, {"text": "What is the average number of attendance at home games for each year?", "sql": "SELECT YEAR ,  avg(attendance) FROM home_game GROUP BY YEAR;", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average number of attendance at home games for each year", "sql_clean": "<start> select year , avg(attendance) from home_game group by year; <end>"}, {"text": "Return the phone numbers for all customers and suppliers.", "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "return the phone numbers for all customers and suppliers", "sql_clean": "<start> select customer_phone from customers union select supplier_phone from suppliers <end>"}, {"text": "What are the distinct types of mills that are built by American or Canadian architects?", "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'", "db_id": "architecture", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct types of mills that are built by american or canadian architects", "sql_clean": "<start> select distinct t1.type from mill as t1 join architect as t2 on t1.architect_id = t2.id where t2.nationality = 'american' or t2.nationality = 'canadian' <end>"}, {"text": "How many institutions are there?", "sql": "SELECT count(*) FROM inst", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many institutions are there", "sql_clean": "<start> select count(*) from inst <end>"}, {"text": "Find the average credit score of the customers who have some loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the average credit score of the customers who have some loan", "sql_clean": "<start> select avg(credit_score) from customer where cust_id in (select cust_id from loan) <end>"}, {"text": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?", "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "what are the cities that have a branch that opened in 2001 and a branch with more than 100 members", "sql_clean": "<start> select city from branch where open_year = 2001 and membership_amount > 100 <end>"}, {"text": "Show names for all employees who do not have certificate of Boeing 737-800.", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "show names for all employees who do not have certificate of boeing 737 800", "sql_clean": "<start> select name from employee except select t1.name from employee as t1 join certificate as t2 on t1.eid = t2.eid join aircraft as t3 on t3.aid = t2.aid where t3.name = boeing 737-800 <end>"}, {"text": "Find the ids of all the order items whose product id is 11.", "sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "db_id": "tracking_orders", "schema": {"tables": [], "columns": []}, "text_clean": "find the ids of all the order items whose product id is 11", "sql_clean": "<start> select order_item_id from order_items where product_id = 11 <end>"}, {"text": "List the studios which average gross is above 4500000.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "list the studios which average gross is above 4500000", "sql_clean": "<start> select studio from film group by studio having avg(gross_in_dollar) >= 4500000 <end>"}, {"text": "Count the total number of settlements made.", "sql": "SELECT count(*) FROM Settlements", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "count the total number of settlements made", "sql_clean": "<start> select count(*) from settlements <end>"}, {"text": "Find the semester and year which has the least number of student taking any class.", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the semester and year which has the least number of student taking any class", "sql_clean": "<start> select semester , year from takes group by semester , year order by count(*) limit 1 <end>"}, {"text": "List the names of players that do not have coaches.", "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "db_id": "riding_club", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of players that do not have coaches", "sql_clean": "<start> select player_name from player where player_id not in (select player_id from player_coach) <end>"}, {"text": "Show the team that have at least two technicians.", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "db_id": "machine_repair", "schema": {"tables": [], "columns": []}, "text_clean": "show the team that have at least two technicians", "sql_clean": "<start> select team from technician group by team having count(*) >= 2 <end>"}, {"text": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what is the zip code of staff with first name as janessa and last name as sawayn lived", "sql_clean": "<start> select t1.zip_postcode from addresses as t1 join staff as t2 on t1.address_id = t2.staff_address_id where t2.first_name = janessa and t2.last_name = sawayn; <end>"}, {"text": "Sort the names of all counties in descending alphabetical order.", "sql": "SELECT County_name FROM county ORDER BY County_name DESC", "db_id": "election", "schema": {"tables": [], "columns": []}, "text_clean": "sort the names of all counties in descending alphabetical order", "sql_clean": "<start> select county_name from county order by county_name desc <end>"}, {"text": "When did the first staff for the projects started working?", "sql": "SELECT date_from FROM Project_Staff ORDER BY date_from ASC LIMIT 1", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "when did the first staff for the projects started working", "sql_clean": "<start> select date_from from project_staff order by date_from asc limit 1 <end>"}, {"text": "Find the name of physicians whose position title contains the word 'senior'.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of physicians whose position title contains the word senior", "sql_clean": "<start> select name from physician where position like '%senior%' <end>"}, {"text": "Give the section titles of the document with the name \"David CV\".", "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"", "db_id": "document_management", "schema": {"tables": [], "columns": []}, "text_clean": "give the section titles of the document with the name david cv", "sql_clean": "<start> select t2.section_title from documents as t1 join document_sections as t2 on t1.document_code = t2.document_code where t1.document_name = david cv <end>"}, {"text": "List all the information about course authors and tutors in alphabetical order of the personal name.", "sql": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "list all the information about course authors and tutors in alphabetical order of the personal name", "sql_clean": "<start> select * from course_authors_and_tutors order by personal_name <end>"}, {"text": "Show the ids of all employees who don't destroy any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "show the ids of all employees who don t destroy any document", "sql_clean": "<start> select employee_id from employees except select destroyed_by_employee_id from documents_to_be_destroyed <end>"}, {"text": "Show the names of employees that work for companies with sales bigger than 200.", "sql": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200", "db_id": "company_employee", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of employees that work for companies with sales bigger than 200", "sql_clean": "<start> select t2.name from employment as t1 join people as t2 on t1.people_id = t2.people_id join company as t3 on t1.company_id = t3.company_id where t3.sales_in_billion > 200 <end>"}, {"text": "List the object number of railways that do not have any trains.", "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)", "db_id": "railway", "schema": {"tables": [], "columns": []}, "text_clean": "list the object number of railways that do not have any trains", "sql_clean": "<start> select objectnumber from railway where railway_id not in (select railway_id from train) <end>"}, {"text": "What are the names of entrepreneurs?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of entrepreneurs", "sql_clean": "<start> select t2.name from entrepreneur as t1 join people as t2 on t1.people_id = t2.people_id <end>"}, {"text": "Find the component amounts and names of all furnitures that have more than 10 components.", "sql": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10", "db_id": "manufacturer", "schema": {"tables": [], "columns": []}, "text_clean": "find the component amounts and names of all furnitures that have more than 10 components", "sql_clean": "<start> select num_of_component , name from furniture where num_of_component > 10 <end>"}, {"text": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.", "sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1", "db_id": "customer_complaints", "schema": {"tables": [], "columns": []}, "text_clean": "return the city with the customer type code good credit rating that had the fewest customers", "sql_clean": "<start> select town_city from customers where customer_type_code = good credit rating group by town_city order by count(*) limit 1 <end>"}, {"text": "What is the average number of people injured by all perpetrators?", "sql": "SELECT avg(Injured) FROM perpetrator", "db_id": "perpetrator", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average number of people injured by all perpetrators", "sql_clean": "<start> select avg(injured) from perpetrator <end>"}, {"text": "Find the stories of the building with the largest height.", "sql": "SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1", "db_id": "company_office", "schema": {"tables": [], "columns": []}, "text_clean": "find the stories of the building with the largest height", "sql_clean": "<start> select stories from buildings order by height desc limit 1 <end>"}, {"text": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?", "sql": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the duration file size and song format for every pop song ordered by title alphabetically", "sql_clean": "<start> select t1.duration , t1.file_size , t1.formats from files as t1 join song as t2 on t1.f_id = t2.f_id where t2.genre_is = pop order by t2.song_name <end>"}, {"text": "How many submissions are there?", "sql": "SELECT count(*) FROM submission", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "how many submissions are there", "sql_clean": "<start> select count(*) from submission <end>"}, {"text": "List the total points of gymnasts in descending order of floor exercise points.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "db_id": "gymnast", "schema": {"tables": [], "columns": []}, "text_clean": "list the total points of gymnasts in descending order of floor exercise points", "sql_clean": "<start> select total_points from gymnast order by floor_exercise_points desc <end>"}, {"text": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?", "sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000", "db_id": "swimming", "schema": {"tables": [], "columns": []}, "text_clean": "which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000", "sql_clean": "<start> select country from stadium where capacity > 60000 intersect select country from stadium where capacity < 50000 <end>"}, {"text": "What is the receipt date of the document with id 3?", "sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;", "db_id": "cre_Doc_Control_Systems", "schema": {"tables": [], "columns": []}, "text_clean": "what is the receipt date of the document with id 3", "sql_clean": "<start> select receipt_date from documents where document_id = 3; <end>"}, {"text": "What is the name of the game that has been played the most?", "sql": "SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid GROUP BY T1.gameid ORDER BY sum(hours_played) DESC LIMIT 1", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the game that has been played the most", "sql_clean": "<start> select gname from plays_games as t1 join video_games as t2 on t1.gameid = t2.gameid group by t1.gameid order by sum(hours_played) desc limit 1 <end>"}, {"text": "Show the host names for parties with number of hosts greater than 20.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "db_id": "party_host", "schema": {"tables": [], "columns": []}, "text_clean": "show the host names for parties with number of hosts greater than 20", "sql_clean": "<start> select t2.name from party_host as t1 join host as t2 on t1.host_id = t2.host_id join party as t3 on t1.party_id = t3.party_id where t3.number_of_hosts > 20 <end>"}, {"text": "What is the name of the stadium which held the most events?", "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "db_id": "swimming", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the stadium which held the most events", "sql_clean": "<start> select t1.name from stadium as t1 join event as t2 on t1.id = t2.stadium_id group by t2.stadium_id order by count(*) desc limit 1 <end>"}, {"text": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "for grants that have descriptions of regular and initial applications what are their start dates", "sql_clean": "<start> select t1.grant_start_date from grants as t1 join documents as t2 on t1.grant_id = t2.grant_id join document_types as t3 on t2.document_type_code = t3.document_type_code where t3.document_description = 'regular' intersect select t1.grant_start_date from grants as t1 join documents as t2 on t1.grant_id = t2.grant_id join document_types as t3 on t2.document_type_code = t3.document_type_code where t3.document_description = 'initial application' <end>"}, {"text": "Count the number of customers who have an account.", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of customers who have an account", "sql_clean": "<start> select count(distinct customer_id) from accounts <end>"}, {"text": "Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.", "sql": "SELECT Publisher FROM publication WHERE Price  >  10000000 INTERSECT SELECT Publisher FROM publication WHERE Price  <  5000000", "db_id": "book_2", "schema": {"tables": [], "columns": []}, "text_clean": "show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000", "sql_clean": "<start> select publisher from publication where price > 10000000 intersect select publisher from publication where price < 5000000 <end>"}, {"text": "How many students are over 18 and do not have allergy to food type or animal type?", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many students are over 18 and do not have allergy to food type or animal type", "sql_clean": "<start> select count(*) from student where age > 18 and stuid not in ( select stuid from has_allergy as t1 join allergy_type as t2 on t1.allergy = t2.allergy where t2.allergytype = food or t2.allergytype = animal) <end>"}, {"text": "Return the characters and durations for each actor.", "sql": "SELECT Character ,  Duration FROM actor", "db_id": "musical", "schema": {"tables": [], "columns": []}, "text_clean": "return the characters and durations for each actor", "sql_clean": "<start> select character , duration from actor <end>"}, {"text": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?", "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "which contact channel has been used by the customer with name tillman ernser", "sql_clean": "<start> select distinct channel_code from customers as t1 join customer_contact_channels as t2 on t1.customer_id = t2.customer_id where t1.customer_name = tillman ernser <end>"}, {"text": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the branches that have some members with a hometown in louisville kentucky and also those from hiram goergia", "sql_clean": "<start> select t2.name from membership_register_branch as t1 join branch as t2 on t1.branch_id = t2.branch_id join member as t3 on t1.member_id = t3.member_id where t3.hometown = 'louisville , kentucky' intersect select t2.name from membership_register_branch as t1 join branch as t2 on t1.branch_id = t2.branch_id join member as t3 on t1.member_id = t3.member_id where t3.hometown = 'hiram , georgia' <end>"}, {"text": "Find the id and star rating of each hotel and sort them in increasing order of price.", "sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "find the id and star rating of each hotel and sort them in increasing order of price", "sql_clean": "<start> select hotel_id , star_rating_code from hotels order by price_range asc <end>"}, {"text": "List the subject ID, name of subject and the number of courses available for each subject in ascending order of the course counts.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "list the subject id name of subject and the number of courses available for each subject in ascending order of the course counts", "sql_clean": "<start> select t1.subject_id , t2.subject_name , count(*) from courses as t1 join subjects as t2 on t1.subject_id = t2.subject_id group by t1.subject_id order by count(*) asc <end>"}, {"text": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".", "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "find the names and descriptions of the photos taken at the tourist attraction called film festival", "sql_clean": "<start> select t1.name , t1.description from photos as t1 join tourist_attractions as t2 on t1.tourist_attraction_id = t2.tourist_attraction_id where t2.name = film festival <end>"}, {"text": "List all every engineer's first name, last name, details and coresponding skill description.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "list all every engineer s first name last name details and coresponding skill description", "sql_clean": "<start> select t1.first_name , t1.last_name , t1.other_details , t3.skill_description from maintenance_engineers as t1 join engineer_skills as t2 on t1.engineer_id = t2.engineer_id join skills as t3 on t2.skill_id = t3.skill_id <end>"}, {"text": "What are the total and average enrollment of all schools?", "sql": "SELECT sum(enrollment) ,  avg(enrollment) FROM school", "db_id": "school_finance", "schema": {"tables": [], "columns": []}, "text_clean": "what are the total and average enrollment of all schools", "sql_clean": "<start> select sum(enrollment) , avg(enrollment) from school <end>"}, {"text": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the room number of the rooms which can sit 50 to 100 students and their buildings", "sql_clean": "<start> select building , room_number from classroom where capacity between 50 and 100 <end>"}, {"text": "which country did participated in the most number of Tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "which country did participated in the most number of tournament competitions", "sql_clean": "<start> select country from competition where competition_type = 'tournament' group by country order by count(*) desc limit 1 <end>"}, {"text": "Find the total number of students and total number of instructors for each department.", "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the total number of students and total number of instructors for each department", "sql_clean": "<start> select count(distinct t2.id) , count(distinct t3.id) , t3.dept_name from department as t1 join student as t2 on t1.dept_name = t2.dept_name join instructor as t3 on t1.dept_name = t3.dept_name group by t3.dept_name <end>"}, {"text": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.", "sql": "SELECT fname ,  lname FROM student WHERE city_code != 'HKG' ORDER BY age", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the first and last name of students who are not living in the city with code hkg and sorted the results by their ages", "sql_clean": "<start> select fname , lname from student where city_code != 'hkg' order by age <end>"}, {"text": "Find the emails of customers who has filed a complaints of the product with the most complaints.", "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "db_id": "customer_complaints", "schema": {"tables": [], "columns": []}, "text_clean": "find the emails of customers who has filed a complaints of the product with the most complaints", "sql_clean": "<start> select t1.email_address from customers as t1 join complaints as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by count(*) limit 1 <end>"}, {"text": "what are the event details of the services that have the type code 'Marriage'?", "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", "db_id": "local_govt_in_alabama", "schema": {"tables": [], "columns": []}, "text_clean": "what are the event details of the services that have the type code marriage", "sql_clean": "<start> select t1.event_details from events as t1 join services as t2 on t1.service_id = t2.service_id where t2.service_type_code = 'marriage' <end>"}, {"text": "Find the name and age of the person who is a friend of Dan or Alice.", "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and age of the person who is a friend of dan or alice", "sql_clean": "<start> select distinct t1.name , t1.age from person as t1 join personfriend as t2 on t1.name = t2.name where t2.friend = 'dan' or t2.friend = 'alice' <end>"}, {"text": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the most popular room in the hotel the most popular room is the room that had seen the largest number of reservations", "sql_clean": "<start> select t2.roomname from reservations as t1 join rooms as t2 on t1.room = t2.roomid group by t1.room order by count(*) desc limit 1; <end>"}, {"text": "Return the names of people, ordered by weight ascending.", "sql": "SELECT Name FROM People ORDER BY Weight ASC", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "return the names of people ordered by weight ascending", "sql_clean": "<start> select name from people order by weight asc <end>"}, {"text": "Find the number of rooms with king bed for each decor type.", "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of rooms with king bed for each decor type", "sql_clean": "<start> select decor , count(*) from rooms where bedtype = king group by decor; <end>"}, {"text": "Show home city where at least two drivers older than 40 are from.", "sql": "SELECT home_city FROM driver WHERE age  >  40 GROUP BY home_city HAVING count(*)  >=  2", "db_id": "school_bus", "schema": {"tables": [], "columns": []}, "text_clean": "show home city where at least two drivers older than 40 are from", "sql_clean": "<start> select home_city from driver where age > 40 group by home_city having count(*) >= 2 <end>"}, {"text": "Sort all the rooms according to the price. Just report the room names.", "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "sort all the rooms according to the price just report the room names", "sql_clean": "<start> select roomname from rooms order by baseprice; <end>"}, {"text": "What cities do students live in?", "sql": "SELECT DISTINCT city_code FROM Student", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "what cities do students live in", "sql_clean": "<start> select distinct city_code from student <end>"}, {"text": "List the id of students who registered some courses and the number of their registered courses?", "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "list the id of students who registered some courses and the number of their registered courses", "sql_clean": "<start> select t1.student_id , count(*) from students as t1 join student_course_registrations as t2 on t1.student_id = t2.student_id group by t1.student_id <end>"}, {"text": "Show the school name and driver name for all school buses.", "sql": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id", "db_id": "school_bus", "schema": {"tables": [], "columns": []}, "text_clean": "show the school name and driver name for all school buses", "sql_clean": "<start> select t2.school , t3.name from school_bus as t1 join school as t2 on t1.school_id = t2.school_id join driver as t3 on t1.driver_id = t3.driver_id <end>"}, {"text": "What is the number of colleges with a student population greater than 15000?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the number of colleges with a student population greater than 15000", "sql_clean": "<start> select count(*) from college where enr > 15000 <end>"}, {"text": "display the department name and number of employees in each of the department.", "sql": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "display the department name and number of employees in each of the department", "sql_clean": "<start> select t2.department_name , count(*) from employees as t1 join departments as t2 on t1.department_id = t2.department_id group by t2.department_name <end>"}, {"text": "Show names of parties that does not have any members.", "sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "db_id": "party_people", "schema": {"tables": [], "columns": []}, "text_clean": "show names of parties that does not have any members", "sql_clean": "<start> select party_name from party where party_id not in (select party_id from member) <end>"}, {"text": "What are the teams that have the 5 oldest players?", "sql": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5", "db_id": "school_player", "schema": {"tables": [], "columns": []}, "text_clean": "what are the teams that have the 5 oldest players", "sql_clean": "<start> select team from player order by age desc limit 5 <end>"}, {"text": "What is maximum group equity shareholding of the companies?", "sql": "SELECT max(group_equity_shareholding) FROM operate_company", "db_id": "flight_company", "schema": {"tables": [], "columns": []}, "text_clean": "what is maximum group equity shareholding of the companies", "sql_clean": "<start> select max(group_equity_shareholding) from operate_company <end>"}, {"text": "How many rooms does each block floor have?", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many rooms does each block floor have", "sql_clean": "<start> select count(*) , t1.blockfloor from block as t1 join room as t2 on t1.blockfloor = t2.blockfloor and t1.blockcode = t2.blockcode group by t1.blockfloor <end>"}, {"text": "Count the number of voting records for each election cycle.", "sql": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of voting records for each election cycle", "sql_clean": "<start> select election_cycle , count(*) from voting_record group by election_cycle <end>"}, {"text": "How many documents do not have any expense?", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "how many documents do not have any expense", "sql_clean": "<start> select count(*) from documents where document_id not in ( select document_id from documents_with_expenses ) <end>"}, {"text": "Find the origins from which more than 1 train starts.", "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1", "db_id": "station_weather", "schema": {"tables": [], "columns": []}, "text_clean": "find the origins from which more than 1 train starts", "sql_clean": "<start> select origin from train group by origin having count(*) > 1 <end>"}, {"text": "List each donator name and the amount of endowment in descending order of the amount of endowment.", "sql": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC", "db_id": "school_finance", "schema": {"tables": [], "columns": []}, "text_clean": "list each donator name and the amount of endowment in descending order of the amount of endowment", "sql_clean": "<start> select donator_name , sum(amount) from endowment group by donator_name order by sum(amount) desc <end>"}, {"text": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all races that occurred after 12 00 00 or before 09 00 00", "sql_clean": "<start> select name from races where time > 12:00:00 or time < 09:00:00 <end>"}, {"text": "What are the all games score and location of the school called Clemson?", "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "db_id": "university_basketball", "schema": {"tables": [], "columns": []}, "text_clean": "what are the all games score and location of the school called clemson", "sql_clean": "<start> select t2.all_games , t1.location from university as t1 join basketball_match as t2 on t1.school_id = t2.school_id where team_name = 'clemson' <end>"}, {"text": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance", "sql_clean": "<start> select t1.name , t2.balance + t3.balance from accounts as t1 join checking as t2 on t1.custid = t2.custid join savings as t3 on t1.custid = t3.custid where t3.balance > (select avg(balance) from savings) <end>"}, {"text": "What is the number of airports per country, ordered from most to least?", "sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "what is the number of airports per country ordered from most to least", "sql_clean": "<start> select count(*) , country from airports group by country order by count(*) desc <end>"}, {"text": "Find the name of students who didn't take any course from Biology department.", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of students who didn t take any course from biology department", "sql_clean": "<start> select name from student where id not in (select t1.id from takes as t1 join course as t2 on t1.course_id = t2.course_id where t2.dept_name = 'biology') <end>"}, {"text": "What are the ids for transactions that have an amount greater than the average amount of a transaction?", "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids for transactions that have an amount greater than the average amount of a transaction", "sql_clean": "<start> select transaction_id from financial_transactions where transaction_amount > (select avg(transaction_amount) from financial_transactions) <end>"}, {"text": "What is the most common type of ships?", "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "ship_mission", "schema": {"tables": [], "columns": []}, "text_clean": "what is the most common type of ships", "sql_clean": "<start> select type from ship group by type order by count(*) desc limit 1 <end>"}, {"text": "Which allergy type has least number of allergies?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "which allergy type has least number of allergies", "sql_clean": "<start> select allergytype from allergy_type group by allergytype order by count(*) asc limit 1 <end>"}, {"text": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "give the title and credits for the course that is taught in the classroom with the greatest capacity", "sql_clean": "<start> select t3.title , t3.credits from classroom as t1 join section as t2 on t1.building = t2.building and t1.room_number = t2.room_number join course as t3 on t2.course_id = t3.course_id where t1.capacity = (select max(capacity) from classroom) <end>"}, {"text": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "which tourist attractions do the tourists vincent and marcelle visit tell me the names of the attractions", "sql_clean": "<start> select t1.name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1.tourist_attraction_id = t3.tourist_attraction_id and t2.tourist_id = t3.tourist_id where t2.tourist_details = vincent intersect select t1.name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1.tourist_attraction_id = t3.tourist_attraction_id and t2.tourist_id = t3.tourist_id where t2.tourist_details = marcelle <end>"}, {"text": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.", "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "give me a list of descriptions of the problems that are reported by the staff whose first name is christop", "sql_clean": "<start> select t1.problem_description from problems as t1 join staff as t2 on t1.reported_by_staff_id = t2.staff_id where t2.staff_first_name = christop <end>"}, {"text": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000", "sql_clean": "<start> select t1.name from employee as t1 join certificate as t2 on t1.eid = t2.eid join aircraft as t3 on t3.aid = t2.aid where t3.distance > 5000 group by t1.eid order by count(*) desc limit 1 <end>"}, {"text": "Which transportation method is used the most often to get to tourist attractions?", "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "which transportation method is used the most often to get to tourist attractions", "sql_clean": "<start> select how_to_get_there from tourist_attractions group by how_to_get_there order by count(*) desc limit 1 <end>"}, {"text": "Find the average hours for the students whose tryout decision is no.", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the average hours for the students whose tryout decision is no", "sql_clean": "<start> select avg(t1.hs) from player as t1 join tryout as t2 on t1.pid = t2.pid where t2.decision = 'no' <end>"}, {"text": "What are the maximum, minimum, and average booked count for the products booked?", "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked", "db_id": "products_for_hire", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum minimum and average booked count for the products booked", "sql_clean": "<start> select max(booked_count) , min(booked_count) , avg(booked_count) from products_booked <end>"}, {"text": "Find the names of schools that have some students playing in goalie and mid positions.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of schools that have some students playing in goalie and mid positions", "sql_clean": "<start> select cname from tryout where ppos = 'goalie' intersect select cname from tryout where ppos = 'mid' <end>"}, {"text": "What is the storm name and max speed which affected the greatest number of regions?", "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "what is the storm name and max speed which affected the greatest number of regions", "sql_clean": "<start> select t1.name , t1.max_speed from storm as t1 join affected_region as t2 on t1.storm_id = t2.storm_id group by t1.storm_id order by count(*) desc limit 1 <end>"}, {"text": "Show first name, last name, age for all female students. Their sex is F.", "sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "show first name last name age for all female students their sex is f", "sql_clean": "<start> select fname , lname , age from student where sex = 'f' <end>"}, {"text": "How many students have cat allergies?", "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many students have cat allergies", "sql_clean": "<start> select count(*) from has_allergy where allergy = cat <end>"}, {"text": "Count the number of chip model that do not have wifi.", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "db_id": "phone_1", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of chip model that do not have wifi", "sql_clean": "<start> select count(*) from chip_model where wifi = 'no' <end>"}, {"text": "What is the average number of points for players from the \"AIB\" club?", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average number of points for players from the aib club", "sql_clean": "<start> select avg(t2.points) from club as t1 join player as t2 on t1.club_id = t2.club_id where t1.name = aib <end>"}, {"text": "Show the id and star rating of each hotel, ordered by its price from low to high.", "sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "show the id and star rating of each hotel ordered by its price from low to high", "sql_clean": "<start> select hotel_id , star_rating_code from hotels order by price_range asc <end>"}, {"text": "Tell me the the date when the first claim was made.", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "tell me the the date when the first claim was made", "sql_clean": "<start> select date_claim_made from claims order by date_claim_made asc limit 1 <end>"}, {"text": "Return the name of each physician and the number of patients he or she treats.", "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "return the name of each physician and the number of patients he or she treats", "sql_clean": "<start> select t1.name , count(*) from physician as t1 join patient as t2 on t1.employeeid = t2.pcp group by t1.employeeid <end>"}, {"text": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".", "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "return the the active to date of the latest contact channel used by the customer named tillman ernser", "sql_clean": "<start> select max(t2.active_to_date) from customers as t1 join customer_contact_channels as t2 on t1.customer_id = t2.customer_id where t1.customer_name = tillman ernser <end>"}, {"text": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?", "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and phone numbers for all suppliers sorted in alphabetical order of their addressed", "sql_clean": "<start> select t1.supplier_name , t1.supplier_phone from suppliers as t1 join supplier_addresses as t2 on t1.supplier_id = t2.supplier_id join addresses as t3 on t2.address_id = t3.address_id order by t3.address_details <end>"}, {"text": "For each city, how many branches opened before 2010?", "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "for each city how many branches opened before 2010", "sql_clean": "<start> select city , count(*) from branch where open_year < 2010 group by city <end>"}, {"text": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8", "sql_clean": "<start> select f_id from song where resolution > (select max(resolution) from song where rating < 8) <end>"}, {"text": "Return the categories of music festivals that have the result \"Awarded\".", "sql": "SELECT Category FROM music_festival WHERE RESULT  =  \"Awarded\"", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "return the categories of music festivals that have the result awarded", "sql_clean": "<start> select category from music_festival where result = awarded <end>"}, {"text": "How many students are age 18?", "sql": "SELECT count(*) FROM Student WHERE age  =  18", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many students are age 18", "sql_clean": "<start> select count(*) from student where age = 18 <end>"}, {"text": "Find the list of cities that no customer is living in.", "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "find the list of cities that no customer is living in", "sql_clean": "<start> select city from addresses where city not in ( select distinct t3.city from customers as t1 join customer_addresses as t2 on t1.customer_id = t2.customer_id join addresses as t3 on t2.address_id = t3.address_id) <end>"}, {"text": "How many papers are published by the institution \"Tokohu University\"?", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many papers are published by the institution tokohu university", "sql_clean": "<start> select count(distinct t1.title) from papers as t1 join authorship as t2 on t1.paperid = t2.paperid join inst as t3 on t2.instid = t3.instid where t3.name = tokohu university <end>"}, {"text": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?", "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids names dates of opening and other details for accounts corresponding to the customer with the first name meaghan", "sql_clean": "<start> select t1.account_id , t1.date_account_opened , t1.account_name , t1.other_account_details from accounts as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.customer_first_name = 'meaghan' <end>"}, {"text": "What are the countries for each market, ordered alphabetically?", "sql": "SELECT Country FROM market ORDER BY Country ASC", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "what are the countries for each market ordered alphabetically", "sql_clean": "<start> select country from market order by country asc <end>"}, {"text": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "sql": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011", "db_id": "cinema", "schema": {"tables": [], "columns": []}, "text_clean": "show the average minimum and maximum capacity for all the cinemas opened in year 2011 or later", "sql_clean": "<start> select avg(capacity) , min(capacity) , max(capacity) from cinema where openning_year >= 2011 <end>"}, {"text": "What are the categories of music festivals for which there have been more than 1 music festival?", "sql": "SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*)  >  1", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "what are the categories of music festivals for which there have been more than 1 music festival", "sql_clean": "<start> select category from music_festival group by category having count(*) > 1 <end>"}, {"text": "Show the description and code of the attraction type most tourist attractions belong to.", "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "show the description and code of the attraction type most tourist attractions belong to", "sql_clean": "<start> select t1.attraction_type_description , t2.attraction_type_code from ref_attraction_types as t1 join tourist_attractions as t2 on t1.attraction_type_code = t2.attraction_type_code group by t2.attraction_type_code order by count(*) desc limit 1 <end>"}, {"text": "Find the average age of female students.", "sql": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the average age of female students", "sql_clean": "<start> select avg(age) from student where sex = f <end>"}, {"text": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?", "sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last names of all customers with between 1000 and 3000 dollars outstanding", "sql_clean": "<start> select first_name , last_name from customers where amount_outstanding between 1000 and 3000; <end>"}, {"text": "Find the number of scientists involved for the projects that require more than 300 hours.", "sql": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of scientists involved for the projects that require more than 300 hours", "sql_clean": "<start> select count(*) , t1.name from projects as t1 join assignedto as t2 on t1.code = t2.project where t1.hours > 300 group by t1.name <end>"}, {"text": "Return the famous titles of the artist called \"Triumfall\".", "sql": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "return the famous titles of the artist called triumfall", "sql_clean": "<start> select famous_title from artist where artist = triumfall <end>"}, {"text": "Retrieve the country that has published the most papers.", "sql": "SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.country ORDER BY count(*) DESC LIMIT 1", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "retrieve the country that has published the most papers", "sql_clean": "<start> select t1.country from inst as t1 join authorship as t2 on t1.instid = t2.instid join papers as t3 on t2.paperid = t3.paperid group by t1.country order by count(*) desc limit 1 <end>"}, {"text": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.", "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "which buildings does emma manage give me the short names of the buildings", "sql_clean": "<start> select building_short_name from apartment_buildings where building_manager = emma <end>"}, {"text": "Find the first and last name of students whose age is younger than the average age.", "sql": "SELECT fname ,  lname FROM student WHERE age  <  (SELECT avg(age) FROM student)", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first and last name of students whose age is younger than the average age", "sql_clean": "<start> select fname , lname from student where age < (select avg(age) from student) <end>"}, {"text": "Find the city that hosted some events in the most recent year. What is the id of this city?", "sql": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1", "db_id": "city_record", "schema": {"tables": [], "columns": []}, "text_clean": "find the city that hosted some events in the most recent year what is the id of this city", "sql_clean": "<start> select host_city from hosting_city order by year desc limit 1 <end>"}, {"text": "Find the first name and major of the students who are not allegry to soy.", "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first name and major of the students who are not allegry to soy", "sql_clean": "<start> select fname , major from student where stuid not in (select stuid from has_allergy where allergy = soy) <end>"}, {"text": "What is the average and total capacity for all dorms who are of gender X?", "sql": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average and total capacity for all dorms who are of gender x", "sql_clean": "<start> select avg(student_capacity) , sum(student_capacity) from dorm where gender = 'x' <end>"}, {"text": "Show me the owner of the channel with the highest rating.", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "show me the owner of the channel with the highest rating", "sql_clean": "<start> select owner from channel order by rating_in_percent desc limit 1 <end>"}, {"text": "What are the last names of staff with email addressed containing the substring \"wrau\"?", "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"", "db_id": "customer_complaints", "schema": {"tables": [], "columns": []}, "text_clean": "what are the last names of staff with email addressed containing the substring wrau", "sql_clean": "<start> select last_name from staff where email_address like %wrau% <end>"}, {"text": "Who belong to the institution \"University of Oxford\"? Show the first names and last names.", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"University of Oxford\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "who belong to the institution university of oxford show the first names and last names", "sql_clean": "<start> select distinct t1.fname , t1.lname from authors as t1 join authorship as t2 on t1.authid = t2.authid join inst as t3 on t2.instid = t3.instid where t3.name = university of oxford <end>"}, {"text": "Find all the stage positions of the musicians with first name \"Solveig\"", "sql": "SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE Firstname  =  \"Solveig\"", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "find all the stage positions of the musicians with first name solveig", "sql_clean": "<start> select distinct t1.stageposition from performance as t1 join band as t2 on t1.bandmate = t2.id where firstname = solveig <end>"}, {"text": "When was the first asset acquired?", "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "when was the first asset acquired", "sql_clean": "<start> select asset_acquired_date from assets order by asset_acquired_date asc limit 1 <end>"}, {"text": "Find the texts of assessment notes for teachers with last name \"Schuster\".", "sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"", "db_id": "behavior_monitoring", "schema": {"tables": [], "columns": []}, "text_clean": "find the texts of assessment notes for teachers with last name schuster", "sql_clean": "<start> select t1.text_of_notes from assessment_notes as t1 join teachers as t2 on t1.teacher_id = t2.teacher_id where t2.last_name = schuster <end>"}, {"text": "Find the personal name, family name, and author ID of the course author that teaches the most courses.", "sql": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "find the personal name family name and author id of the course author that teaches the most courses", "sql_clean": "<start> select t1.personal_name , t1.family_name , t2.author_id from course_authors_and_tutors as t1 join courses as t2 on t1.author_id = t2.author_id group by t2.author_id order by count(*) desc limit 1 <end>"}, {"text": "Find the states where have the colleges whose enrollments are less than the largest size.", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the states where have the colleges whose enrollments are less than the largest size", "sql_clean": "<start> select distinct state from college where enr < (select max(enr) from college) <end>"}, {"text": "Which teachers teach in classroom 109? Give me their last names.", "sql": "SELECT lastname FROM teachers WHERE classroom  =  109", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "which teachers teach in classroom 109 give me their last names", "sql_clean": "<start> select lastname from teachers where classroom = 109 <end>"}, {"text": "What are the names of customers who have taken both Mortgage and Auto loans?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of customers who have taken both mortgage and auto loans", "sql_clean": "<start> select t1.cust_name from customer as t1 join loan as t2 on t1.cust_id = t2.cust_id where loan_type = 'mortgages' intersect select t1.cust_name from customer as t1 join loan as t2 on t1.cust_id = t2.cust_id where loan_type = 'auto' <end>"}, {"text": "Count the number of classrooms in Lamberton.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of classrooms in lamberton", "sql_clean": "<start> select count(*) from classroom where building = 'lamberton' <end>"}, {"text": "how many ships are there?", "sql": "SELECT count(*) FROM ship", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many ships are there", "sql_clean": "<start> select count(*) from ship <end>"}, {"text": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"", "db_id": "election", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the county that the delegates on appropriations committee belong to", "sql_clean": "<start> select t1.county_name from county as t1 join election as t2 on t1.county_id = t2.district where t2.committee = appropriations <end>"}, {"text": "What are the names and data types of the characteristics of the 'cumin' product?", "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and data types of the characteristics of the cumin product", "sql_clean": "<start> select t3.characteristic_name , t3.characteristic_data_type from products as t1 join product_characteristics as t2 on t1.product_id = t2.product_id join characteristics as t3 on t2.characteristic_id = t3.characteristic_id where t1.product_name = cumin <end>"}, {"text": "What is the id of the product that is booked for 3 times?", "sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3", "db_id": "products_for_hire", "schema": {"tables": [], "columns": []}, "text_clean": "what is the id of the product that is booked for 3 times", "sql_clean": "<start> select product_id from products_booked group by product_id having count(*) = 3 <end>"}, {"text": "How many customers don't have an account?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "how many customers don t have an account", "sql_clean": "<start> select count(*) from customers where customer_id not in (select customer_id from accounts) <end>"}, {"text": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the dates that had the top 5 cloud cover rates also tell me the cloud cover rate", "sql_clean": "<start> select date , cloud_cover from weather order by cloud_cover desc limit 5 <end>"}, {"text": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?", "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names color descriptions and product descriptions for products in the herbs category", "sql_clean": "<start> select t1.product_name , t2.color_description , t1.product_description from products as t1 join ref_colors as t2 on t1.color_code = t2.color_code where product_category_code = herbs <end>"}, {"text": "What are the names of shops that have more than a single kind of device in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of shops that have more than a single kind of device in stock", "sql_clean": "<start> select t2.shop_name from stock as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id having count(*) > 1 <end>"}, {"text": "What is the first name of all employees who do not give any lessons?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what is the first name of all employees who do not give any lessons", "sql_clean": "<start> select first_name from staff except select t2.first_name from lessons as t1 join staff as t2 on t1.staff_id = t2.staff_id <end>"}, {"text": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.", "sql": "SELECT Date ,  Venue FROM workshop ORDER BY Venue", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "sort the each workshop in alphabetical order of the venue return the date and venue of each workshop", "sql_clean": "<start> select date , venue from workshop order by venue <end>"}, {"text": "What is the document type code with most number of documents?", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "what is the document type code with most number of documents", "sql_clean": "<start> select document_type_code from documents group by document_type_code order by count(*) desc limit 1 <end>"}, {"text": "Which players won awards in both 1960 and 1961? Return their first names and last names.", "sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "which players won awards in both 1960 and 1961 return their first names and last names", "sql_clean": "<start> select t1.name_first , t1.name_last from player as t1 join player_award as t2 where t2.year = 1960 intersect select t1.name_first , t1.name_last from player as t1 join player_award as t2 where t2.year = 1961 <end>"}, {"text": "List the name and gender for all artists who released songs in March.", "sql": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the name and gender for all artists who released songs in march", "sql_clean": "<start> select t1.artist_name , t1.gender from artist as t1 join song as t2 on t1.artist_name = t2.artist_name where t2.releasedate like %mar% <end>"}, {"text": "What is the name of member in charge of greatest number of events?", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "db_id": "party_people", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of member in charge of greatest number of events", "sql_clean": "<start> select t1.member_name from member as t1 join party_events as t2 on t1.member_id = t2.member_in_charge_id group by t2.member_in_charge_id order by count(*) desc limit 1 <end>"}, {"text": "Show the names of people, and dates and venues of debates they are on the affirmative side.", "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID", "db_id": "debate", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of people and dates and venues of debates they are on the affirmative side", "sql_clean": "<start> select t3.name , t2.date , t2.venue from debate_people as t1 join debate as t2 on t1.debate_id = t2.debate_id join people as t3 on t1.affirmative = t3.people_id <end>"}, {"text": "Show the prices of publications whose publisher is either \"Person\" or \"Wiley\"", "sql": "SELECT Price FROM publication WHERE Publisher  =  \"Person\" OR Publisher  =  \"Wiley\"", "db_id": "book_2", "schema": {"tables": [], "columns": []}, "text_clean": "show the prices of publications whose publisher is either person or wiley", "sql_clean": "<start> select price from publication where publisher = person or publisher = wiley <end>"}, {"text": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.", "sql": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "which students live in the city with code nyc and have class senator votes in the spring election cycle count the numbers", "sql_clean": "<start> select count(*) from student as t1 join voting_record as t2 on t1.stuid = class_senator_vote where t1.city_code = nyc and t2.election_cycle = spring <end>"}, {"text": "Show different parties of people along with the number of people in each party.", "sql": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party", "db_id": "debate", "schema": {"tables": [], "columns": []}, "text_clean": "show different parties of people along with the number of people in each party", "sql_clean": "<start> select party , count(*) from people group by party <end>"}, {"text": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.", "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "return the id of the staff whose staff department assignment was earlier than that of any clerical staff", "sql_clean": "<start> select staff_id from staff_department_assignments where date_assigned_to < (select max(date_assigned_to) from staff_department_assignments where job_title_code = 'clerical staff') <end>"}, {"text": "What is the name of the person who is the oldest?", "sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the person who is the oldest", "sql_clean": "<start> select name from person where age = (select max(age) from person) <end>"}, {"text": "What are the id and name of the photos for mountains?", "sql": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000", "db_id": "mountain_photos", "schema": {"tables": [], "columns": []}, "text_clean": "what are the id and name of the photos for mountains", "sql_clean": "<start> select t1.id , t1.name from mountain as t1 join photos as t2 on t1.id = t2.mountain_id where t1.height > 4000 <end>"}, {"text": "What are the movie titles and average rating of the movies with the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the movie titles and average rating of the movies with the lowest average rating", "sql_clean": "<start> select t2.title , avg(t1.stars) from rating as t1 join movie as t2 on t1.mid = t2.mid group by t1.mid order by avg(t1.stars) limit 1 <end>"}, {"text": "What are the different types of transactions?", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different types of transactions", "sql_clean": "<start> select distinct transaction_type from financial_transactions <end>"}, {"text": "How many artists do we have?", "sql": "SELECT count(*) FROM artist", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "how many artists do we have", "sql_clean": "<start> select count(*) from artist <end>"}, {"text": "Find the locations that have more than one movie theater with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "db_id": "cinema", "schema": {"tables": [], "columns": []}, "text_clean": "find the locations that have more than one movie theater with capacity above 300", "sql_clean": "<start> select location from cinema where capacity > 300 group by location having count(*) > 1 <end>"}, {"text": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?", "sql": "SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.name  =  'A Puzzling Parallax'", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of any scientists who worked on projects named matter of time and a puzzling pattern", "sql_clean": "<start> select t3.name from assignedto as t1 join projects as t2 on t1.project = t2.code join scientists as t3 on t1.scientist = t3.ssn where t2.name = 'matter of time' intersect select t3.name from assignedto as t1 join projects as t2 on t1.project = t2.code join scientists as t3 on t1.scientist = t3.ssn where t2.name = 'a puzzling parallax' <end>"}, {"text": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "return the names of entrepreneurs do no not have the investor rachel elnaugh", "sql_clean": "<start> select t2.name from entrepreneur as t1 join people as t2 on t1.people_id = t2.people_id where t1.investor != rachel elnaugh <end>"}, {"text": "Count the number of markets that have a number of cities lower than 300.", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of markets that have a number of cities lower than 300", "sql_clean": "<start> select count(*) from market where number_cities < 300 <end>"}, {"text": "Who has friends that are younger than the average age?", "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "who has friends that are younger than the average age", "sql_clean": "<start> select distinct t2.name from person as t1 join personfriend as t2 on t1.name = t2.friend where t1.age < (select avg(age) from person) <end>"}, {"text": "Show ids for all documents in type CV without expense budgets.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "show ids for all documents in type cv without expense budgets", "sql_clean": "<start> select document_id from documents where document_type_code = cv except select document_id from documents_with_expenses <end>"}, {"text": "Find the name of customers whose credit score is below the average credit scores of all customers.", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of customers whose credit score is below the average credit scores of all customers", "sql_clean": "<start> select cust_name from customer where credit_score < (select avg(credit_score) from customer) <end>"}, {"text": "Count the number of financial transactions that the account with the name 337 has.", "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of financial transactions that the account with the name 337 has", "sql_clean": "<start> select count(*) from financial_transactions as t1 join accounts as t2 on t1.account_id = t2.account_id where t2.account_name = 337 <end>"}, {"text": "Who is the founder of Sony?", "sql": "SELECT founder FROM manufacturers WHERE name  =  'Sony'", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "who is the founder of sony", "sql_clean": "<start> select founder from manufacturers where name = 'sony' <end>"}, {"text": "What is the number of faculty at Long Beach State University in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "db_id": "csu_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the number of faculty at long beach state university in 2002", "sql_clean": "<start> select faculty from faculty as t1 join campuses as t2 on t1.campus = t2.id where t1.year = 2002 and t2.campus = long beach state university <end>"}, {"text": "List the first names of all the students in room 107.", "sql": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the first names of all the students in room 107", "sql_clean": "<start> select distinct firstname from list where classroom = 107 <end>"}, {"text": "What are the reigns and days held of all wrestlers?", "sql": "SELECT Reign ,  Days_held FROM wrestler", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "what are the reigns and days held of all wrestlers", "sql_clean": "<start> select reign , days_held from wrestler <end>"}, {"text": "For each position, what is the minimum time students spent practicing?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "for each position what is the minimum time students spent practicing", "sql_clean": "<start> select min(t2.hs) , t1.ppos from tryout as t1 join player as t2 on t1.pid = t2.pid group by t1.ppos <end>"}, {"text": "Which authors with submissions are from college \"Florida\" or \"Temple\"?", "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "which authors with submissions are from college florida or temple", "sql_clean": "<start> select author from submission where college = florida or college = temple <end>"}, {"text": "Return all distinct detention type codes.", "sql": "SELECT DISTINCT detention_type_code FROM Detention", "db_id": "behavior_monitoring", "schema": {"tables": [], "columns": []}, "text_clean": "return all distinct detention type codes", "sql_clean": "<start> select distinct detention_type_code from detention <end>"}, {"text": "What are the different district names in order of descending city area?", "sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "db_id": "store_product", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different district names in order of descending city area", "sql_clean": "<start> select distinct district_name from district order by city_area desc <end>"}, {"text": "What are the title and issues of the books?", "sql": "SELECT Title ,  Issues FROM book", "db_id": "book_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the title and issues of the books", "sql_clean": "<start> select title , issues from book <end>"}, {"text": "Find the name and college of students whose decisions are yes in the tryout.", "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and college of students whose decisions are yes in the tryout", "sql_clean": "<start> select t1.pname , t2.cname from player as t1 join tryout as t2 on t1.pid = t2.pid where t2.decision = 'yes' <end>"}, {"text": "What is the average access count of documents that have the least common structure?", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "db_id": "document_management", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average access count of documents that have the least common structure", "sql_clean": "<start> select avg(access_count) from documents group by document_structure_code order by count(*) asc limit 1 <end>"}, {"text": "Return the phone numbers of employees with salaries between 8000 and 12000.", "sql": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "return the phone numbers of employees with salaries between 8000 and 12000", "sql_clean": "<start> select phone_number from employees where salary between 8000 and 12000 <end>"}, {"text": "What is the name of department where has the smallest number of professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of department where has the smallest number of professors", "sql_clean": "<start> select t2.dept_name from professor as t1 join department as t2 on t1.dept_code = t2.dept_code group by t1.dept_code order by count(*) limit 1 <end>"}, {"text": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.", "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "return the number of accounts that the customer with the first name art and last name turcotte has", "sql_clean": "<start> select count(*) from accounts as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.customer_first_name = art and t2.customer_last_name = turcotte <end>"}, {"text": "What are the first name, last name, and phone number of all the female faculty members?", "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first name last name and phone number of all the female faculty members", "sql_clean": "<start> select fname , lname , phone from faculty where sex = 'f' <end>"}, {"text": "What instruments does the the song \"Le Pop\" use?", "sql": "SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what instruments does the the song le pop use", "sql_clean": "<start> select instrument from instruments as t1 join songs as t2 on t1.songid = t2.songid where title = le pop <end>"}, {"text": "Display all the information about the department Marketing.", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "display all the information about the department marketing", "sql_clean": "<start> select * from departments where department_name = 'marketing' <end>"}, {"text": "Find the organisation ids and details of the organisations which are involved in", "sql": "SELECT T2.organisation_id ,  T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id  =  T2.organisation_id GROUP BY T2.organisation_id HAVING sum(T1.grant_amount)  >  6000", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "find the organisation ids and details of the organisations which are involved in", "sql_clean": "<start> select t2.organisation_id , t2.organisation_details from grants as t1 join organisations as t2 on t1.organisation_id = t2.organisation_id group by t2.organisation_id having sum(t1.grant_amount) > 6000 <end>"}, {"text": "Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the courses that do not have any prerequisite", "sql_clean": "<start> select title from course where course_id not in (select course_id from prereq) <end>"}, {"text": "Give me the name of each club.", "sql": "SELECT clubname FROM club", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "give me the name of each club", "sql_clean": "<start> select clubname from club <end>"}, {"text": "How many flights do we have?", "sql": "SELECT count(*) FROM Flight", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many flights do we have", "sql_clean": "<start> select count(*) from flight <end>"}, {"text": "What are the names of all games played by Linda Smith?", "sql": "SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid  =  T2.gameid JOIN Student AS T3 ON T3.Stuid  =  T1.Stuid WHERE T3.Lname  =  \"Smith\" AND T3.Fname  =  \"Linda\"", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all games played by linda smith", "sql_clean": "<start> select gname from plays_games as t1 join video_games as t2 on t1.gameid = t2.gameid join student as t3 on t3.stuid = t1.stuid where t3.lname = smith and t3.fname = linda <end>"}, {"text": "Show the faculty id of each faculty member, along with the number of students he or she advises.", "sql": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "show the faculty id of each faculty member along with the number of students he or she advises", "sql_clean": "<start> select t1.facid , count(*) from faculty as t1 join student as t2 on t1.facid = t2.advisor group by t1.facid <end>"}, {"text": "What is the name of the body builder with the greatest body weight?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "db_id": "body_builder", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the body builder with the greatest body weight", "sql_clean": "<start> select t2.name from body_builder as t1 join people as t2 on t1.people_id = t2.people_id order by t2.weight desc limit 1 <end>"}, {"text": "What are the description and credit of the course which the student whose last name is Smithson took?", "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the description and credit of the course which the student whose last name is smithson took", "sql_clean": "<start> select t4.crs_description , t4.crs_credit from class as t1 join enroll as t2 on t1.class_code = t2.class_code join student as t3 on t3.stu_num = t2.stu_num join course as t4 on t4.crs_code = t1.crs_code where t3.stu_lname = 'smithson' <end>"}, {"text": "Tell me the ages of the oldest and youngest students studying major 600.", "sql": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "tell me the ages of the oldest and youngest students studying major 600", "sql_clean": "<start> select max(age) , min(age) from student where major = 600 <end>"}, {"text": "What are the total number of the audiences who visited any of the festivals?", "sql": "SELECT sum(Num_of_Audience) FROM festival_detail", "db_id": "entertainment_awards", "schema": {"tables": [], "columns": []}, "text_clean": "what are the total number of the audiences who visited any of the festivals", "sql_clean": "<start> select sum(num_of_audience) from festival_detail <end>"}, {"text": "How many different types of transactions are there?", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "how many different types of transactions are there", "sql_clean": "<start> select count(distinct transaction_type) from financial_transactions <end>"}, {"text": "In which year did the most recent crime happen?", "sql": "SELECT max(YEAR) FROM perpetrator;", "db_id": "perpetrator", "schema": {"tables": [], "columns": []}, "text_clean": "in which year did the most recent crime happen", "sql_clean": "<start> select max(year) from perpetrator; <end>"}, {"text": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of stations that have latitude above 37 4 and never had bike availability below 7", "sql_clean": "<start> select id from station where lat > 37.4 except select station_id from status group by station_id having min(bikes_available) < 7 <end>"}, {"text": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?", "sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'", "db_id": "local_govt_mdm", "schema": {"tables": [], "columns": []}, "text_clean": "what are the renting arrears tax ids related to the customer master index whose detail is not schmidt kertzmann and lubowitz", "sql_clean": "<start> select t1.council_tax_id from rent_arrears as t1 join cmi_cross_references as t2 on t1.cmi_cross_ref_id = t2.cmi_cross_ref_id join customer_master_index as t3 on t3.master_customer_id = t2.master_customer_id where t3.cmi_details != 'schmidt , kertzmann and lubowitz' <end>"}, {"text": "Show the number of all customers without an account.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "show the number of all customers without an account", "sql_clean": "<start> select count(*) from customers where customer_id not in (select customer_id from accounts) <end>"}, {"text": "What are the different transaction types, and how many transactions of each have taken place?", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different transaction types and how many transactions of each have taken place", "sql_clean": "<start> select transaction_type , count(*) from financial_transactions group by transaction_type <end>"}, {"text": "find all dependent names who have a spouse relation with some employee.", "sql": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'", "db_id": "company_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all dependent names who have a spouse relation with some employee", "sql_clean": "<start> select dependent_name from dependent where relationship = 'spouse' <end>"}, {"text": "List the votes of elections in descending order.", "sql": "SELECT Votes FROM election ORDER BY Votes DESC", "db_id": "election_representative", "schema": {"tables": [], "columns": []}, "text_clean": "list the votes of elections in descending order", "sql_clean": "<start> select votes from election order by votes desc <end>"}, {"text": "What is the average price for flights from Los Angeles to Honolulu.", "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average price for flights from los angeles to honolulu", "sql_clean": "<start> select avg(price) from flight where origin = los angeles and destination = honolulu <end>"}, {"text": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "db_id": "medicine_enzyme_interaction", "schema": {"tables": [], "columns": []}, "text_clean": "what are the medicine and trade names that cannot interact with the enzyme with the product heme", "sql_clean": "<start> select name , trade_name from medicine except select t1.name , t1.trade_name from medicine as t1 join medicine_enzyme_interaction as t2 on t2.medicine_id = t1.id join enzyme as t3 on t3.id = t2.enzyme_id where t3.product = 'protoporphyrinogen ix' <end>"}, {"text": "Find the names of stadiums whose capacity is smaller than the average capacity.", "sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)", "db_id": "swimming", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of stadiums whose capacity is smaller than the average capacity", "sql_clean": "<start> select name from stadium where capacity < (select avg(capacity) from stadium) <end>"}, {"text": "Show name, address road, and city for all branches sorted by open year.", "sql": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "show name address road and city for all branches sorted by open year", "sql_clean": "<start> select name , address_road , city from branch order by open_year <end>"}, {"text": "How many appointments are there?", "sql": "SELECT count(*) FROM appointment", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many appointments are there", "sql_clean": "<start> select count(*) from appointment <end>"}, {"text": "Find all the stores in the district with the most population.", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "db_id": "store_product", "schema": {"tables": [], "columns": []}, "text_clean": "find all the stores in the district with the most population", "sql_clean": "<start> select t1.store_name from store as t1 join store_district as t2 on t1.store_id = t2.store_id where district_id = (select district_id from district order by city_population desc limit 1) <end>"}, {"text": "What are the names and buildings of the deparments, sorted by budget descending?", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and buildings of the deparments sorted by budget descending", "sql_clean": "<start> select dept_name , building from department order by budget desc <end>"}, {"text": "What is the characteristic name used by most number of the products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "what is the characteristic name used by most number of the products", "sql_clean": "<start> select t3.characteristic_name from products as t1 join product_characteristics as t2 on t1.product_id = t2.product_id join characteristics as t3 on t2.characteristic_id = t3.characteristic_id group by t3.characteristic_name order by count(*) desc limit 1 <end>"}, {"text": "How many drama workshop groups are there in each city? Return both the city and the count.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "how many drama workshop groups are there in each city return both the city and the count", "sql_clean": "<start> select t1.city_town , count(*) from addresses as t1 join drama_workshop_groups as t2 on t1.address_id = t2.address_id group by t1.city_town <end>"}, {"text": "What is the type of the document whose description starts with the word 'Initial'?", "sql": "SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what is the type of the document whose description starts with the word initial", "sql_clean": "<start> select document_type_code from document_types where document_description like 'initial%' <end>"}, {"text": "Find the ids and names of stations from which at least 200 trips started.", "sql": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the ids and names of stations from which at least 200 trips started", "sql_clean": "<start> select start_station_id , start_station_name from trip group by start_station_name having count(*) >= 200 <end>"}, {"text": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.", "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of kids staying in the rooms reserved by a person called roy sweaz", "sql_clean": "<start> select kids from reservations where firstname = roy and lastname = sweazy; <end>"}, {"text": "Find the distinct winery of wines having price between 50 and 100.", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the distinct winery of wines having price between 50 and 100", "sql_clean": "<start> select distinct winery from wine where price between 50 and 100 <end>"}, {"text": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "show the theme for exhibitions with both records of an attendance below 100 and above 500", "sql_clean": "<start> select t2.theme from exhibition_record as t1 join exhibition as t2 on t1.exhibition_id = t2.exhibition_id where t1.attendance < 100 intersect select t2.theme from exhibition_record as t1 join exhibition as t2 on t1.exhibition_id = t2.exhibition_id where t1.attendance > 500 <end>"}, {"text": "Count the number of accounts corresponding to each customer id.", "sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of accounts corresponding to each customer id", "sql_clean": "<start> select count(*) , customer_id from accounts group by customer_id <end>"}, {"text": "Show all movie titles, years, and directors, ordered by budget.", "sql": "SELECT title ,  YEAR ,  director FROM movie ORDER BY budget_million", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "show all movie titles years and directors ordered by budget", "sql_clean": "<start> select title , year , director from movie order by budget_million <end>"}, {"text": "How many students are there in total?", "sql": "SELECT count(*) FROM STUDENT", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "how many students are there in total", "sql_clean": "<start> select count(*) from student <end>"}, {"text": "Which college have both players with position midfielder and players with position defender?", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "which college have both players with position midfielder and players with position defender", "sql_clean": "<start> select college from match_season where position = midfielder intersect select college from match_season where position = defender <end>"}, {"text": "How many assets does each maintenance contract contain? List the number and the contract id.", "sql": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "how many assets does each maintenance contract contain list the number and the contract id", "sql_clean": "<start> select count(*) , t1.maintenance_contract_id from maintenance_contracts as t1 join assets as t2 on t1.maintenance_contract_id = t2.maintenance_contract_id group by t1.maintenance_contract_id <end>"}, {"text": "List the area and county of all appelations.", "sql": "SELECT Area ,  County FROM APPELLATIONS", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the area and county of all appelations", "sql_clean": "<start> select area , county from appellations <end>"}, {"text": "What is the description of the most popular role among users that have logged in?", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "db_id": "document_management", "schema": {"tables": [], "columns": []}, "text_clean": "what is the description of the most popular role among users that have logged in", "sql_clean": "<start> select role_description from roles where role_code = (select role_code from users where user_login = 1 group by role_code order by count(*) desc limit 1) <end>"}, {"text": "What are the names of all the aircrafts associated with London Gatwick airport?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "db_id": "aircraft", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all the aircrafts associated with london gatwick airport", "sql_clean": "<start> select t1.aircraft from aircraft as t1 join airport_aircraft as t2 on t1.aircraft_id = t2.aircraft_id join airport as t3 on t2.airport_id = t3.airport_id where t3.airport_name = london gatwick <end>"}, {"text": "What are the title and director of the films without any schedule?", "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "db_id": "cinema", "schema": {"tables": [], "columns": []}, "text_clean": "what are the title and director of the films without any schedule", "sql_clean": "<start> select title , directed_by from film where film_id not in (select film_id from schedule) <end>"}, {"text": "On which day has it neither been foggy nor rained in the zip code of 94107?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "on which day has it neither been foggy nor rained in the zip code of 94107", "sql_clean": "<start> select date from weather where zip_code = 94107 and events != fog and events != rain <end>"}, {"text": "What is the id of the instructor who advises of all students from History department?", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the id of the instructor who advises of all students from history department", "sql_clean": "<start> select i_id from advisor as t1 join student as t2 on t1.s_id = t2.id where t2.dept_name = 'history' <end>"}, {"text": "List all the name of organizations in order of the date formed.", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "db_id": "e_government", "schema": {"tables": [], "columns": []}, "text_clean": "list all the name of organizations in order of the date formed", "sql_clean": "<start> select organization_name from organizations order by date_formed asc <end>"}, {"text": "Count the number of cards the customer with the first name Art and last name Turcotte has.", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of cards the customer with the first name art and last name turcotte has", "sql_clean": "<start> select count(*) from customers_cards as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.customer_first_name = art and t2.customer_last_name = turcotte <end>"}, {"text": "Show names for artists without any exhibition.", "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "show names for artists without any exhibition", "sql_clean": "<start> select name from artist where artist_id not in (select artist_id from exhibition) <end>"}, {"text": "Show the id of the employee named Ebba.", "sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "show the id of the employee named ebba", "sql_clean": "<start> select employee_id from employees where employee_name = ebba <end>"}, {"text": "What are the names of documents that do not have any images?", "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "db_id": "document_management", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of documents that do not have any images", "sql_clean": "<start> select document_name from documents except select t1.document_name from documents as t1 join document_sections as t2 on t1.document_code = t2.document_code join document_sections_images as t3 on t2.section_id = t3.section_id <end>"}, {"text": "How many characteristics does the product named \"laurel\" have?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "how many characteristics does the product named laurel have", "sql_clean": "<start> select count(*) from products as t1 join product_characteristics as t2 on t1.product_id = t2.product_id join characteristics as t3 on t2.characteristic_id = t3.characteristic_id where t1.product_name = laurel <end>"}, {"text": "Find the number of departments in each school.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of departments in each school", "sql_clean": "<start> select count(distinct dept_name) , school_code from department group by school_code <end>"}, {"text": "Show the names of players coached by the rank 1 coach.", "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1", "db_id": "riding_club", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of players coached by the rank 1 coach", "sql_clean": "<start> select t3.player_name from player_coach as t1 join coach as t2 on t1.coach_id = t2.coach_id join player as t3 on t1.player_id = t3.player_id where t2.rank = 1 <end>"}, {"text": "In what city does Janessa Sawayn live?", "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "in what city does janessa sawayn live", "sql_clean": "<start> select t1.city from addresses as t1 join staff as t2 on t1.address_id = t2.staff_address_id where t2.first_name = janessa and t2.last_name = sawayn; <end>"}, {"text": "what is the salary and name of the employee who has the most number of aircraft certificates?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the salary and name of the employee who has the most number of aircraft certificates", "sql_clean": "<start> select t1.name , t1.salary from employee as t1 join certificate as t2 on t1.eid = t2.eid group by t1.eid order by count(*) desc limit 1 <end>"}, {"text": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the artists who released a song that has the word love in its title and where are the artists from", "sql_clean": "<start> select t1.artist_name , t1.country from artist as t1 join song as t2 on t1.artist_name = t2.artist_name where t2.song_name like %love% <end>"}, {"text": "What are the delegate and name of the county they belong to, for each county?", "sql": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District", "db_id": "election", "schema": {"tables": [], "columns": []}, "text_clean": "what are the delegate and name of the county they belong to for each county", "sql_clean": "<start> select t2.delegate , t1.county_name from county as t1 join election as t2 on t1.county_id = t2.district <end>"}, {"text": "How many students have a food allergy?", "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many students have a food allergy", "sql_clean": "<start> select count(*) from has_allergy as t1 join allergy_type as t2 on t1.allergy = t2.allergy where t2.allergytype = food <end>"}, {"text": "Count the number of transactions.", "sql": "SELECT count(*) FROM Financial_transactions", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of transactions", "sql_clean": "<start> select count(*) from financial_transactions <end>"}, {"text": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different reviewer names movie titles and stars for every rating where the reviewer had the same name as the director", "sql_clean": "<start> select distinct t3.name , t2.title , t1.stars from rating as t1 join movie as t2 on t1.mid = t2.mid join reviewer as t3 on t1.rid = t3.rid where t2.director = t3.name <end>"}, {"text": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of tourist attraction that alison visited but rosalind did not visit", "sql_clean": "<start> select t1.name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1.tourist_attraction_id = t3.tourist_attraction_id and t2.tourist_id = t3.tourist_id where t2.tourist_details = alison except select t1.name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1.tourist_attraction_id = t3.tourist_attraction_id and t2.tourist_id = t3.tourist_id where t2.tourist_details = rosalind <end>"}, {"text": "How many countries do not have an roller coaster longer than 3000?", "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )", "db_id": "roller_coaster", "schema": {"tables": [], "columns": []}, "text_clean": "how many countries do not have an roller coaster longer than 3000", "sql_clean": "<start> select count(*) from country where country_id not in ( select country_id from roller_coaster where length > 3000 ) <end>"}, {"text": "Find all the customer information in state NY.", "sql": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all the customer information in state ny", "sql_clean": "<start> select * from customer where state = ny <end>"}, {"text": "What are the maximum, minimum and average home games each stadium held?", "sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium", "db_id": "game_injury", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum minimum and average home games each stadium held", "sql_clean": "<start> select max(home_games) , min(home_games) , avg(home_games) from stadium <end>"}, {"text": "What are the names of all aircrafts that have won a match at least twice?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2", "db_id": "aircraft", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all aircrafts that have won a match at least twice", "sql_clean": "<start> select t1.aircraft from aircraft as t1 join match as t2 on t1.aircraft_id = t2.winning_aircraft group by t2.winning_aircraft having count(*) >= 2 <end>"}, {"text": "What are the names of all the stores in the largest district by population?", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "db_id": "store_product", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all the stores in the largest district by population", "sql_clean": "<start> select t1.store_name from store as t1 join store_district as t2 on t1.store_id = t2.store_id where district_id = (select district_id from district order by city_population desc limit 1) <end>"}, {"text": "List the names of wrestlers and the teams in elimination in descending order of days held.", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of wrestlers and the teams in elimination in descending order of days held", "sql_clean": "<start> select t2.name , t1.team from elimination as t1 join wrestler as t2 on t1.wrestler_id = t2.wrestler_id order by t2.days_held desc <end>"}, {"text": "What are the names, ages, and countries of artists, sorted by the year they joined?", "sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names ages and countries of artists sorted by the year they joined", "sql_clean": "<start> select name , age , country from artist order by year_join <end>"}, {"text": "How many clubs are there?", "sql": "SELECT count(*) FROM club", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "how many clubs are there", "sql_clean": "<start> select count(*) from club <end>"}, {"text": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "among all the claims which settlements have a claimed amount that is no more than the average list the claim start date", "sql_clean": "<start> select date_claim_made from claims where amount_settled <= ( select avg(amount_settled) from claims ) <end>"}, {"text": "Show the position of players and the corresponding number of players.", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "show the position of players and the corresponding number of players", "sql_clean": "<start> select position , count(*) from match_season group by position <end>"}, {"text": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?", "sql": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex", "db_id": "candidate_poll", "schema": {"tables": [], "columns": []}, "text_clean": "for each sex what is the name and sex of the candidate with the oppose rate for their sex", "sql_clean": "<start> select t1.name , t1.sex , min(oppose_rate) from people as t1 join candidate as t2 on t1.people_id = t2.people_id group by t1.sex <end>"}, {"text": "Show me the number of parks the state of NY has.", "sql": "SELECT count(*) FROM park WHERE state  =  'NY';", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "show me the number of parks the state of ny has", "sql_clean": "<start> select count(*) from park where state = 'ny'; <end>"}, {"text": "Which physician was trained in the procedure that costs the most.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "which physician was trained in the procedure that costs the most", "sql_clean": "<start> select t1.name from physician as t1 join trained_in as t2 on t1.employeeid = t2.physician join procedures as t3 on t3.code = t2.treatment order by t3.cost desc limit 1 <end>"}, {"text": "How many students are there?", "sql": "SELECT count(*) FROM student", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many students are there", "sql_clean": "<start> select count(*) from student <end>"}, {"text": "What are the ids of instructors who didnt' teach?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of instructors who didnt teach", "sql_clean": "<start> select id from instructor except select id from teaches <end>"}, {"text": "Show the opening year in whcih at least two churches opened.", "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2", "db_id": "wedding", "schema": {"tables": [], "columns": []}, "text_clean": "show the opening year in whcih at least two churches opened", "sql_clean": "<start> select open_date from church group by open_date having count(*) >= 2 <end>"}, {"text": "Given the titles of all courses, in order of titles and credits.", "sql": "SELECT title FROM course ORDER BY title ,  credits", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "given the titles of all courses in order of titles and credits", "sql_clean": "<start> select title from course order by title , credits <end>"}, {"text": "Find the name of all customers.", "sql": "SELECT customer_name FROM customers", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of all customers", "sql_clean": "<start> select customer_name from customers <end>"}, {"text": "What is the number of routes that end at John F Kennedy International Airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "what is the number of routes that end at john f kennedy international airport", "sql_clean": "<start> select count(*) from airports as t1 join routes as t2 on t1.apid = t2.dst_apid where t1.name = 'john f kennedy international airport' <end>"}, {"text": "Find name of the services that has never been used.", "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id", "db_id": "e_government", "schema": {"tables": [], "columns": []}, "text_clean": "find name of the services that has never been used", "sql_clean": "<start> select service_name from services except select t1.service_name from services as t1 join party_services as t2 on t1.service_id = t2.service_id <end>"}, {"text": "For every student who is registered for some course, how many courses are they registered for?", "sql": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "for every student who is registered for some course how many courses are they registered for", "sql_clean": "<start> select t1.student_id , count(*) from students as t1 join student_course_registrations as t2 on t1.student_id = t2.student_id group by t1.student_id <end>"}, {"text": "How many distinct students have been in detention?", "sql": "SELECT count(DISTINCT student_id) FROM Students_in_Detention", "db_id": "behavior_monitoring", "schema": {"tables": [], "columns": []}, "text_clean": "how many distinct students have been in detention", "sql_clean": "<start> select count(distinct student_id) from students_in_detention <end>"}, {"text": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the project for which a scientist whose name contains smith is assigned to", "sql_clean": "<start> select t2.name from assignedto as t1 join projects as t2 on t1.project = t2.code join scientists as t3 on t1.scientist = t3.ssn where t3.name like '%smith%' <end>"}, {"text": "What are the different names of the colleges involved in the tryout in alphabetical order?", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different names of the colleges involved in the tryout in alphabetical order", "sql_clean": "<start> select distinct cname from tryout order by cname <end>"}, {"text": "What are the names, checking balances, and savings balances for all customers?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names checking balances and savings balances for all customers", "sql_clean": "<start> select t2.balance , t3.balance , t1.name from accounts as t1 join checking as t2 on t1.custid = t2.custid join savings as t3 on t1.custid = t3.custid <end>"}, {"text": "List the names of courses in alphabetical order?", "sql": "SELECT course_name FROM courses ORDER BY course_name", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of courses in alphabetical order", "sql_clean": "<start> select course_name from courses order by course_name <end>"}, {"text": "What is the total amount of grant money given to each organization and what is its id?", "sql": "SELECT sum(grant_amount) ,  organisation_id FROM Grants GROUP BY organisation_id", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total amount of grant money given to each organization and what is its id", "sql_clean": "<start> select sum(grant_amount) , organisation_id from grants group by organisation_id <end>"}, {"text": "How many statements do we have?", "sql": "SELECT count(*) FROM Statements", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "how many statements do we have", "sql_clean": "<start> select count(*) from statements <end>"}, {"text": "Show the average, maximum, minimum enrollment of all schools.", "sql": "SELECT avg(enrollment) ,  max(enrollment) ,  min(enrollment) FROM school", "db_id": "school_finance", "schema": {"tables": [], "columns": []}, "text_clean": "show the average maximum minimum enrollment of all schools", "sql_clean": "<start> select avg(enrollment) , max(enrollment) , min(enrollment) from school <end>"}, {"text": "Return the name of the youngest captain.", "sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "return the name of the youngest captain", "sql_clean": "<start> select name from captain order by age limit 1 <end>"}, {"text": "How old is the average person for each job?", "sql": "SELECT avg(age) ,  job FROM Person GROUP BY job", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "how old is the average person for each job", "sql_clean": "<start> select avg(age) , job from person group by job <end>"}, {"text": "What is the total number of routes for each country and airline in that country?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total number of routes for each country and airline in that country", "sql_clean": "<start> select t1.country , t1.name , count(*) from airlines as t1 join routes as t2 on t1.alid = t2.alid group by t1.country , t1.name <end>"}, {"text": "Count the number of films.", "sql": "SELECT count(*) FROM film", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of films", "sql_clean": "<start> select count(*) from film <end>"}, {"text": "What are the official languages of the countries of players from Maryland or Duke college?", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "what are the official languages of the countries of players from maryland or duke college", "sql_clean": "<start> select t1.official_native_language from country as t1 join match_season as t2 on t1.country_id = t2.country where t2.college = maryland or t2.college = duke <end>"}, {"text": "How many characteristics are there?", "sql": "SELECT count(*) FROM CHARACTERISTICS", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "how many characteristics are there", "sql_clean": "<start> select count(*) from characteristics <end>"}, {"text": "Find the first names of all the authors who have written a paper with title containing the word \"Functional\".", "sql": "SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t3.title LIKE \"%Functional%\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first names of all the authors who have written a paper with title containing the word functional", "sql_clean": "<start> select t1.fname from authors as t1 join authorship as t2 on t1.authid = t2.authid join papers as t3 on t2.paperid = t3.paperid where t3.title like %functional% <end>"}, {"text": "Show names and phones of customers who do not have address information.", "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)", "db_id": "customers_and_products_contacts", "schema": {"tables": [], "columns": []}, "text_clean": "show names and phones of customers who do not have address information", "sql_clean": "<start> select customer_name , customer_phone from customers where customer_id not in (select customer_id from customer_address_history) <end>"}, {"text": "List the names of all courses ordered by their titles and credits.", "sql": "SELECT title FROM course ORDER BY title ,  credits", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of all courses ordered by their titles and credits", "sql_clean": "<start> select title from course order by title , credits <end>"}, {"text": "Find the number of students in total.", "sql": "SELECT count(*) FROM list", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of students in total", "sql_clean": "<start> select count(*) from list <end>"}, {"text": "What is the total amount of payment?", "sql": "SELECT sum(Amount_Payment) FROM Payments", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total amount of payment", "sql_clean": "<start> select sum(amount_payment) from payments <end>"}, {"text": "What are the addresses of the course authors who teach either \"operating system\" or \"data structure\" course.", "sql": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"operating system\" OR T2.course_name  =  \"data structure\"", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "what are the addresses of the course authors who teach either operating system or data structure course", "sql_clean": "<start> select t1.address_line_1 from course_authors_and_tutors as t1 join courses as t2 on t1.author_id = t2.author_id where t2.course_name = operating system or t2.course_name = data structure <end>"}, {"text": "Find the schools that were either founded after 1850 or public.", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "db_id": "university_basketball", "schema": {"tables": [], "columns": []}, "text_clean": "find the schools that were either founded after 1850 or public", "sql_clean": "<start> select school from university where founded > 1850 or affiliation = 'public' <end>"}, {"text": "What are the average ages for male and female students?", "sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the average ages for male and female students", "sql_clean": "<start> select avg(age) , sex from student group by sex <end>"}, {"text": "What place has the most flights coming from there?", "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what place has the most flights coming from there", "sql_clean": "<start> select origin from flight group by origin order by count(*) desc limit 1 <end>"}, {"text": "Return the total points of the gymnast with the lowest age.", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "db_id": "gymnast", "schema": {"tables": [], "columns": []}, "text_clean": "return the total points of the gymnast with the lowest age", "sql_clean": "<start> select t1.total_points from gymnast as t1 join people as t2 on t1.gymnast_id = t2.people_id order by t2.age asc limit 1 <end>"}, {"text": "Tell me the employee id of the head of the department with the least employees.", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "tell me the employee id of the head of the department with the least employees", "sql_clean": "<start> select head from department group by departmentid order by count(departmentid) limit 1; <end>"}, {"text": "What are the countries that participated in both friendly and tournament type competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "what are the countries that participated in both friendly and tournament type competitions", "sql_clean": "<start> select country from competition where competition_type = 'friendly' intersect select country from competition where competition_type = 'tournament' <end>"}, {"text": "What are dates of birth of all the guests whose gender is \"Male\"?", "sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "what are dates of birth of all the guests whose gender is male", "sql_clean": "<start> select date_of_birth from guests where gender_code = male <end>"}, {"text": "What are the names of all movies that received 3 or 4 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all movies that received 3 or 4 stars", "sql_clean": "<start> select t2.title from rating as t1 join movie as t2 on t1.mid = t2.mid where t1.stars = 3 intersect select t2.title from rating as t1 join movie as t2 on t1.mid = t2.mid where t1.stars = 4 <end>"}, {"text": "What are the names of people in ascending alphabetical order?", "sql": "SELECT Name FROM People ORDER BY Name ASC", "db_id": "gymnast", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of people in ascending alphabetical order", "sql_clean": "<start> select name from people order by name asc <end>"}, {"text": "Whare the names, friends, and ages of all people who are older than the average age of a person?", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "whare the names friends and ages of all people who are older than the average age of a person", "sql_clean": "<start> select distinct t2.name , t2.friend , t1.age from person as t1 join personfriend as t2 on t1.name = t2.friend where t1.age > (select avg(age) from person) <end>"}, {"text": "How many different players trained for more than 1000 hours?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "how many different players trained for more than 1000 hours", "sql_clean": "<start> select count(*) from player where hs > 1000 <end>"}, {"text": "Return the full names and salaries of employees with null commissions.", "sql": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "return the full names and salaries of employees with null commissions", "sql_clean": "<start> select first_name , last_name , salary from employees where commission_pct = null <end>"}, {"text": "List all player names who have an overall rating higher than the average.", "sql": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating  >  ( SELECT avg(overall_rating) FROM Player_Attributes )", "db_id": "soccer_1", "schema": {"tables": [], "columns": []}, "text_clean": "list all player names who have an overall rating higher than the average", "sql_clean": "<start> select distinct t1.player_name from player as t1 join player_attributes as t2 on t1.player_api_id = t2.player_api_id where t2.overall_rating > ( select avg(overall_rating) from player_attributes ) <end>"}, {"text": "Show the themes of parties and the names of the party hosts.", "sql": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID", "db_id": "party_host", "schema": {"tables": [], "columns": []}, "text_clean": "show the themes of parties and the names of the party hosts", "sql_clean": "<start> select t3.party_theme , t2.name from party_host as t1 join host as t2 on t1.host_id = t2.host_id join party as t3 on t1.party_id = t3.party_id <end>"}, {"text": "List all info about all people.", "sql": "SELECT * FROM people", "db_id": "candidate_poll", "schema": {"tables": [], "columns": []}, "text_clean": "list all info about all people", "sql_clean": "<start> select * from people <end>"}, {"text": "List all employees in the circulation history of the document with id 1. List the employee's name.", "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;", "db_id": "cre_Doc_Control_Systems", "schema": {"tables": [], "columns": []}, "text_clean": "list all employees in the circulation history of the document with id 1 list the employee s name", "sql_clean": "<start> select employees.employee_name from employees join circulation_history on circulation_history.employee_id = employees.employee_id where circulation_history.document_id = 1; <end>"}, {"text": "how many degrees were conferred between 1998 and 2002?", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "db_id": "csu_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many degrees were conferred between 1998 and 2002", "sql_clean": "<start> select t1.campus , sum(t2.degrees) from campuses as t1 join degrees as t2 on t1.id = t2.campus where t2.year >= 1998 and t2.year <= 2002 group by t1.campus <end>"}, {"text": "How many clubs does \"Linda Smith\" have membership for?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many clubs does linda smith have membership for", "sql_clean": "<start> select count(*) from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t3.fname = linda and t3.lname = smith <end>"}, {"text": "Return the names and locations of shops, ordered by name in alphabetical order.", "sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "return the names and locations of shops ordered by name in alphabetical order", "sql_clean": "<start> select shop_name , location from shop order by shop_name asc <end>"}, {"text": "What are the ids of the faculty members who do not advise any student.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of the faculty members who do not advise any student", "sql_clean": "<start> select facid from faculty except select advisor from student <end>"}, {"text": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?", "sql": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the full name hire date salary and department id for employees without the letter m in their first name", "sql_clean": "<start> select first_name , last_name , hire_date , salary , department_id from employees where first_name not like '%m%' <end>"}, {"text": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "give me all the phone numbers and email addresses of the workshop groups where services are performed", "sql_clean": "<start> select t1.store_phone , t1.store_email_address from drama_workshop_groups as t1 join services as t2 on t1.workshop_group_id = t2.workshop_group_id <end>"}, {"text": "list the name, job title of all people ordered by their names.", "sql": "SELECT name ,  job FROM Person ORDER BY name", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "list the name job title of all people ordered by their names", "sql_clean": "<start> select name , job from person order by name <end>"}, {"text": "What are the first names and office of the professors who are in the history department and have a Ph.D?", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first names and office of the professors who are in the history department and have a ph d", "sql_clean": "<start> select t1.emp_fname , t2.prof_office from employee as t1 join professor as t2 on t1.emp_num = t2.emp_num join department as t3 on t3.dept_code = t2.dept_code where t3.dept_name = 'history' and t2.prof_high_degree = 'ph.d.' <end>"}, {"text": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "what are the dates for the documents with both gv type and sf type expenses", "sql_clean": "<start> select t1.document_date from documents as t1 join documents_with_expenses as t2 on t1.document_id = t2.document_id where t2.budget_type_code = 'gv' intersect select t1.document_date from documents as t1 join documents_with_expenses as t2 on t1.document_id = t2.document_id where t2.budget_type_code = 'sf' <end>"}, {"text": "What is the year and semester with the most courses?", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the year and semester with the most courses", "sql_clean": "<start> select semester , year from section group by semester , year order by count(*) desc limit 1 <end>"}, {"text": "Find how many school locations have the word 'NY'.", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "db_id": "university_basketball", "schema": {"tables": [], "columns": []}, "text_clean": "find how many school locations have the word ny", "sql_clean": "<start> select count(*) from university where location like %ny% <end>"}, {"text": "What are the distinct Famous release dates?", "sql": "SELECT distinct(Famous_Release_date) FROM artist", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct famous release dates", "sql_clean": "<start> select distinct(famous_release_date) from artist <end>"}, {"text": "What are the countries for each market ordered by decreasing number of cities?", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "what are the countries for each market ordered by decreasing number of cities", "sql_clean": "<start> select country from market order by number_cities desc <end>"}, {"text": "Find the number of activities available.", "sql": "SELECT count(*) FROM Activity", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of activities available", "sql_clean": "<start> select count(*) from activity <end>"}, {"text": "What are the names of the schools with the top 3 largest class sizes?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the schools with the top 3 largest class sizes", "sql_clean": "<start> select cname from college order by enr desc limit 3 <end>"}, {"text": "Count the number of gymnasts.", "sql": "SELECT count(*) FROM gymnast", "db_id": "gymnast", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of gymnasts", "sql_clean": "<start> select count(*) from gymnast <end>"}, {"text": "Return the minimum, maximum, and average seating across all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "db_id": "race_track", "schema": {"tables": [], "columns": []}, "text_clean": "return the minimum maximum and average seating across all tracks", "sql_clean": "<start> select min(seating) , max(seating) , avg(seating) from track <end>"}, {"text": "What are the different customer ids, and how many cards does each one hold?", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different customer ids and how many cards does each one hold", "sql_clean": "<start> select customer_id , count(*) from customers_cards group by customer_id <end>"}, {"text": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?", "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "what is the date in location from and the date in location to for the document with name robin cv", "sql_clean": "<start> select t1.date_in_location_from , t1.date_in_locaton_to from document_locations as t1 join all_documents as t2 on t1.document_id = t2.document_id where t2.document_name = robin cv <end>"}, {"text": "Find the names of programs that are never broadcasted in the morning.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of programs that are never broadcasted in the morning", "sql_clean": "<start> select name from program except select t1.name from program as t1 join broadcast as t2 on t1.program_id = t2.program_id where t2.time_of_day = morning <end>"}, {"text": "In which buildings are there at least ten professors?", "sql": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "in which buildings are there at least ten professors", "sql_clean": "<start> select building from faculty where rank = professor group by building having count(*) >= 10 <end>"}, {"text": "What are the first and last names of all the candidates?", "sql": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last names of all the candidates", "sql_clean": "<start> select t2.first_name , t2.last_name from candidates as t1 join people as t2 on t1.candidate_id = t2.person_id <end>"}, {"text": "Count how many appointments have been made in total.", "sql": "SELECT count(*) FROM appointment", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "count how many appointments have been made in total", "sql_clean": "<start> select count(*) from appointment <end>"}, {"text": "Find the names of the top 3 departments that provide the largest amount of courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of the top 3 departments that provide the largest amount of courses", "sql_clean": "<start> select dept_name from course group by dept_name order by count(*) desc limit 3 <end>"}, {"text": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the distinct names of all wines that have prices higher than some wines from john anthony winery", "sql_clean": "<start> select distinct name from wine where price > (select min(price) from wine where winery = john anthony) <end>"}, {"text": "What are the resident details containing the substring 'Miss'?", "sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", "db_id": "local_govt_and_lot", "schema": {"tables": [], "columns": []}, "text_clean": "what are the resident details containing the substring miss", "sql_clean": "<start> select other_details from residents where other_details like '%miss%' <end>"}, {"text": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of all moviest hat have not been reviewed by britanny harris", "sql_clean": "<start> select mid from rating except select t1.mid from rating as t1 join reviewer as t2 on t1.rid = t2.rid where t2.name = brittany harris <end>"}, {"text": "Find the name and building of the department with the highest budget.", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and building of the department with the highest budget", "sql_clean": "<start> select dept_name , building from department order by budget desc limit 1 <end>"}, {"text": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?", "sql": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'", "db_id": "mountain_photos", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of photos taken with the lens brand sigma or olympus", "sql_clean": "<start> select t1.name from camera_lens as t1 join photos as t2 on t2.camera_lens_id = t1.id where t1.brand = 'sigma' or t1.brand = 'olympus' <end>"}, {"text": "Which orders have shipment after 2000-01-01? Give me the order ids.", "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "db_id": "tracking_orders", "schema": {"tables": [], "columns": []}, "text_clean": "which orders have shipment after 2000 01 01 give me the order ids", "sql_clean": "<start> select order_id from shipments where shipment_date > 2000-01-01 <end>"}, {"text": "What are the average prices of hotels grouped by their pet policy.", "sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "what are the average prices of hotels grouped by their pet policy", "sql_clean": "<start> select pets_allowed_yn , avg(price_range) from hotels group by pets_allowed_yn <end>"}, {"text": "What are the distinct names of nurses on call?", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct names of nurses on call", "sql_clean": "<start> select distinct t1.name from nurse as t1 join on_call as t2 on t1.employeeid = t2.nurse <end>"}, {"text": "Count the number of tracks that are part of the rock genre.", "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of tracks that are part of the rock genre", "sql_clean": "<start> select count(*) from genre as t1 join track as t2 on t1.genreid = t2.genreid where t1.name = rock <end>"}, {"text": "What are the employee ids for employees who have held two or more jobs?", "sql": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the employee ids for employees who have held two or more jobs", "sql_clean": "<start> select employee_id from job_history group by employee_id having count(*) >= 2 <end>"}, {"text": "What is the total horses record for each farm, sorted ascending?", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total horses record for each farm sorted ascending", "sql_clean": "<start> select total_horses from farm order by total_horses asc <end>"}, {"text": "Show the name and population of the country that has the highest roller coaster.", "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1", "db_id": "roller_coaster", "schema": {"tables": [], "columns": []}, "text_clean": "show the name and population of the country that has the highest roller coaster", "sql_clean": "<start> select t1.name , t1.population from country as t1 join roller_coaster as t2 on t1.country_id = t2.country_id order by t2.height desc limit 1 <end>"}, {"text": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first name and office of the professor who is in the history department and has a ph d degree", "sql_clean": "<start> select t1.emp_fname , t2.prof_office from employee as t1 join professor as t2 on t1.emp_num = t2.emp_num join department as t3 on t3.dept_code = t2.dept_code where t3.dept_name = 'history' and t2.prof_high_degree = 'ph.d.' <end>"}, {"text": "What are the apartment number, start date, and end date of each apartment booking?", "sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "what are the apartment number start date and end date of each apartment booking", "sql_clean": "<start> select t2.apt_number , t1.booking_start_date , t1.booking_start_date from apartment_bookings as t1 join apartments as t2 on t1.apt_id = t2.apt_id <end>"}, {"text": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of colleges that have two or more players listed in descending alphabetical order", "sql_clean": "<start> select college from match_season group by college having count(*) >= 2 order by college desc <end>"}, {"text": "Find the states where have some college students in tryout and their decisions are yes.", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the states where have some college students in tryout and their decisions are yes", "sql_clean": "<start> select distinct t1.state from college as t1 join tryout as t2 on t1.cname = t2.cname where t2.decision = 'yes' <end>"}, {"text": "What are the mission codes, fates, and names of the ships involved?", "sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID", "db_id": "ship_mission", "schema": {"tables": [], "columns": []}, "text_clean": "what are the mission codes fates and names of the ships involved", "sql_clean": "<start> select t1.code , t1.fate , t2.name from mission as t1 join ship as t2 on t1.ship_id = t2.ship_id <end>"}, {"text": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?", "sql": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot", "db_id": "soccer_1", "schema": {"tables": [], "columns": []}, "text_clean": "of all players with an overall rating greater than 80 how many are right footed and left footed", "sql_clean": "<start> select preferred_foot , count(*) from player_attributes where overall_rating > 80 group by preferred_foot <end>"}, {"text": "What are the different names for all songs that have a higher resolution than English songs?", "sql": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different names for all songs that have a higher resolution than english songs", "sql_clean": "<start> select distinct song_name from song where resolution > (select min(resolution) from song where languages = english) <end>"}, {"text": "What is the unit price of the tune \"Fast As a Shark\"?", "sql": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the unit price of the tune fast as a shark", "sql_clean": "<start> select unit_price from tracks where name = fast as a shark; <end>"}, {"text": "Find the number of routes operated by American Airlines.", "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of routes operated by american airlines", "sql_clean": "<start> select count(*) from airlines as t1 join routes as t2 on t1.alid = t2.alid where t1.name = 'american airlines' <end>"}, {"text": "Give the songs included in volumes that have more than 1 week on top.", "sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "give the songs included in volumes that have more than 1 week on top", "sql_clean": "<start> select song from volume where weeks_on_top > 1 <end>"}, {"text": "Find the cities corresponding to employees who help customers with the postal code 70174.", "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the cities corresponding to employees who help customers with the postal code 70174", "sql_clean": "<start> select t2.city from customer as t1 join employee as t2 on t1.supportrepid = t2.employeeid where t1.postalcode = 70174 <end>"}, {"text": "List the open date of open year of the shop named \"Apple\".", "sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "list the open date of open year of the shop named apple", "sql_clean": "<start> select open_date , open_year from shop where shop_name = apple <end>"}, {"text": "List each birth place along with the number of people from there.", "sql": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place", "db_id": "body_builder", "schema": {"tables": [], "columns": []}, "text_clean": "list each birth place along with the number of people from there", "sql_clean": "<start> select birth_place , count(*) from people group by birth_place <end>"}, {"text": "What are the average score and average staff number of all shops?", "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop", "db_id": "coffee_shop", "schema": {"tables": [], "columns": []}, "text_clean": "what are the average score and average staff number of all shops", "sql_clean": "<start> select avg(num_of_staff) , avg(score) from shop <end>"}, {"text": "How many total pounds were purchased in the year 2018 at all London branches?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "how many total pounds were purchased in the year 2018 at all london branches", "sql_clean": "<start> select sum(total_pounds) from purchase as t1 join branch as t2 on t1.branch_id = t2.branch_id where t2.city = 'london' and t1.year = 2018 <end>"}, {"text": "Find the login name of the course author that teaches the course with name \"advanced database\".", "sql": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "find the login name of the course author that teaches the course with name advanced database", "sql_clean": "<start> select t1.login_name from course_authors_and_tutors as t1 join courses as t2 on t1.author_id = t2.author_id where t2.course_name = advanced database <end>"}, {"text": "What is the complete description of the job of a researcher?", "sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what is the complete description of the job of a researcher", "sql_clean": "<start> select role_description from staff_roles where role_code = 'researcher' <end>"}, {"text": "What are the name of the players who received a card in descending order of the hours of training?", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the name of the players who received a card in descending order of the hours of training", "sql_clean": "<start> select pname from player where ycard = 'yes' order by hs desc <end>"}, {"text": "What is the name of the department with the most credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the department with the most credits", "sql_clean": "<start> select dept_name from course group by dept_name order by sum(credits) desc limit 1 <end>"}, {"text": "List the names and the locations that the enzymes can make an effect.", "sql": "SELECT name ,  LOCATION FROM enzyme", "db_id": "medicine_enzyme_interaction", "schema": {"tables": [], "columns": []}, "text_clean": "list the names and the locations that the enzymes can make an effect", "sql_clean": "<start> select name , location from enzyme <end>"}, {"text": "List the name of technicians whose team is not \"NYY\".", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\"", "db_id": "machine_repair", "schema": {"tables": [], "columns": []}, "text_clean": "list the name of technicians whose team is not nyy", "sql_clean": "<start> select name from technician where team != nyy <end>"}, {"text": "Return the names of musicals who have the nominee Bob Fosse.", "sql": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"", "db_id": "musical", "schema": {"tables": [], "columns": []}, "text_clean": "return the names of musicals who have the nominee bob fosse", "sql_clean": "<start> select name from musical where nominee = bob fosse <end>"}, {"text": "What is the position that is most common among players in match seasons?", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "what is the position that is most common among players in match seasons", "sql_clean": "<start> select position from match_season group by position order by count(*) desc limit 1 <end>"}, {"text": "List all the event names by year from the most recent to the oldest.", "sql": "SELECT name FROM event ORDER BY YEAR DESC", "db_id": "swimming", "schema": {"tables": [], "columns": []}, "text_clean": "list all the event names by year from the most recent to the oldest", "sql_clean": "<start> select name from event order by year desc <end>"}, {"text": "Find the names of the swimmers who have no record.", "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "db_id": "swimming", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of the swimmers who have no record", "sql_clean": "<start> select name from swimmer where id not in (select swimmer_id from record) <end>"}, {"text": "Find the name of dorms that do not have any amenity", "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of dorms that do not have any amenity", "sql_clean": "<start> select dorm_name from dorm where dormid not in (select dormid from has_amenity) <end>"}, {"text": "What are the different years for all competitions that are not of type equal to tournament?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different years for all competitions that are not of type equal to tournament", "sql_clean": "<start> select distinct year from competition where competition_type != tournament <end>"}, {"text": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of the tourist attractions that is either accessible by bus or at address 254 ottilie junction", "sql_clean": "<start> select t2.name from locations as t1 join tourist_attractions as t2 on t1.location_id = t2.location_id where t1.address = 254 ottilie junction or t2.how_to_get_there = bus <end>"}, {"text": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.", "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "which product s detail contains the word latte or americano return the full detail", "sql_clean": "<start> select product_details from products where product_details like %latte% or product_details like %americano% <end>"}, {"text": "How many book clubs are there?", "sql": "SELECT count(*) FROM book_club", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "how many book clubs are there", "sql_clean": "<start> select count(*) from book_club <end>"}, {"text": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the balance of the checking account belonging to an owner whose name contains ee", "sql_clean": "<start> select t2.balance from accounts as t1 join checking as t2 on t1.custid = t2.custid where t1.name like '%ee%' <end>"}, {"text": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.", "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "show the id the account name and other account details for all accounts by the customer with first name meaghan", "sql_clean": "<start> select t1.account_id , t1.date_account_opened , t1.account_name , t1.other_account_details from accounts as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.customer_first_name = 'meaghan' <end>"}, {"text": "Find out 5 customers who most recently purchased something. List customers' first and last name.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "find out 5 customers who most recently purchased something list customers first and last name", "sql_clean": "<start> select t1.first_name , t1.last_name from customers as t1 join invoices as t2 on t2.customer_id = t1.id order by t2.invoice_date desc limit 5; <end>"}, {"text": "List the names of people that are not employed by any company", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM employment)", "db_id": "company_employee", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of people that are not employed by any company", "sql_clean": "<start> select name from people where people_id not in (select people_id from employment) <end>"}, {"text": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and number of hours spent training for each player who trains for less than 1500 hours", "sql_clean": "<start> select pname , hs from player where hs < 1500 <end>"}, {"text": "Select the average price of each manufacturer's products, showing only the manufacturer's code.", "sql": "SELECT AVG(Price) ,  Manufacturer FROM Products GROUP BY Manufacturer", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "select the average price of each manufacturer s products showing only the manufacturer s code", "sql_clean": "<start> select avg(price) , manufacturer from products group by manufacturer <end>"}, {"text": "What are the student ids for all male students?", "sql": "SELECT StuID FROM Student WHERE Sex  =  'M'", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the student ids for all male students", "sql_clean": "<start> select stuid from student where sex = 'm' <end>"}, {"text": "List the writers who have written more than one book.", "sql": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*)  >  1", "db_id": "book_2", "schema": {"tables": [], "columns": []}, "text_clean": "list the writers who have written more than one book", "sql_clean": "<start> select writer from book group by writer having count(*) > 1 <end>"}, {"text": "Which course is enrolled in by the most students? Give me the course name.", "sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "which course is enrolled in by the most students give me the course name", "sql_clean": "<start> select t1.course_name from courses as t1 join student_course_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_name order by count(*) desc limit 1 <end>"}, {"text": "What is the average price of products with manufacturer codes equal to 2?", "sql": "SELECT avg(price) FROM products WHERE Manufacturer  =  2", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average price of products with manufacturer codes equal to 2", "sql_clean": "<start> select avg(price) from products where manufacturer = 2 <end>"}, {"text": "What are full names and salaries of employees working in the city of London?", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are full names and salaries of employees working in the city of london", "sql_clean": "<start> select first_name , last_name , salary from employees as t1 join departments as t2 on t1.department_id = t2.department_id join locations as t3 on t2.location_id = t3.location_id where t3.city = 'london' <end>"}, {"text": "Show names of shops that have more than one kind of device in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "show names of shops that have more than one kind of device in stock", "sql_clean": "<start> select t2.shop_name from stock as t1 join shop as t2 on t1.shop_id = t2.shop_id group by t1.shop_id having count(*) > 1 <end>"}, {"text": "What is the total number of professors with a Ph.D. ?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total number of professors with a ph d", "sql_clean": "<start> select count(*) from professor where prof_high_degree = 'ph.d.' <end>"}, {"text": "What are the names of customers with accounts, and how many checking accounts do each of them have?", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of customers with accounts and how many checking accounts do each of them have", "sql_clean": "<start> select count(*) , t1.name from accounts as t1 join checking as t2 on t1.custid = t2.custid group by t1.name <end>"}, {"text": "Which directors had a movie both in the year 1999 and 2000?", "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "which directors had a movie both in the year 1999 and 2000", "sql_clean": "<start> select director from movie where year = 2000 intersect select director from movie where year = 1999 <end>"}, {"text": "Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described", "sql": "SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id  =  T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id  =  T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type  =  T4.organisation_type WHERE T2.grant_amount  >  5000 AND T4.organisation_type_description  =  'Research'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described", "sql_clean": "<start> select t1.sent_date from documents as t1 join grants as t2 on t1.grant_id = t2.grant_id join organisations as t3 on t2.organisation_id = t3.organisation_id join organisation_types as t4 on t3.organisation_type = t4.organisation_type where t2.grant_amount > 5000 and t4.organisation_type_description = 'research' <end>"}, {"text": "What are all the distinct asset models?", "sql": "SELECT DISTINCT asset_model FROM Assets", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "what are all the distinct asset models", "sql_clean": "<start> select distinct asset_model from assets <end>"}, {"text": "What are the rooms for members of the faculty who are professors and who live in building NEB?", "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what are the rooms for members of the faculty who are professors and who live in building neb", "sql_clean": "<start> select room from faculty where rank = professor and building = neb <end>"}, {"text": "Find the last name of the author with first name \"Amal\".", "sql": "SELECT lname FROM authors WHERE fname  =  \"Amal\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the last name of the author with first name amal", "sql_clean": "<start> select lname from authors where fname = amal <end>"}, {"text": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?", "sql": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the different artists that have produced a song in english but have never receieved a rating higher than 8", "sql_clean": "<start> select distinct artist_name from song where languages = english except select distinct artist_name from song where rating > 8 <end>"}, {"text": "List the names of counties in descending order of population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "db_id": "county_public_safety", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of counties in descending order of population", "sql_clean": "<start> select name from county_public_safety order by population desc <end>"}, {"text": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?", "sql": "SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id WHERE T2.sent_date  <  '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date  >  '1989-03-16 18:27:16'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct grant amount for the grants where the documents were sent before 1986 08 26 20 49 27 and grant were ended after 1989 03 16 18 27 16", "sql_clean": "<start> select t1.grant_amount from grants as t1 join documents as t2 on t1.grant_id = t2.grant_id where t2.sent_date < '1986-08-26 20:49:27' intersect select grant_amount from grants where grant_end_date > '1989-03-16 18:27:16' <end>"}, {"text": "Return the names of songs for which format is mp3 and resolution is below 1000.", "sql": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "return the names of songs for which format is mp3 and resolution is below 1000", "sql_clean": "<start> select t2.song_name from files as t1 join song as t2 on t1.f_id = t2.f_id where t1.formats = mp3 intersect select song_name from song where resolution < 1000 <end>"}, {"text": "Return the name and country corresponding to the artist who has had the most exhibitions.", "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "return the name and country corresponding to the artist who has had the most exhibitions", "sql_clean": "<start> select t2.name , t2.country from exhibition as t1 join artist as t2 on t1.artist_id = t2.artist_id group by t1.artist_id order by count(*) desc limit 1 <end>"}, {"text": "List the name of a building along with the name of a company whose office is in the building.", "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id", "db_id": "company_office", "schema": {"tables": [], "columns": []}, "text_clean": "list the name of a building along with the name of a company whose office is in the building", "sql_clean": "<start> select t3.name , t2.name from office_locations as t1 join buildings as t2 on t1.building_id = t2.id join companies as t3 on t1.company_id = t3.id <end>"}, {"text": "Find the number of voting records in total.", "sql": "SELECT count(*) FROM VOTING_RECORD", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of voting records in total", "sql_clean": "<start> select count(*) from voting_record <end>"}, {"text": "Find the name of companies that do not make DVD drive.", "sql": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of companies that do not make dvd drive", "sql_clean": "<start> select name from manufacturers except select t2.name from products as t1 join manufacturers as t2 on t1.manufacturer = t2.code where t1.name = 'dvd drive' <end>"}, {"text": "How many services are there?", "sql": "SELECT count(*) FROM services", "db_id": "e_government", "schema": {"tables": [], "columns": []}, "text_clean": "how many services are there", "sql_clean": "<start> select count(*) from services <end>"}, {"text": "What are the official names of cities, ordered descending by population?", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "what are the official names of cities ordered descending by population", "sql_clean": "<start> select official_name from city order by population desc <end>"}, {"text": "Return the different classes of races.", "sql": "SELECT DISTINCT CLASS FROM race", "db_id": "race_track", "schema": {"tables": [], "columns": []}, "text_clean": "return the different classes of races", "sql_clean": "<start> select distinct class from race <end>"}, {"text": "How many medicines were not approved by the FDA?", "sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "db_id": "medicine_enzyme_interaction", "schema": {"tables": [], "columns": []}, "text_clean": "how many medicines were not approved by the fda", "sql_clean": "<start> select count(*) from medicine where fda_approved = 'no' <end>"}, {"text": "What is the product description of the product booked with an amount of 102.76?", "sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76", "db_id": "products_for_hire", "schema": {"tables": [], "columns": []}, "text_clean": "what is the product description of the product booked with an amount of 102 76", "sql_clean": "<start> select t2.product_description from products_booked as t1 join products_for_hire as t2 on t1.product_id = t2.product_id where t1.booked_amount = 102.76 <end>"}, {"text": "What are the top 5 countries by number of invoices and how many do they have?", "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the top 5 countries by number of invoices and how many do they have", "sql_clean": "<start> select billing_country , count(*) from invoices group by billing_country order by count(*) desc limit 5; <end>"}, {"text": "Find the papers which have \"Olin Shivers\" as an author.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Olin\" AND t1.lname  =  \"Shivers\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the papers which have olin shivers as an author", "sql_clean": "<start> select t3.title from authors as t1 join authorship as t2 on t1.authid = t2.authid join papers as t3 on t2.paperid = t3.paperid where t1.fname = olin and t1.lname = shivers <end>"}, {"text": "Show the positions of the players from the team with name \"Ryley Goldner\".", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "show the positions of the players from the team with name ryley goldner", "sql_clean": "<start> select t1.position from match_season as t1 join team as t2 on t1.team = t2.team_id where t2.name = ryley goldner <end>"}, {"text": "Show the invoice number and the number of transactions for each invoice.", "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "show the invoice number and the number of transactions for each invoice", "sql_clean": "<start> select invoice_number , count(*) from financial_transactions group by invoice_number <end>"}, {"text": "How many credits does course CIS-220 have, and what its description?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many credits does course cis 220 have and what its description", "sql_clean": "<start> select crs_credit , crs_description from course where crs_code = 'cis-220' <end>"}, {"text": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.", "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people", "sql_clean": "<start> select roomname , roomid from rooms where baseprice > 160 and maxoccupancy > 2; <end>"}, {"text": "Give the name of the wine with the highest score.", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "give the name of the wine with the highest score", "sql_clean": "<start> select name from wine order by score limit 1 <end>"}, {"text": "Find the first names of students studying in room 108.", "sql": "SELECT firstname FROM list WHERE classroom  =  108", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first names of students studying in room 108", "sql_clean": "<start> select firstname from list where classroom = 108 <end>"}, {"text": "What is the name of the most recent movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the most recent movie", "sql_clean": "<start> select title from movie where year = (select max(year) from movie) <end>"}, {"text": "Find the county where produces the most number of wines with score higher than 90.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the county where produces the most number of wines with score higher than 90", "sql_clean": "<start> select t1.county from appellations as t1 join wine as t2 on t1.appelation = t2.appelation where t2.score > 90 group by t1.county order by count(*) desc limit 1 <end>"}, {"text": "Count the number of farms.", "sql": "SELECT count(*) FROM farm", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of farms", "sql_clean": "<start> select count(*) from farm <end>"}, {"text": "What are the names of the courses in alphabetical order?", "sql": "SELECT course_name FROM courses ORDER BY course_name", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the courses in alphabetical order", "sql_clean": "<start> select course_name from courses order by course_name <end>"}, {"text": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.", "sql": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "list all the scientists names their projects names and the hours worked by that scientist on each project in alphabetical order of project name and then scientist name", "sql_clean": "<start> select t1.name , t3.name , t3.hours from scientists as t1 join assignedto as t2 on t1.ssn = t2.scientist join projects as t3 on t2.project = t3.code order by t3.name , t1.name <end>"}, {"text": "List the project details of the projects with the research outcome described with the substring 'Published'.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code  =  T3.outcome_code WHERE T3.outcome_description LIKE '%Published%'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "list the project details of the projects with the research outcome described with the substring published", "sql_clean": "<start> select t1.project_details from projects as t1 join project_outcomes as t2 on t1.project_id = t2.project_id join research_outcomes as t3 on t2.outcome_code = t3.outcome_code where t3.outcome_description like '%published%' <end>"}, {"text": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'", "db_id": "protein_institute", "schema": {"tables": [], "columns": []}, "text_clean": "how many proteins are associated with an institution founded after 1880 or an institution with type private", "sql_clean": "<start> select count(*) from institution as t1 join protein as t2 on t1.institution_id = t2.institution_id where t1.founded > 1880 or t1.type = 'private' <end>"}, {"text": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "for each zip code find the ids of all trips that have a higher average mean temperature above 60", "sql_clean": "<start> select t1.id from trip as t1 join weather as t2 on t1.zip_code = t2.zip_code group by t2.zip_code having avg(t2.mean_temperature_f) > 60 <end>"}, {"text": "List all cities of addresses in alphabetical order.", "sql": "SELECT city FROM Addresses ORDER BY city", "db_id": "behavior_monitoring", "schema": {"tables": [], "columns": []}, "text_clean": "list all cities of addresses in alphabetical order", "sql_clean": "<start> select city from addresses order by city <end>"}, {"text": "Find the titles of all movies not reviewed by Chris Jackson.", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the titles of all movies not reviewed by chris jackson", "sql_clean": "<start> select distinct title from movie except select t2.title from rating as t1 join movie as t2 on t1.mid = t2.mid join reviewer as t3 on t1.rid = t3.rid where t3.name = 'chris jackson' <end>"}, {"text": "For each building, show the name of the building and the number of institutions in it.", "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id", "db_id": "protein_institute", "schema": {"tables": [], "columns": []}, "text_clean": "for each building show the name of the building and the number of institutions in it", "sql_clean": "<start> select t1.name , count(*) from building as t1 join institution as t2 on t1.building_id = t2.building_id group by t1.building_id <end>"}, {"text": "What are the names of products with 'white' as their color description?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of products with white as their color description", "sql_clean": "<start> select t1.product_name from products as t1 join ref_colors as t2 on t1.color_code = t2.color_code where t2.color_description = white <end>"}, {"text": "What is the level name of the cheapest catalog (in USD)?", "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "what is the level name of the cheapest catalog in usd", "sql_clean": "<start> select t2.catalog_level_name from catalog_contents as t1 join catalog_structure as t2 on t1.catalog_level_number = t2.catalog_level_number order by t1.price_in_dollars limit 1 <end>"}, {"text": "How many drivers are there?", "sql": "SELECT count(*) FROM driver", "db_id": "school_bus", "schema": {"tables": [], "columns": []}, "text_clean": "how many drivers are there", "sql_clean": "<start> select count(*) from driver <end>"}, {"text": "What are the names of scientists who are assigned to any project?", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of scientists who are assigned to any project", "sql_clean": "<start> select t2.name from assignedto as t1 join scientists as t2 on t1.scientist = t2.ssn <end>"}, {"text": "What are the average, maximum and total revenues of all companies?", "sql": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the average maximum and total revenues of all companies", "sql_clean": "<start> select avg(revenue) , max(revenue) , sum(revenue) from manufacturers <end>"}, {"text": "List the name of the company that produced more than one phone model.", "sql": "SELECT Company_name FROM phone GROUP BY Company_name HAVING count(*)  >  1;", "db_id": "phone_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the name of the company that produced more than one phone model", "sql_clean": "<start> select company_name from phone group by company_name having count(*) > 1; <end>"}, {"text": "What are the average and minimum price (in Euro) of all products?", "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "what are the average and minimum price in euro of all products", "sql_clean": "<start> select avg(price_in_euros) , min(price_in_euros) from catalog_contents <end>"}, {"text": "Show the locations that have at least two performances.", "sql": "SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*)  >=  2", "db_id": "performance_attendance", "schema": {"tables": [], "columns": []}, "text_clean": "show the locations that have at least two performances", "sql_clean": "<start> select location from performance group by location having count(*) >= 2 <end>"}, {"text": "Show names for all employees who have certificate of Boeing 737-800.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "show names for all employees who have certificate of boeing 737 800", "sql_clean": "<start> select t1.name from employee as t1 join certificate as t2 on t1.eid = t2.eid join aircraft as t3 on t3.aid = t2.aid where t3.name = boeing 737-800 <end>"}, {"text": "Show all school names in alphabetical order.", "sql": "SELECT school_name FROM school ORDER BY school_name", "db_id": "school_finance", "schema": {"tables": [], "columns": []}, "text_clean": "show all school names in alphabetical order", "sql_clean": "<start> select school_name from school order by school_name <end>"}, {"text": "Which vocal type has the band mate with first name \"Marianne\" played the most?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id WHERE firstname  =  \"Marianne\" GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "which vocal type has the band mate with first name marianne played the most", "sql_clean": "<start> select type from vocals as t1 join band as t2 on t1.bandmate = t2.id where firstname = marianne group by type order by count(*) desc limit 1 <end>"}, {"text": "List the most common type of artworks.", "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "entertainment_awards", "schema": {"tables": [], "columns": []}, "text_clean": "list the most common type of artworks", "sql_clean": "<start> select type from artwork group by type order by count(*) desc limit 1 <end>"}, {"text": "What are the department ids for which more than 10 employees had a commission?", "sql": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the department ids for which more than 10 employees had a commission", "sql_clean": "<start> select department_id from employees group by department_id having count(commission_pct) > 10 <end>"}, {"text": "What are the full names of students minoring in department 140?", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what are the full names of students minoring in department 140", "sql_clean": "<start> select t2.fname , t2.lname from minor_in as t1 join student as t2 on t1.stuid = t2.stuid where t1.dno = 140 <end>"}, {"text": "How many different services are provided by all stations?", "sql": "SELECT count(DISTINCT services) FROM station", "db_id": "station_weather", "schema": {"tables": [], "columns": []}, "text_clean": "how many different services are provided by all stations", "sql_clean": "<start> select count(distinct services) from station <end>"}, {"text": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the instructors in the comp sci department who earn more than 80000", "sql_clean": "<start> select name from instructor where dept_name = 'comp. sci.' and salary > 80000 <end>"}, {"text": "Show all allergies with type food.", "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "show all allergies with type food", "sql_clean": "<start> select distinct allergy from allergy_type where allergytype = food <end>"}, {"text": "What are the names of wrestlers days held less than 100?", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of wrestlers days held less than 100", "sql_clean": "<start> select name from wrestler where days_held < 100 <end>"}, {"text": "What are the names of scientists who are not working on the project with the most hours?", "sql": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of scientists who are not working on the project with the most hours", "sql_clean": "<start> select name from scientists except select t3.name from assignedto as t1 join projects as t2 on t1.project = t2.code join scientists as t3 on t1.scientist = t3.ssn where t2.hours = (select max(hours) from projects) <end>"}, {"text": "What is the first and last name of the oldest employee?", "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the first and last name of the oldest employee", "sql_clean": "<start> select emp_fname , emp_lname from employee order by emp_dob limit 1 <end>"}, {"text": "What is the list of program origins ordered alphabetically?", "sql": "SELECT origin FROM program ORDER BY origin", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "what is the list of program origins ordered alphabetically", "sql_clean": "<start> select origin from program order by origin <end>"}, {"text": "How many rooms in each building have a capacity of over 50?", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "how many rooms in each building have a capacity of over 50", "sql_clean": "<start> select count(*) , building from classroom where capacity > 50 group by building <end>"}, {"text": "Find the number of patients' prescriptions physician John Dorian made.", "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of patients prescriptions physician john dorian made", "sql_clean": "<start> select count(t1.ssn) from patient as t1 join prescribes as t2 on t1.ssn = t2.patient join physician as t3 on t2.physician = t3.employeeid where t3.name = john dorian <end>"}, {"text": "What is the year in which most ships were built?", "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the year in which most ships were built", "sql_clean": "<start> select built_year from ship group by built_year order by count(*) desc limit 1 <end>"}, {"text": "Give the title of the prerequisite to the course International Finance.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "give the title of the prerequisite to the course international finance", "sql_clean": "<start> select title from course where course_id in (select t1.prereq_id from prereq as t1 join course as t2 on t1.course_id = t2.course_id where t2.title = 'international finance') <end>"}, {"text": "Find the names of customers who either have an deputy policy or uniformed policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of customers who either have an deputy policy or uniformed policy", "sql_clean": "<start> select distinct t2.customer_details from policies as t1 join customers as t2 on t1.customer_id = t2.customer_id where t1.policy_type_code = deputy or t1.policy_type_code = uniform <end>"}, {"text": "What are the maximum price and score of wines in each year?", "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum price and score of wines in each year", "sql_clean": "<start> select max(price) , max(score) , year from wine group by year <end>"}, {"text": "How many tourists did not make any visit?", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "how many tourists did not make any visit", "sql_clean": "<start> select count(*) from visitors where tourist_id not in ( select tourist_id from visits ) <end>"}, {"text": "How many airlines are there?", "sql": "SELECT count(*) FROM airlines", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "how many airlines are there", "sql_clean": "<start> select count(*) from airlines <end>"}, {"text": "Which customer made the most orders? Find the customer name.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "db_id": "tracking_orders", "schema": {"tables": [], "columns": []}, "text_clean": "which customer made the most orders find the customer name", "sql_clean": "<start> select t1.customer_name from customers as t1 join orders as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by count(*) desc limit 1 <end>"}, {"text": "List the studios of each film and the number of films produced by that studio.", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "list the studios of each film and the number of films produced by that studio", "sql_clean": "<start> select studio , count(*) from film group by studio <end>"}, {"text": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first names and degree of all professors who are teaching some class in computer info systems department", "sql_clean": "<start> select distinct t2.emp_fname , t3.prof_high_degree from class as t1 join employee as t2 on t1.prof_num = t2.emp_num join professor as t3 on t2.emp_num = t3.emp_num join department as t4 on t4.dept_code = t3.dept_code where t4.dept_name = 'computer info. systems' <end>"}, {"text": "How many kids stay in the rooms reserved by ROY SWEAZY?", "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many kids stay in the rooms reserved by roy sweazy", "sql_clean": "<start> select kids from reservations where firstname = roy and lastname = sweazy; <end>"}, {"text": "Find the name of the customer who made the order of the largest amount of goods.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the customer who made the order of the largest amount of goods", "sql_clean": "<start> select t1.customer_name from customers as t1 join customer_orders as t2 on t1.customer_id = t2.customer_id join order_items as t3 on t2.order_id = t3.order_id where t3.order_quantity = ( select max(order_quantity) from order_items) <end>"}, {"text": "What are the first names of all students in Smith Hall?", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first names of all students in smith hall", "sql_clean": "<start> select t1.fname from student as t1 join lives_in as t2 on t1.stuid = t2.stuid join dorm as t3 on t3.dormid = t2.dormid where t3.dorm_name = 'smith hall' <end>"}, {"text": "Find distinct cities of address of students?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "find distinct cities of address of students", "sql_clean": "<start> select distinct t1.city from addresses as t1 join people_addresses as t2 on t1.address_id = t2.address_id join students as t3 on t2.person_id = t3.student_id <end>"}, {"text": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "give the maximum and minimum product prices for each product type grouped and ordered by product type", "sql_clean": "<start> select max(product_price) , min(product_price) , product_type_code from products group by product_type_code order by product_type_code <end>"}, {"text": "What is the email and phone number of Astrid Gruber the customer?", "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the email and phone number of astrid gruber the customer", "sql_clean": "<start> select email , phone from customers where first_name = astrid and last_name = gruber; <end>"}, {"text": "What are the amenities in alphabetical order that Anonymous Donor Hall has?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the amenities in alphabetical order that anonymous donor hall has", "sql_clean": "<start> select t1.amenity_name from dorm_amenity as t1 join has_amenity as t2 on t2.amenid = t1.amenid join dorm as t3 on t2.dormid = t3.dormid where t3.dorm_name = 'anonymous donor hall' order by t1.amenity_name <end>"}, {"text": "What are the names and average prices of products for manufacturers whose products cost on average 150 or more?", "sql": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and average prices of products for manufacturers whose products cost on average 150 or more", "sql_clean": "<start> select avg(t1.price) , t2.name from products as t1 join manufacturers as t2 on t1.manufacturer = t2.code group by t2.name having avg(t1.price) >= 150 <end>"}, {"text": "List the name of all products along with the number of complaints that they have received.", "sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "db_id": "customer_complaints", "schema": {"tables": [], "columns": []}, "text_clean": "list the name of all products along with the number of complaints that they have received", "sql_clean": "<start> select t1.product_name , count(*) from products as t1 join complaints as t2 on t1.product_id = t2.product_id group by t1.product_name <end>"}, {"text": "Show the product name and total order quantity for each product.", "sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id", "db_id": "customers_and_products_contacts", "schema": {"tables": [], "columns": []}, "text_clean": "show the product name and total order quantity for each product", "sql_clean": "<start> select t1.product_name , sum(t2.order_quantity) from products as t1 join order_items as t2 on t1.product_id = t2.product_id group by t1.product_id <end>"}, {"text": "how many different positions are there?", "sql": "SELECT count(DISTINCT POSITION) FROM player", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "how many different positions are there", "sql_clean": "<start> select count(distinct position) from player <end>"}, {"text": "What are the student ids for students over 20 years old?", "sql": "SELECT StuID FROM Student WHERE age  >  20", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the student ids for students over 20 years old", "sql_clean": "<start> select stuid from student where age > 20 <end>"}, {"text": "What is the first name of the staff who did not give any lesson?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what is the first name of the staff who did not give any lesson", "sql_clean": "<start> select first_name from staff except select t2.first_name from lessons as t1 join staff as t2 on t1.staff_id = t2.staff_id <end>"}, {"text": "which poll source does the highest oppose rate come from?", "sql": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1", "db_id": "candidate_poll", "schema": {"tables": [], "columns": []}, "text_clean": "which poll source does the highest oppose rate come from", "sql_clean": "<start> select poll_source from candidate order by oppose_rate desc limit 1 <end>"}, {"text": "Find the names of all the employees whose the role name is \"Editor\".", "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of all the employees whose the role name is editor", "sql_clean": "<start> select t1.employee_name from employees as t1 join roles as t2 on t1.role_code = t2.role_code where t2.role_name = editor <end>"}, {"text": "What is the average GPA of students taking ACCT-211?", "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average gpa of students taking acct 211", "sql_clean": "<start> select avg(t2.stu_gpa) from enroll as t1 join student as t2 on t1.stu_num = t2.stu_num join class as t3 on t1.class_code = t3.class_code where t3.crs_code = 'acct-211' <end>"}, {"text": "Count the number of schools.", "sql": "SELECT count(*) FROM school", "db_id": "school_player", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of schools", "sql_clean": "<start> select count(*) from school <end>"}, {"text": "What are the names and arrival times of trains?", "sql": "SELECT Name ,  Arrival FROM train", "db_id": "railway", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and arrival times of trains", "sql_clean": "<start> select name , arrival from train <end>"}, {"text": "Which part has the least chargeable amount? List the part id and amount.", "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "which part has the least chargeable amount list the part id and amount", "sql_clean": "<start> select part_id , chargeable_amount from parts order by chargeable_amount asc limit 1 <end>"}, {"text": "Show the denomination of the school that has the most players.", "sql": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "school_player", "schema": {"tables": [], "columns": []}, "text_clean": "show the denomination of the school that has the most players", "sql_clean": "<start> select t2.denomination from player as t1 join school as t2 on t1.school_id = t2.school_id group by t1.school_id order by count(*) desc limit 1 <end>"}, {"text": "How many customers are living in city \"Lake Geovannyton\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "how many customers are living in city lake geovannyton", "sql_clean": "<start> select count(*) from customers as t1 join customer_addresses as t2 on t1.customer_id = t2.customer_id join addresses as t3 on t2.address_id = t3.address_id where t3.city = lake geovannyton <end>"}, {"text": "What are the ids of all reviewers who have not given 4 stars at least once?", "sql": "SELECT rID FROM Rating WHERE stars != 4", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of all reviewers who have not given 4 stars at least once", "sql_clean": "<start> select rid from rating where stars != 4 <end>"}, {"text": "What are the last names of faculty in building Barton, sorted by last name?", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what are the last names of faculty in building barton sorted by last name", "sql_clean": "<start> select lname from faculty where building = barton order by lname <end>"}, {"text": "List the id, country, city and name of the airports ordered alphabetically by the name.", "sql": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name", "db_id": "flight_company", "schema": {"tables": [], "columns": []}, "text_clean": "list the id country city and name of the airports ordered alphabetically by the name", "sql_clean": "<start> select id , country , city , name from airport order by name <end>"}, {"text": "Show the student id of the oldest student.", "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "show the student id of the oldest student", "sql_clean": "<start> select stuid from student where age = (select max(age) from student) <end>"}, {"text": "For each college, return the college name and the count of authors with submissions from that college.", "sql": "SELECT College ,  COUNT(*) FROM submission GROUP BY College", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "for each college return the college name and the count of authors with submissions from that college", "sql_clean": "<start> select college , count(*) from submission group by college <end>"}, {"text": "What is Nancy Edwards's address?", "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is nancy edwards s address", "sql_clean": "<start> select address from employees where first_name = nancy and last_name = edwards; <end>"}, {"text": "What are the names of cities that are in counties that have a crime rate below 100?", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "db_id": "county_public_safety", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of cities that are in counties that have a crime rate below 100", "sql_clean": "<start> select name from city where county_id in (select county_id from county_public_safety where crime_rate < 100) <end>"}, {"text": "Show all official native languages that contain the word \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "show all official native languages that contain the word english", "sql_clean": "<start> select official_native_language from country where official_native_language like %english% <end>"}, {"text": "What are the names and salaries of instructors who advise students in the Math department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and salaries of instructors who advise students in the math department", "sql_clean": "<start> select t2.name , t2.salary from advisor as t1 join instructor as t2 on t1.i_id = t2.id join student as t3 on t1.s_id = t3.id where t3.dept_name = 'math' <end>"}, {"text": "What are the descriptions of all the project outcomes?", "sql": "SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code  =  T2.outcome_code", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what are the descriptions of all the project outcomes", "sql_clean": "<start> select t1.outcome_description from research_outcomes as t1 join project_outcomes as t2 on t1.outcome_code = t2.outcome_code <end>"}, {"text": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "which attribute definitions have attribute value 0 give me the attribute name and attribute id", "sql_clean": "<start> select t1.attribute_name , t1.attribute_id from attribute_definitions as t1 join catalog_contents_additional_attributes as t2 on t1.attribute_id = t2.attribute_id where t2.attribute_value = 0 <end>"}, {"text": "Show the institution type with the largest number of institutions.", "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "db_id": "protein_institute", "schema": {"tables": [], "columns": []}, "text_clean": "show the institution type with the largest number of institutions", "sql_clean": "<start> select type from institution group by type order by count(*) desc limit 1 <end>"}, {"text": "What is the name of the customer who has greatest total loan amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the customer who has greatest total loan amount", "sql_clean": "<start> select t1.cust_name from customer as t1 join loan as t2 on t1.cust_id = t2.cust_id group by t1.cust_name order by sum(t2.amount) desc limit 1 <end>"}, {"text": "What is the budget type code with most number of documents.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "what is the budget type code with most number of documents", "sql_clean": "<start> select budget_type_code from documents_with_expenses group by budget_type_code order by count(*) desc limit 1 <end>"}, {"text": "Return the themes of farm competitions, sorted by year ascending.", "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "return the themes of farm competitions sorted by year ascending", "sql_clean": "<start> select theme from farm_competition order by year asc <end>"}, {"text": "What are the numbers of races for each constructor id?", "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the numbers of races for each constructor id", "sql_clean": "<start> select count(*) , constructorid from constructorstandings group by constructorid <end>"}, {"text": "Find the type code of the most frequently used policy.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "find the type code of the most frequently used policy", "sql_clean": "<start> select policy_type_code from policies group by policy_type_code order by count(*) desc limit 1 <end>"}, {"text": "What are the different region names, ordered by labels?", "sql": "SELECT DISTINCT region_name FROM region ORDER BY Label", "db_id": "party_people", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different region names ordered by labels", "sql_clean": "<start> select distinct region_name from region order by label <end>"}, {"text": "Who made the latest order?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "who made the latest order", "sql_clean": "<start> select t1.customer_name from customers as t1 join customer_orders as t2 on t1.customer_id = t2.customer_id order by t2.order_date desc limit 1 <end>"}, {"text": "What are the names of all the dorms that don't have any amenities?", "sql": "SELECT dorm_name FROM dorm WHERE dormid NOT IN (SELECT dormid FROM has_amenity)", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all the dorms that don t have any amenities", "sql_clean": "<start> select dorm_name from dorm where dormid not in (select dormid from has_amenity) <end>"}, {"text": "How many fault status codes are recorded in the fault log parts table?", "sql": "SELECT DISTINCT fault_status FROM Fault_Log_Parts", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "how many fault status codes are recorded in the fault log parts table", "sql_clean": "<start> select distinct fault_status from fault_log_parts <end>"}, {"text": "Find the total capacity of all dorms.", "sql": "SELECT sum(student_capacity) FROM dorm", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the total capacity of all dorms", "sql_clean": "<start> select sum(student_capacity) from dorm <end>"}, {"text": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "db_id": "game_injury", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids scores and dates of the games which caused at least two injury accidents", "sql_clean": "<start> select t1.id , t1.score , t1.date from game as t1 join injury_accident as t2 on t2.game_id = t1.id group by t1.id having count(*) >= 2 <end>"}, {"text": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n", "sql": "SELECT T2.cmi_cross_ref_id ,  T2.master_customer_id ,  count(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id", "db_id": "local_govt_mdm", "schema": {"tables": [], "columns": []}, "text_clean": "how many business rates are related to each cmi cross reference list cross reference id master customer id and the n", "sql_clean": "<start> select t2.cmi_cross_ref_id , t2.master_customer_id , count(*) from business_rates as t1 join cmi_cross_references as t2 on t1.cmi_cross_ref_id = t2.cmi_cross_ref_id group by t2.cmi_cross_ref_id <end>"}, {"text": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names ages and jobs of all people who are friends with alice for the longest amount of time", "sql_clean": "<start> select t1.name , t1.age , t1.job from person as t1 join personfriend as t2 on t1.name = t2.name where t2.friend = 'alice' and t2.year = (select max(year) from personfriend where friend = 'alice') <end>"}, {"text": "Which patients made more than one appointment? Tell me the name and phone number of these patients.", "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "which patients made more than one appointment tell me the name and phone number of these patients", "sql_clean": "<start> select name , phone from appointment as t1 join patient as t2 on t1.patient = t2.ssn group by t1.patient having count(*) > 1 <end>"}, {"text": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.", "sql": "SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name  =  T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = \"Text\" OR T1.RAM_MiB  >  32;", "db_id": "phone_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the hardware model name for the phones that have screen mode type text or ram size greater than 32", "sql_clean": "<start> select t2.hardware_model_name from chip_model as t1 join phone as t2 on t1.model_name = t2.chip_model join screen_mode as t3 on t2.screen_mode = t3.graphics_mode where t3.type = text or t1.ram_mib > 32; <end>"}, {"text": "Find the id and local authority of the station with has the highest average high temperature.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1", "db_id": "station_weather", "schema": {"tables": [], "columns": []}, "text_clean": "find the id and local authority of the station with has the highest average high temperature", "sql_clean": "<start> select t2.id , t2.local_authority from weekly_weather as t1 join station as t2 on t1.station_id = t2.id group by t1.station_id order by avg(high_temperature) desc limit 1 <end>"}, {"text": "Tell me the payment method used by the customer who ordered the least amount of goods in total.", "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "tell me the payment method used by the customer who ordered the least amount of goods in total", "sql_clean": "<start> select t1.payment_method from customers as t1 join customer_orders as t2 on t1.customer_id = t2.customer_id join order_items as t3 on t2.order_id = t3.order_id group by t1.customer_name order by sum(t3.order_quantity) limit 1 <end>"}, {"text": "What are the first and last names for all customers?", "sql": "SELECT first_name ,  last_name FROM Customers;", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last names for all customers", "sql_clean": "<start> select first_name , last_name from customers; <end>"}, {"text": "What is the first and last name of the student participating in the most activities?", "sql": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the first and last name of the student participating in the most activities", "sql_clean": "<start> select t1.fname , t1.lname from student as t1 join participates_in as t2 on t1.stuid = t2.stuid group by t1.stuid order by count(*) desc limit 1 <end>"}, {"text": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "show the addresses of the buildings that have apartments with more than 2 bathrooms", "sql_clean": "<start> select t1.building_address from apartment_buildings as t1 join apartments as t2 on t1.building_id = t2.building_id where t2.bathroom_count > 2 <end>"}, {"text": "Find the first names and last names of the authors whose institution affiliation is \"Google\".", "sql": "SELECT DISTINCT t1.fname ,  t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Google\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first names and last names of the authors whose institution affiliation is google", "sql_clean": "<start> select distinct t1.fname , t1.lname from authors as t1 join authorship as t2 on t1.authid = t2.authid join inst as t3 on t2.instid = t3.instid where t3.name = google <end>"}, {"text": "What is the first name of students enrolled in class ACCT-211 and got grade C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the first name of students enrolled in class acct 211 and got grade c", "sql_clean": "<start> select t3.stu_fname from class as t1 join enroll as t2 on t1.class_code = t2.class_code join student as t3 on t2.stu_num = t3.stu_num where t1.crs_code = 'acct-211' and t2.enroll_grade = 'c' <end>"}, {"text": "What are the names of the artists who sang the shortest song?", "sql": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the artists who sang the shortest song", "sql_clean": "<start> select t1.artist_name from song as t1 join files as t2 on t1.f_id = t2.f_id order by t2.duration limit 1 <end>"}, {"text": "Return the phone and email of the customer with the first name Aniyah and last name Feest.", "sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "return the phone and email of the customer with the first name aniyah and last name feest", "sql_clean": "<start> select customer_phone , customer_email from customers where customer_first_name = aniyah and customer_last_name = feest <end>"}, {"text": "List the authors of submissions in ascending order of scores.", "sql": "SELECT Author FROM submission ORDER BY Scores ASC", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "list the authors of submissions in ascending order of scores", "sql_clean": "<start> select author from submission order by scores asc <end>"}, {"text": "Find the common login name of course authors and students.", "sql": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "find the common login name of course authors and students", "sql_clean": "<start> select login_name from course_authors_and_tutors intersect select login_name from students <end>"}, {"text": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "sql": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'", "db_id": "browser_web", "schema": {"tables": [], "columns": []}, "text_clean": "when did the web accelerator cachebox and browser internet explorer become compatible", "sql_clean": "<start> select t1.compatible_since_year from accelerator_compatible_browser as t1 join browser as t2 on t1.browser_id = t2.id join web_client_accelerator as t3 on t1.accelerator_id = t3.id where t3.name = 'cachebox' and t2.name = 'internet explorer' <end>"}, {"text": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.", "sql": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and gender type of the dorms whose capacity is greater than 300 or less than 100", "sql_clean": "<start> select dorm_name , gender from dorm where student_capacity > 300 or student_capacity < 100 <end>"}, {"text": "What is the first name, gpa and phone number of the top 5 students with highest gpa?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the first name gpa and phone number of the top 5 students with highest gpa", "sql_clean": "<start> select stu_gpa , stu_phone , stu_fname from student order by stu_gpa desc limit 5 <end>"}, {"text": "For each type, how many ships are there?", "sql": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE", "db_id": "ship_mission", "schema": {"tables": [], "columns": []}, "text_clean": "for each type how many ships are there", "sql_clean": "<start> select type , count(*) from ship group by type <end>"}, {"text": "Find Alice's friends of friends.", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "find alice s friends of friends", "sql_clean": "<start> select distinct t4.name from personfriend as t1 join person as t2 on t1.name = t2.name join personfriend as t3 on t1.friend = t3.name join personfriend as t4 on t3.friend = t4.name where t2.name = 'alice' and t4.name != 'alice' <end>"}, {"text": "What country is the artist who made the fewest songs from?", "sql": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what country is the artist who made the fewest songs from", "sql_clean": "<start> select t1.country from artist as t1 join song as t2 on t1.artist_name = t2.artist_name group by t2.artist_name order by count(*) limit 1 <end>"}, {"text": "For each company, return the company name and the name of the building its office is located in.", "sql": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id", "db_id": "company_office", "schema": {"tables": [], "columns": []}, "text_clean": "for each company return the company name and the name of the building its office is located in", "sql_clean": "<start> select t3.name , t2.name from office_locations as t1 join buildings as t2 on t1.building_id = t2.id join companies as t3 on t1.company_id = t3.id <end>"}, {"text": "What are the names of all genres in alphabetical order, combined with its ratings?", "sql": "SELECT g_name ,  rating FROM genre ORDER BY g_name", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all genres in alphabetical order combined with its ratings", "sql_clean": "<start> select g_name , rating from genre order by g_name <end>"}, {"text": "Show the names of authors from college \"Florida\" or \"Temple\"", "sql": "SELECT Author FROM submission WHERE College  =  \"Florida\" OR College  =  \"Temple\"", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of authors from college florida or temple", "sql_clean": "<start> select author from submission where college = florida or college = temple <end>"}, {"text": "What are the names of all employees who have a salary higher than average?", "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all employees who have a salary higher than average", "sql_clean": "<start> select name from employee where salary > (select avg(salary) from employee) <end>"}, {"text": "Which faculty do not participate in any activity? Find their faculty ids.", "sql": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "which faculty do not participate in any activity find their faculty ids", "sql_clean": "<start> select facid from faculty except select facid from faculty_participates_in <end>"}, {"text": "Find the name of organizations whose names contain \"Party\".", "sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"", "db_id": "e_government", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of organizations whose names contain party", "sql_clean": "<start> select organization_name from organizations where organization_name like %party% <end>"}, {"text": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the dates in which the mean sea level pressure was between 30 3 and 31", "sql_clean": "<start> select date from weather where mean_sea_level_pressure_inches between 30.3 and 31 <end>"}, {"text": "Which parties have hosts of age above 50? Give me the party locations.", "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "db_id": "party_host", "schema": {"tables": [], "columns": []}, "text_clean": "which parties have hosts of age above 50 give me the party locations", "sql_clean": "<start> select t3.location from party_host as t1 join host as t2 on t1.host_id = t2.host_id join party as t3 on t1.party_id = t3.party_id where t2.age > 50 <end>"}, {"text": "What are the open dates and years for the shop named Apple?", "sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "what are the open dates and years for the shop named apple", "sql_clean": "<start> select open_date , open_year from shop where shop_name = apple <end>"}, {"text": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?", "sql": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the id of every song that has a resolution higher than that of a song with a rating below 8", "sql_clean": "<start> select f_id from song where resolution > (select max(resolution) from song where rating < 8) <end>"}, {"text": "Which staff members are assigned to the problem with id 1? Give me their first and last names.", "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "which staff members are assigned to the problem with id 1 give me their first and last names", "sql_clean": "<start> select distinct staff_first_name , staff_last_name from staff as t1 join problem_log as t2 on t1.staff_id = t2.assigned_to_staff_id where t2.problem_id = 1 <end>"}, {"text": "What address was the document with id 4 mailed to?", "sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;", "db_id": "cre_Doc_Control_Systems", "schema": {"tables": [], "columns": []}, "text_clean": "what address was the document with id 4 mailed to", "sql_clean": "<start> select addresses.address_details from addresses join documents_mailed on documents_mailed.mailed_to_address_id = addresses.address_id where document_id = 4; <end>"}, {"text": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?", "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"", "db_id": "tracking_orders", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct customers who have orders with status on road give me the customer details", "sql_clean": "<start> select distinct t1.customer_details from customers as t1 join orders as t2 on t1.customer_id = t2.customer_id where t2.order_status = on road <end>"}, {"text": "find the number of players whose points are lower than 30 in each position.", "sql": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of players whose points are lower than 30 in each position", "sql_clean": "<start> select count(*) , position from player where points < 30 group by position <end>"}, {"text": "Which cities have 2 to 4 parks?", "sql": "SELECT city FROM park GROUP BY city HAVING count(*) BETWEEN 2 AND 4;", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "which cities have 2 to 4 parks", "sql_clean": "<start> select city from park group by city having count(*) between 2 and 4; <end>"}, {"text": "How many transactions correspond to each invoice number?", "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "how many transactions correspond to each invoice number", "sql_clean": "<start> select invoice_number , count(*) from financial_transactions group by invoice_number <end>"}, {"text": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all schools that have students trying out for the position of goal and mid field", "sql_clean": "<start> select cname from tryout where ppos = 'goalie' intersect select cname from tryout where ppos = 'mid' <end>"}, {"text": "How many regions were affected by each storm?", "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "how many regions were affected by each storm", "sql_clean": "<start> select t1.name , count(*) from storm as t1 join affected_region as t2 on t1.storm_id = t2.storm_id group by t1.storm_id <end>"}, {"text": "How many journalists are there?", "sql": "SELECT count(*) FROM journalist", "db_id": "news_report", "schema": {"tables": [], "columns": []}, "text_clean": "how many journalists are there", "sql_clean": "<start> select count(*) from journalist <end>"}, {"text": "Which schools have more than 1 player? Give me the school locations.", "sql": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1", "db_id": "school_player", "schema": {"tables": [], "columns": []}, "text_clean": "which schools have more than 1 player give me the school locations", "sql_clean": "<start> select t2.location from player as t1 join school as t2 on t1.school_id = t2.school_id group by t1.school_id having count(*) > 1 <end>"}, {"text": "Show the product type codes which have at least two products.", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2", "db_id": "customers_and_products_contacts", "schema": {"tables": [], "columns": []}, "text_clean": "show the product type codes which have at least two products", "sql_clean": "<start> select product_type_code from products group by product_type_code having count(*) >= 2 <end>"}, {"text": "What is the label that has the most albums?", "sql": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the label that has the most albums", "sql_clean": "<start> select label from albums group by label order by count(*) desc limit 1 <end>"}, {"text": "What are the themes of parties ordered by the number of hosts in ascending manner?", "sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "db_id": "party_host", "schema": {"tables": [], "columns": []}, "text_clean": "what are the themes of parties ordered by the number of hosts in ascending manner", "sql_clean": "<start> select party_theme from party order by number_of_hosts asc <end>"}, {"text": "Which building has most faculty members?", "sql": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "which building has most faculty members", "sql_clean": "<start> select building from faculty group by building order by count(*) desc limit 1 <end>"}, {"text": "What are the first and last name of the faculty who has the most students?", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last name of the faculty who has the most students", "sql_clean": "<start> select t1.fname , t1.lname from faculty as t1 join student as t2 on t1.facid = t2.advisor group by t1.facid order by count(*) desc limit 1 <end>"}, {"text": "Find the number of phones for each accreditation type.", "sql": "SELECT Accreditation_type ,  count(*) FROM phone GROUP BY Accreditation_type", "db_id": "phone_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of phones for each accreditation type", "sql_clean": "<start> select accreditation_type , count(*) from phone group by accreditation_type <end>"}, {"text": "How many customers are there?", "sql": "SELECT sum(no_of_customers) FROM bank", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many customers are there", "sql_clean": "<start> select sum(no_of_customers) from bank <end>"}, {"text": "Which classes have more than two captains?", "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "which classes have more than two captains", "sql_clean": "<start> select class from captain group by class having count(*) > 2 <end>"}, {"text": "Find the name of the most expensive product.", "sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1", "db_id": "customer_deliveries", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the most expensive product", "sql_clean": "<start> select product_name from products order by product_price desc limit 1 <end>"}, {"text": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.", "sql": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990", "db_id": "manufacturer", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990", "sql_clean": "<start> select max(num_of_shops) , avg(num_of_factories) from manufacturer where open_year < 1990 <end>"}, {"text": "For each file format, return the number of artists who released songs in that format.", "sql": "SELECT count(*) ,  formats FROM files GROUP BY formats", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "for each file format return the number of artists who released songs in that format", "sql_clean": "<start> select count(*) , formats from files group by formats <end>"}, {"text": "What are the ages of all of Zach's friends who are in the longest relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ages of all of zach s friends who are in the longest relationship", "sql_clean": "<start> select t1.age from person as t1 join personfriend as t2 on t1.name = t2.friend where t2.name = 'zach' and t2.year = (select max(year) from personfriend where name = 'zach') <end>"}, {"text": "What are the maximum and minimum settlement amount on record?", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "db_id": "insurance_fnol", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum and minimum settlement amount on record", "sql_clean": "<start> select max(settlement_amount) , min(settlement_amount) from settlements <end>"}, {"text": "Show all the distinct districts for elections.", "sql": "SELECT DISTINCT District FROM election", "db_id": "election", "schema": {"tables": [], "columns": []}, "text_clean": "show all the distinct districts for elections", "sql_clean": "<start> select distinct district from election <end>"}, {"text": "How many professors who are from either Accounting or Biology department?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many professors who are from either accounting or biology department", "sql_clean": "<start> select count(*) from professor as t1 join department as t2 on t1.dept_code = t2.dept_code where t2.dept_name = 'accounting' or t2.dept_name = 'biology' <end>"}, {"text": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the top 10 customers by total gross sales list customers first and last name and total gross sales", "sql_clean": "<start> select t1.first_name , t1.last_name , sum(t2.total) from customers as t1 join invoices as t2 on t2.customer_id = t1.id group by t1.id order by sum(t2.total) desc limit 10; <end>"}, {"text": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?", "sql": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the dorm with both a tv lounge and study room listed as amenities", "sql_clean": "<start> select t1.dorm_name from dorm as t1 join has_amenity as t2 on t1.dormid = t2.dormid join dorm_amenity as t3 on t2.amenid = t3.amenid where t3.amenity_name = 'tv lounge' intersect select t1.dorm_name from dorm as t1 join has_amenity as t2 on t1.dormid = t2.dormid join dorm_amenity as t3 on t2.amenid = t3.amenid where t3.amenity_name = 'study room' <end>"}, {"text": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name", "db_id": "document_management", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all the documents as well as the access counts of each ordered alphabetically", "sql_clean": "<start> select document_name , access_count from documents order by document_name <end>"}, {"text": "get the details of employees who manage a department.", "sql": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "get the details of employees who manage a department", "sql_clean": "<start> select distinct * from employees as t1 join departments as t2 on t1.department_id = t2.department_id where t1.employee_id = t2.manager_id <end>"}, {"text": "What is the school code of the accounting department?", "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the school code of the accounting department", "sql_clean": "<start> select school_code from department where dept_name = accounting <end>"}, {"text": "Give the hometowns from which two or more gymnasts are from.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "db_id": "gymnast", "schema": {"tables": [], "columns": []}, "text_clean": "give the hometowns from which two or more gymnasts are from", "sql_clean": "<start> select t2.hometown from gymnast as t1 join people as t2 on t1.gymnast_id = t2.people_id group by t2.hometown having count(*) >= 2 <end>"}, {"text": "What is the title, credit value, and department name for courses with more than one prerequisite?", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the title credit value and department name for courses with more than one prerequisite", "sql_clean": "<start> select t1.title , t1.credits , t1.dept_name from course as t1 join prereq as t2 on t1.course_id = t2.course_id group by t2.course_id having count(*) > 1 <end>"}, {"text": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.", "sql": "SELECT T2.Name ,  T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID ORDER BY T3.Attendance DESC", "db_id": "performance_attendance", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of members and the dates of performances they attended in descending order of attendance of the performances", "sql_clean": "<start> select t2.name , t3.date from member_attendance as t1 join member as t2 on t1.member_id = t2.member_id join performance as t3 on t1.performance_id = t3.performance_id order by t3.attendance desc <end>"}, {"text": "What are the card numbers, names, and hometowns of every member ordered by descending level?", "sql": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "what are the card numbers names and hometowns of every member ordered by descending level", "sql_clean": "<start> select card_number , name , hometown from member order by level desc <end>"}, {"text": "Show the average amount of transactions for different lots, ordered by average amount of transactions.", "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)", "db_id": "tracking_share_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "show the average amount of transactions for different lots ordered by average amount of transactions", "sql_clean": "<start> select t2.lot_id , avg(amount_of_transaction) from transactions as t1 join transactions_lots as t2 on t1.transaction_id = t2.transaction_id group by t2.lot_id order by avg(amount_of_transaction) <end>"}, {"text": "what are the names of the ships ordered by ascending tonnage?", "sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "db_id": "ship_mission", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the ships ordered by ascending tonnage", "sql_clean": "<start> select name from ship order by tonnage asc <end>"}, {"text": "What is the id and family name of the driver who has the longest laptime?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the id and family name of the driver who has the longest laptime", "sql_clean": "<start> select t1.driverid , t1.surname from drivers as t1 join laptimes as t2 on t1.driverid = t2.driverid order by t2.milliseconds desc limit 1 <end>"}, {"text": "Which problem id and log id are assigned to the staff named Rylan Homenick?", "sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "which problem id and log id are assigned to the staff named rylan homenick", "sql_clean": "<start> select distinct t2.problem_id , t2.problem_log_id from staff as t1 join problem_log as t2 on t1.staff_id = t2.assigned_to_staff_id where t1.staff_first_name = rylan and t1.staff_last_name = homenick <end>"}, {"text": "How many artists are above age 46 and joined after 1990?", "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "how many artists are above age 46 and joined after 1990", "sql_clean": "<start> select count(*) from artist where age > 46 and year_join > 1990 <end>"}, {"text": "Find the titles of the papers the author \"Stephanie Weirich\" wrote.", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE t1.fname  =  \"Stephanie\" AND t1.lname  =  \"Weirich\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the titles of the papers the author stephanie weirich wrote", "sql_clean": "<start> select t3.title from authors as t1 join authorship as t2 on t1.authid = t2.authid join papers as t3 on t2.paperid = t3.paperid where t1.fname = stephanie and t1.lname = weirich <end>"}, {"text": "How many invoices correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "how many invoices correspond to each order id", "sql_clean": "<start> select order_id , count(*) from invoices group by order_id <end>"}, {"text": "What are the total number of credits offered by each department?", "sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the total number of credits offered by each department", "sql_clean": "<start> select sum(t1.crs_credit) , t1.dept_code from course as t1 join class as t2 on t1.crs_code = t2.crs_code group by t1.dept_code <end>"}, {"text": "What is all the information about employees with D or S in their first name, ordered by salary descending?", "sql": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is all the information about employees with d or s in their first name ordered by salary descending", "sql_clean": "<start> select * from employees where first_name like '%d%' or first_name like '%s%' order by salary desc <end>"}, {"text": "How many students are affected by each allergy type?", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many students are affected by each allergy type", "sql_clean": "<start> select t2.allergytype , count(*) from has_allergy as t1 join allergy_type as t2 on t1.allergy = t2.allergy group by t2.allergytype <end>"}, {"text": "List all media types.", "sql": "SELECT name FROM media_types;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "list all media types", "sql_clean": "<start> select name from media_types; <end>"}, {"text": "What are the names of cities in ascending alphabetical order?", "sql": "SELECT Name FROM city ORDER BY Name ASC", "db_id": "county_public_safety", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of cities in ascending alphabetical order", "sql_clean": "<start> select name from city order by name asc <end>"}, {"text": "How many sections does course ACCT-211 has?", "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many sections does course acct 211 has", "sql_clean": "<start> select count(distinct class_section) from class where crs_code = 'acct-211' <end>"}, {"text": "What are the names of the different banks that have provided loans?", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the different banks that have provided loans", "sql_clean": "<start> select distinct t1.bname from bank as t1 join loan as t2 on t1.branch_id = t2.branch_id <end>"}, {"text": "What are the salaries and manager ids for employees who have managers?", "sql": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the salaries and manager ids for employees who have managers", "sql_clean": "<start> select salary , manager_id from employees where manager_id != null <end>"}, {"text": "Which major has most number of students?", "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "which major has most number of students", "sql_clean": "<start> select major from student group by major order by count(*) desc limit 1 <end>"}, {"text": "How many different students play games?", "sql": "SELECT count(DISTINCT StuID) FROM Plays_games", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many different students play games", "sql_clean": "<start> select count(distinct stuid) from plays_games <end>"}, {"text": "Show all transaction types.", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "show all transaction types", "sql_clean": "<start> select distinct transaction_type from financial_transactions <end>"}, {"text": "What is the product with the highest height? Give me the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "what is the product with the highest height give me the catalog entry name", "sql_clean": "<start> select catalog_entry_name from catalog_contents order by height desc limit 1 <end>"}, {"text": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the distinct names of wines produced before the year of 2000 or after the year of 2010", "sql_clean": "<start> select distinct name from wine where year < 2000 or year > 2010 <end>"}, {"text": "Find the first and last name of all the students of age 18 who have vice president votes.", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the first and last name of all the students of age 18 who have vice president votes", "sql_clean": "<start> select distinct t1.fname , t1.lname from student as t1 join voting_record as t2 on t1.stuid = t2.vice_president_vote where t1.age = 18 <end>"}, {"text": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.", "sql": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC", "db_id": "company_office", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of the buildings in on hold status and sort them in ascending order of building stories", "sql_clean": "<start> select name from buildings where status = on-hold order by stories asc <end>"}, {"text": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"", "sql": "SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type  =  \"Graphics\" OR t2.Company_name  =  \"Nokia Corporation\"", "db_id": "phone_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the hardware model name for the phones that were produced by nokia corporation or whose screen mode type is graphics", "sql_clean": "<start> select distinct t2.hardware_model_name from screen_mode as t1 join phone as t2 on t1.graphics_mode = t2.screen_mode where t1.type = graphics or t2.company_name = nokia corporation <end>"}, {"text": "What are the method, date and amount of each payment? Sort the list in ascending order of date.", "sql": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "what are the method date and amount of each payment sort the list in ascending order of date", "sql_clean": "<start> select payment_method_code , date_payment_made , amount_payment from payments order by date_payment_made asc <end>"}, {"text": "What are the names and headquarters of all manufacturers, ordered by revenue descending?", "sql": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and headquarters of all manufacturers ordered by revenue descending", "sql_clean": "<start> select name , headquarter from manufacturers order by revenue desc <end>"}, {"text": "Which directors had a movie in either 1999 or 2000?", "sql": "SELECT director FROM movie WHERE YEAR  =  1999 OR YEAR  =  2000", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "which directors had a movie in either 1999 or 2000", "sql_clean": "<start> select director from movie where year = 1999 or year = 2000 <end>"}, {"text": "Which catalog content has the highest height? Give me the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "which catalog content has the highest height give me the catalog entry name", "sql_clean": "<start> select catalog_entry_name from catalog_contents order by height desc limit 1 <end>"}, {"text": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.", "sql": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age", "db_id": "party_host", "schema": {"tables": [], "columns": []}, "text_clean": "show the locations of parties and the names of the party hosts in ascending order of the age of the host", "sql_clean": "<start> select t3.location , t2.name from party_host as t1 join host as t2 on t1.host_id = t2.host_id join party as t3 on t1.party_id = t3.party_id order by t2.age <end>"}, {"text": "What is the count of customers that Steve Johnson supports?", "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the count of customers that steve johnson supports", "sql_clean": "<start> select count(*) from employees as t1 join customers as t2 on t2.support_rep_id = t1.id where t1.first_name = steve and t1.last_name = johnson; <end>"}, {"text": "Return the name of the marketing region the store Rob Dinning is located in.", "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "return the name of the marketing region the store rob dinning is located in", "sql_clean": "<start> select t1.marketing_region_name from marketing_regions as t1 join stores as t2 on t1.marketing_region_code = t2.marketing_region_code where t2.store_name = rob dinning <end>"}, {"text": "Find all the policy type codes associated with the customer \"Dayana Robel\"", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "find all the policy type codes associated with the customer dayana robel", "sql_clean": "<start> select policy_type_code from policies as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.customer_details = dayana robel <end>"}, {"text": "List the names of phones that are not on any market.", "sql": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)", "db_id": "phone_market", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of phones that are not on any market", "sql_clean": "<start> select name from phone where phone_id not in (select phone_id from phone_market) <end>"}, {"text": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?", "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "what is id of the staff who had a staff department assignment earlier than any clerical staff", "sql_clean": "<start> select staff_id from staff_department_assignments where date_assigned_to < (select max(date_assigned_to) from staff_department_assignments where job_title_code = 'clerical staff') <end>"}, {"text": "What is the address of the location \"UK Gallery\"?", "sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "what is the address of the location uk gallery", "sql_clean": "<start> select address from locations where location_name = uk gallery <end>"}, {"text": "What are the official native languages that contain the string \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "what are the official native languages that contain the string english", "sql_clean": "<start> select official_native_language from country where official_native_language like %english% <end>"}, {"text": "What is the name and country for the artist with most number of exhibitions?", "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name and country for the artist with most number of exhibitions", "sql_clean": "<start> select t2.name , t2.country from exhibition as t1 join artist as t2 on t1.artist_id = t2.artist_id group by t1.artist_id order by count(*) desc limit 1 <end>"}, {"text": "How many classes are professor whose last name is Graztevski has?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many classes are professor whose last name is graztevski has", "sql_clean": "<start> select count(*) from employee as t1 join class as t2 on t1.emp_num = t2.prof_num where t1.emp_lname = 'graztevski' <end>"}, {"text": "Find the id and city of the student address with the highest average monthly rental.", "sql": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "db_id": "behavior_monitoring", "schema": {"tables": [], "columns": []}, "text_clean": "find the id and city of the student address with the highest average monthly rental", "sql_clean": "<start> select t2.address_id , t1.city from addresses as t1 join student_addresses as t2 on t1.address_id = t2.address_id group by t2.address_id order by avg(monthly_rental) desc limit 1 <end>"}, {"text": "Find the busiest destination airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "find the busiest destination airport that runs most number of routes in china", "sql_clean": "<start> select t1.name from airports as t1 join routes as t2 on t1.apid = t2.dst_apid where t1.country = 'china' group by t1.name order by count(*) desc limit 1 <end>"}, {"text": "Show all date and share count of transactions.", "sql": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS", "db_id": "tracking_share_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "show all date and share count of transactions", "sql_clean": "<start> select date_of_transaction , share_count from transactions <end>"}, {"text": "Provide the full names of employees earning more than the employee with id 163.", "sql": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "provide the full names of employees earning more than the employee with id 163", "sql_clean": "<start> select first_name , last_name from employees where salary > (select salary from employees where employee_id = 163 ) <end>"}, {"text": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "sql": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'", "db_id": "browser_web", "schema": {"tables": [], "columns": []}, "text_clean": "show the accelerator names and supporting operating systems that are not compatible with the browser named opera", "sql_clean": "<start> select name , operating_system from web_client_accelerator except select t1.name , t1.operating_system from web_client_accelerator as t1 join accelerator_compatible_browser as t2 on t2.accelerator_id = t1.id join browser as t3 on t2.browser_id = t3.id where t3.name = 'opera' <end>"}, {"text": "What are the ids of the students who registered for course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of the students who registered for course 301", "sql_clean": "<start> select student_id from student_course_attendance where course_id = 301 <end>"}, {"text": "How many books fall into each category?", "sql": "SELECT category ,  count(*) FROM book_club GROUP BY category", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "how many books fall into each category", "sql_clean": "<start> select category , count(*) from book_club group by category <end>"}, {"text": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last names of all drivers who participated in the australian grand prix but not the chinese grand prix", "sql_clean": "<start> select t3.forename , t3.surname from races as t1 join results as t2 on t1.raceid = t2.raceid join drivers as t3 on t2.driverid = t3.driverid where t1.name = australian grand prix except select t3.forename , t3.surname from races as t1 join results as t2 on t1.raceid = t2.raceid join drivers as t3 on t2.driverid = t3.driverid where t1.name = chinese grand prix <end>"}, {"text": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "show the total number of rooms of the apartments in the building with short name columbus square", "sql_clean": "<start> select sum(t2.room_count) from apartment_buildings as t1 join apartments as t2 on t1.building_id = t2.building_id where t1.building_short_name = columbus square <end>"}, {"text": "What are the distinct names of wines that have appellations in the North Coast area?", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct names of wines that have appellations in the north coast area", "sql_clean": "<start> select distinct t2.name from appellations as t1 join wine as t2 on t1.appelation = t2.appelation where t1.area = north coast <end>"}, {"text": "List the name of rooms with king or queen bed.", "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the name of rooms with king or queen bed", "sql_clean": "<start> select roomname from rooms where bedtype = king or bedtype = queen; <end>"}, {"text": "What are the title and rental rate of the film with the highest rental rate?", "sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the title and rental rate of the film with the highest rental rate", "sql_clean": "<start> select title , rental_rate from film order by rental_rate desc limit 1 <end>"}, {"text": "What are the names of tracks that contain the the word you in them?", "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of tracks that contain the the word you in them", "sql_clean": "<start> select name from track where name like '%you%' <end>"}, {"text": "Find the name of airports whose altitude is between -50 and 50.", "sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of airports whose altitude is between 50 and 50", "sql_clean": "<start> select name from airports where elevation between -50 and 50 <end>"}, {"text": "Find the name of the department that offers the highest total credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the department that offers the highest total credits", "sql_clean": "<start> select dept_name from course group by dept_name order by sum(credits) desc limit 1 <end>"}, {"text": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103", "sql_clean": "<start> select id from trip where duration >= (select avg(duration) from trip where zip_code = 94103) <end>"}, {"text": "What is the name of the tallest building?", "sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1", "db_id": "protein_institute", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the tallest building", "sql_clean": "<start> select name from building order by height_feet desc limit 1 <end>"}, {"text": "What are the songs in volumes with more than 1 week on top?", "sql": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "what are the songs in volumes with more than 1 week on top", "sql_clean": "<start> select song from volume where weeks_on_top > 1 <end>"}, {"text": "What are the names and capitals of each country?", "sql": "SELECT Country_name ,  Capital FROM country", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and capitals of each country", "sql_clean": "<start> select country_name , capital from country <end>"}, {"text": "Find id of the candidate whose email is stanley.monahan@example.org?", "sql": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "find id of the candidate whose email is stanley monahan example org", "sql_clean": "<start> select t2.candidate_id from people as t1 join candidates as t2 on t1.person_id = t2.candidate_id where t1.email_address = stanley.monahan@example.org <end>"}, {"text": "How many students are older than 20 in each dorm?", "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many students are older than 20 in each dorm", "sql_clean": "<start> select count(*) , t3.dorm_name from student as t1 join lives_in as t2 on t1.stuid = t2.stuid join dorm as t3 on t3.dormid = t2.dormid where t1.age > 20 group by t3.dorm_name <end>"}, {"text": "display the employee id and salary of all employees who report to Payam (first name).", "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "display the employee id and salary of all employees who report to payam first name", "sql_clean": "<start> select employee_id , salary from employees where manager_id = (select employee_id from employees where first_name = 'payam' ) <end>"}, {"text": "Count the total number of apartment bookings.", "sql": "SELECT count(*) FROM Apartment_Bookings", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "count the total number of apartment bookings", "sql_clean": "<start> select count(*) from apartment_bookings <end>"}, {"text": "What are the names of the mills which are not located in 'Donceel'?", "sql": "SELECT name FROM mill WHERE LOCATION != 'Donceel'", "db_id": "architecture", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the mills which are not located in donceel", "sql_clean": "<start> select name from mill where location != 'donceel' <end>"}, {"text": "What are the names and location of the shops in ascending alphabetical order of name.", "sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and location of the shops in ascending alphabetical order of name", "sql_clean": "<start> select shop_name , location from shop order by shop_name asc <end>"}, {"text": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "return the number of routes with destination airport in italy operated by the airline with name american airlines", "sql_clean": "<start> select count(*) from routes as t1 join airports as t2 on t1.dst_apid = t2.apid join airlines as t3 on t1.alid = t3.alid where t2.country = 'italy' and t3.name = 'american airlines' <end>"}, {"text": "Which major has between 2 and 30 number of students? List major and the number of students.", "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;", "db_id": "restaurant_1", "schema": {"tables": [], "columns": []}, "text_clean": "which major has between 2 and 30 number of students list major and the number of students", "sql_clean": "<start> select major , count(*) from student group by major having count(major) between 2 and 30; <end>"}, {"text": "What are the names of customers who do not have saving accounts?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of customers who do not have saving accounts", "sql_clean": "<start> select cust_name from customer except select cust_name from customer where acc_type = 'saving' <end>"}, {"text": "How many models do not have the wifi function?", "sql": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'", "db_id": "phone_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many models do not have the wifi function", "sql_clean": "<start> select count(*) from chip_model where wifi = 'no' <end>"}, {"text": "What are the details and star ratings of the three hotels with the lowest price ranges?", "sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "what are the details and star ratings of the three hotels with the lowest price ranges", "sql_clean": "<start> select other_hotel_details , star_rating_code from hotels order by price_range asc limit 3 <end>"}, {"text": "List the description, code and the number of services for each service type.", "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "list the description code and the number of services for each service type", "sql_clean": "<start> select t1.service_type_description , t2.service_type_code , count(*) from ref_service_types as t1 join services as t2 on t1.service_type_code = t2.service_type_code group by t2.service_type_code <end>"}, {"text": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "db_id": "climbing", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of mountains that have a height of over 5000 or a prominence of over 1000", "sql_clean": "<start> select name from mountain where height > 5000 or prominence > 1000 <end>"}, {"text": "What is the first and last name of the faculty participating in the most activities?", "sql": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the first and last name of the faculty participating in the most activities", "sql_clean": "<start> select t1.fname , t1.lname from faculty as t1 join faculty_participates_in as t2 on t1.facid = t2.facid group by t1.facid order by count(*) desc limit 1 <end>"}, {"text": "What is the name, city, and country of the airport with the highest elevation?", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name city and country of the airport with the highest elevation", "sql_clean": "<start> select name , city , country from airports order by elevation desc limit 1 <end>"}, {"text": "Return the average enrollment of universities founded before 1850.", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "db_id": "university_basketball", "schema": {"tables": [], "columns": []}, "text_clean": "return the average enrollment of universities founded before 1850", "sql_clean": "<start> select avg(enrollment) from university where founded < 1850 <end>"}, {"text": "Give me a list of all the channel names sorted by the channel rating in descending order.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "give me a list of all the channel names sorted by the channel rating in descending order", "sql_clean": "<start> select name from channel order by rating_in_percent desc <end>"}, {"text": "Return the apartment number and the number of rooms for each apartment.", "sql": "SELECT apt_number ,  room_count FROM Apartments", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "return the apartment number and the number of rooms for each apartment", "sql_clean": "<start> select apt_number , room_count from apartments <end>"}, {"text": "Which of the airport names contains the word 'international'?", "sql": "SELECT name FROM airport WHERE name LIKE '%international%'", "db_id": "flight_company", "schema": {"tables": [], "columns": []}, "text_clean": "which of the airport names contains the word international", "sql_clean": "<start> select name from airport where name like '%international%' <end>"}, {"text": "Find the average prices of all products from each manufacture, and list each company's name.", "sql": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the average prices of all products from each manufacture and list each company s name", "sql_clean": "<start> select avg(t1.price) , t2.name from products as t1 join manufacturers as t2 on t1.manufacturer = t2.code group by t2.name <end>"}, {"text": "Find the name of the department which has the highest average salary of professors.", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the department which has the highest average salary of professors", "sql_clean": "<start> select dept_name from instructor group by dept_name order by avg(salary) desc limit 1 <end>"}, {"text": "What are the cities no customers live in?", "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "what are the cities no customers live in", "sql_clean": "<start> select city from addresses where city not in ( select distinct t3.city from customers as t1 join customer_addresses as t2 on t1.customer_id = t2.customer_id join addresses as t3 on t2.address_id = t3.address_id) <end>"}, {"text": "What is the gender of the student Linda Smith?", "sql": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "db_id": "restaurant_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the gender of the student linda smith", "sql_clean": "<start> select sex from student where fname = linda and lname = smith; <end>"}, {"text": "List the names of the customers who have once bought product \"food\".", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "db_id": "tracking_orders", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of the customers who have once bought product food", "sql_clean": "<start> select t1.customer_name from customers as t1 join orders as t2 join order_items as t3 join products as t4 on t1.customer_id = t2.customer_id and t2.order_id = t3.order_id and t3.product_id = t4.product_id where t4.product_name = food group by t1.customer_id having count(*) >= 1 <end>"}, {"text": "What is the course title of the prerequisite of course Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the course title of the prerequisite of course mobile computing", "sql_clean": "<start> select title from course where course_id in (select t1.prereq_id from prereq as t1 join course as t2 on t1.course_id = t2.course_id where t2.title = 'mobile computing') <end>"}, {"text": "How many female students live in Smith Hall?", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many female students live in smith hall", "sql_clean": "<start> select count(*) from student as t1 join lives_in as t2 on t1.stuid = t2.stuid join dorm as t3 on t3.dormid = t2.dormid where t3.dorm_name = 'smith hall' and t1.sex = 'f' <end>"}, {"text": "display those employees who joined after 7th September, 1987.", "sql": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "display those employees who joined after 7th september 1987", "sql_clean": "<start> select * from employees where hire_date > '1987-09-07' <end>"}, {"text": "Give me a list of all the distinct building descriptions.", "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "give me a list of all the distinct building descriptions", "sql_clean": "<start> select distinct building_description from apartment_buildings <end>"}, {"text": "What are the price ranges of five star hotels?", "sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "what are the price ranges of five star hotels", "sql_clean": "<start> select price_range from hotels where star_rating_code = 5 <end>"}, {"text": "What are the titles of films that do not have a film market estimation?", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "what are the titles of films that do not have a film market estimation", "sql_clean": "<start> select title from film where film_id not in (select film_id from film_market_estimation) <end>"}, {"text": "Show the crime rates of counties in ascending order of number of police officers.", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "db_id": "county_public_safety", "schema": {"tables": [], "columns": []}, "text_clean": "show the crime rates of counties in ascending order of number of police officers", "sql_clean": "<start> select crime_rate from county_public_safety order by police_officers asc <end>"}, {"text": "List the distinct hometowns that are not associated with any gymnast.", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "db_id": "gymnast", "schema": {"tables": [], "columns": []}, "text_clean": "list the distinct hometowns that are not associated with any gymnast", "sql_clean": "<start> select distinct hometown from people except select distinct t2.hometown from gymnast as t1 join people as t2 on t1.gymnast_id = t2.people_id <end>"}, {"text": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the first name gpa and phone number of the students with the top 5 gpas", "sql_clean": "<start> select stu_gpa , stu_phone , stu_fname from student order by stu_gpa desc limit 5 <end>"}, {"text": "Find the personal names of students not enrolled in any course.", "sql": "SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id  =  T2.student_id", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "find the personal names of students not enrolled in any course", "sql_clean": "<start> select personal_name from students except select t1.personal_name from students as t1 join student_course_enrolment as t2 on t1.student_id = t2.student_id <end>"}, {"text": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the stations that are located in palo alto but have never been the ending point of the trips", "sql_clean": "<start> select name from station where city = palo alto except select end_station_name from trip group by end_station_name having count(*) > 100 <end>"}, {"text": "How many products are there for each manufacturer?", "sql": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many products are there for each manufacturer", "sql_clean": "<start> select count(*) , t2.name from products as t1 join manufacturers as t2 on t1.manufacturer = t2.code group by t2.name <end>"}, {"text": "What is the total number of deaths and damage for all storms with a max speed greater than the average?", "sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total number of deaths and damage for all storms with a max speed greater than the average", "sql_clean": "<start> select sum(number_deaths) , sum(damage_millions_usd) from storm where max_speed > (select avg(max_speed) from storm) <end>"}, {"text": "What are the names of candidates who have a lower support rate than oppose rate?", "sql": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate", "db_id": "candidate_poll", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of candidates who have a lower support rate than oppose rate", "sql_clean": "<start> select t1.name from people as t1 join candidate as t2 on t1.people_id = t2.people_id where t2.support_rate < t2.oppose_rate <end>"}, {"text": "How many milliseconds long is Fast As a Shark?", "sql": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many milliseconds long is fast as a shark", "sql_clean": "<start> select milliseconds from tracks where name = fast as a shark; <end>"}, {"text": "Count the number of authors.", "sql": "SELECT count(*) FROM authors", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of authors", "sql_clean": "<start> select count(*) from authors <end>"}, {"text": "Which programs' origins are not \"Beijing\"? Give me the program names.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "which programs origins are not beijing give me the program names", "sql_clean": "<start> select name from program where origin != 'beijing' <end>"}, {"text": "What are the countries for appelations with at most 3 wines?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the countries for appelations with at most 3 wines", "sql_clean": "<start> select t1.county from appellations as t1 join wine as t2 on t1.appelation = t2.appelation group by t2.appelation having count(*) <= 3 <end>"}, {"text": "What are the names and descriptions of the all courses under the \"Computer Science\" subject?", "sql": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and descriptions of the all courses under the computer science subject", "sql_clean": "<start> select t1.course_name , t1.course_description from courses as t1 join subjects as t2 on t1.subject_id = t2.subject_id where t2.subject_name = computer science <end>"}, {"text": "how many female dependents are there?", "sql": "SELECT count(*) FROM dependent WHERE sex  =  'F'", "db_id": "company_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many female dependents are there", "sql_clean": "<start> select count(*) from dependent where sex = 'f' <end>"}, {"text": "What are the names and countries of origin for the artists who produced the top three highly rated songs.", "sql": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and countries of origin for the artists who produced the top three highly rated songs", "sql_clean": "<start> select t1.artist_name , t1.country from artist as t1 join song as t2 on t1.artist_name = t2.artist_name order by t2.rating desc limit 3 <end>"}, {"text": "Return the type name, type description, and date of creation for each document.", "sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "return the type name type description and date of creation for each document", "sql_clean": "<start> select t1.document_type_name , t1.document_type_description , t2.document_date from ref_document_types as t1 join documents as t2 on t1.document_type_code = t2.document_type_code <end>"}, {"text": "How many distinct parties are there for representatives?", "sql": "SELECT count(DISTINCT Party) FROM representative", "db_id": "election_representative", "schema": {"tables": [], "columns": []}, "text_clean": "how many distinct parties are there for representatives", "sql_clean": "<start> select count(distinct party) from representative <end>"}, {"text": "List every individual's first name, middle name and last name in alphabetical order by last name.", "sql": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name", "db_id": "e_government", "schema": {"tables": [], "columns": []}, "text_clean": "list every individual s first name middle name and last name in alphabetical order by last name", "sql_clean": "<start> select individual_first_name , individual_middle_name , individual_last_name from individuals order by individual_last_name <end>"}, {"text": "What are the ids of courses without prerequisites?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of courses without prerequisites", "sql_clean": "<start> select course_id from course except select course_id from prereq <end>"}, {"text": "Return the official native languages of countries who have players from Maryland or Duke colleges.", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "return the official native languages of countries who have players from maryland or duke colleges", "sql_clean": "<start> select t1.official_native_language from country as t1 join match_season as t2 on t1.country_id = t2.country where t2.college = maryland or t2.college = duke <end>"}, {"text": "What is the last name and office of the professor from the history department?", "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the last name and office of the professor from the history department", "sql_clean": "<start> select t1.emp_lname , t2.prof_office from employee as t1 join professor as t2 on t1.emp_num = t2.emp_num join department as t3 on t2.dept_code = t3.dept_code where t3.dept_name = 'history' <end>"}, {"text": "Find the name and email for the users who have more than one follower.", "sql": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1", "db_id": "twitter_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and email for the users who have more than one follower", "sql_clean": "<start> select t1.name , t1.email from user_profiles as t1 join follows as t2 on t1.uid = t2.f1 group by t2.f1 having count(*) > 1 <end>"}, {"text": "Find the last names of the students in third grade that are not taught by COVIN JEROME.", "sql": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the last names of the students in third grade that are not taught by covin jerome", "sql_clean": "<start> select distinct t1.lastname from list as t1 join teachers as t2 on t1.classroom = t2.classroom where t1.grade = 3 and t2.firstname != covin and t2.lastname != jerome <end>"}, {"text": "For how many clubs is \"Tracy Kim\" a member?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "for how many clubs is tracy kim a member", "sql_clean": "<start> select count(*) from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t3.fname = tracy and t3.lname = kim <end>"}, {"text": "Show the order ids and the number of items in each order.", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "show the order ids and the number of items in each order", "sql_clean": "<start> select order_id , count(*) from order_items group by order_id <end>"}, {"text": "How many lessons taught by staff whose first name has letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "how many lessons taught by staff whose first name has letter a in it", "sql_clean": "<start> select count(*) from lessons as t1 join staff as t2 on t1.staff_id = t2.staff_id where t2.first_name like %a% <end>"}, {"text": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "for all directors who directed more than one movie return the titles of all movies directed by them along with the director name sort by director name then movie title", "sql_clean": "<start> select t1.title , t1.director from movie as t1 join movie as t2 on t1.director = t2.director where t1.title != t2.title order by t1.director , t1.title <end>"}, {"text": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?", "sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"", "db_id": "aircraft", "schema": {"tables": [], "columns": []}, "text_clean": "what are the number of international and domestic passengers of the airport named london heathrow", "sql_clean": "<start> select international_passengers , domestic_passengers from airport where airport_name = london heathrow <end>"}, {"text": "How many donors have endowment for school named \"Glenn\"?", "sql": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"", "db_id": "school_finance", "schema": {"tables": [], "columns": []}, "text_clean": "how many donors have endowment for school named glenn", "sql_clean": "<start> select count(distinct t1.donator_name) from endowment as t1 join school as t2 on t1.school_id = t2.school_id where t2.school_name = glenn <end>"}, {"text": "Find the total revenue of companies of each founder.", "sql": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the total revenue of companies of each founder", "sql_clean": "<start> select sum(revenue) , founder from manufacturers group by founder <end>"}, {"text": "Show the customer name, customer address city, date from, and date to for each customer address history.", "sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id", "db_id": "customers_and_products_contacts", "schema": {"tables": [], "columns": []}, "text_clean": "show the customer name customer address city date from and date to for each customer address history", "sql_clean": "<start> select t2.customer_name , t3.city , t1.date_from , t1.date_to from customer_address_history as t1 join customers as t2 on t1.customer_id = t2.customer_id join addresses as t3 on t1.address_id = t3.address_id <end>"}, {"text": "Tell me the number of orders with \"Second time\" as order detail.", "sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "tell me the number of orders with second time as order detail", "sql_clean": "<start> select count(*) from customer_orders where order_details = second time <end>"}, {"text": "What is the average distance and average price for flights from Los Angeles.", "sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average distance and average price for flights from los angeles", "sql_clean": "<start> select avg(distance) , avg(price) from flight where origin = los angeles <end>"}, {"text": "List all information about the assessment notes sorted by date in ascending order.", "sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC", "db_id": "behavior_monitoring", "schema": {"tables": [], "columns": []}, "text_clean": "list all information about the assessment notes sorted by date in ascending order", "sql_clean": "<start> select * from assessment_notes order by date_of_notes asc <end>"}, {"text": "How many tracks do we have?", "sql": "SELECT count(*) FROM track", "db_id": "race_track", "schema": {"tables": [], "columns": []}, "text_clean": "how many tracks do we have", "sql_clean": "<start> select count(*) from track <end>"}, {"text": "What are the gender and occupation of players?", "sql": "SELECT Gender ,  Occupation FROM player", "db_id": "riding_club", "schema": {"tables": [], "columns": []}, "text_clean": "what are the gender and occupation of players", "sql_clean": "<start> select gender , occupation from player <end>"}, {"text": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "what are the themes of competitions that have corresponding host cities with more than 1000 residents", "sql_clean": "<start> select t2.theme from city as t1 join farm_competition as t2 on t1.city_id = t2.host_city_id where t1.population > 1000 <end>"}, {"text": "Return the booking start date and end date for the apartments that have type code \"Duplex\".", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "return the booking start date and end date for the apartments that have type code duplex", "sql_clean": "<start> select t1.booking_start_date , t1.booking_start_date from apartment_bookings as t1 join apartments as t2 on t1.apt_id = t2.apt_id where t2.apt_type_code = duplex <end>"}, {"text": "What are the first and last name of the president of the club \"Bootup Baltimore\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last name of the president of the club bootup baltimore", "sql_clean": "<start> select t3.fname , t3.lname from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t1.clubname = bootup baltimore and t2.position = president <end>"}, {"text": "What are all the different first names of the drivers who are in position as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are all the different first names of the drivers who are in position as standing and won", "sql_clean": "<start> select distinct t1.forename from drivers as t1 join driverstandings as t2 on t1.driverid = t2.driverid where t2.position = 1 and t2.wins = 1 <end>"}, {"text": "Find the names of students who have taken any course in the fall semester of year 2003.", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of students who have taken any course in the fall semester of year 2003", "sql_clean": "<start> select name from student where id in (select id from takes where semester = 'fall' and year = 2003) <end>"}, {"text": "What is the most common interaction type between enzymes and medicine? And how many are there?", "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "db_id": "medicine_enzyme_interaction", "schema": {"tables": [], "columns": []}, "text_clean": "what is the most common interaction type between enzymes and medicine and how many are there", "sql_clean": "<start> select interaction_type , count(*) from medicine_enzyme_interaction group by interaction_type order by count(*) desc limit 1 <end>"}, {"text": "Find the first name of students who is older than 20.", "sql": "SELECT fname FROM student WHERE age  >  20", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first name of students who is older than 20", "sql_clean": "<start> select fname from student where age > 20 <end>"}, {"text": "Return the ids of the two department store chains with the most department stores.", "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "return the ids of the two department store chains with the most department stores", "sql_clean": "<start> select dept_store_chain_id from department_stores group by dept_store_chain_id order by count(*) desc limit 2 <end>"}, {"text": "What is the average and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average and total transaction amount", "sql_clean": "<start> select avg(transaction_amount) , sum(transaction_amount) from financial_transactions <end>"}, {"text": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of all the clubs that have at least a member from the city with city code bal", "sql_clean": "<start> select distinct t1.clubname from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t3.city_code = bal <end>"}, {"text": "Find the names of all patients who have an undergoing treatment and are staying in room 111.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of all patients who have an undergoing treatment and are staying in room 111", "sql_clean": "<start> select distinct t2.name from undergoes as t1 join patient as t2 on t1.patient = t2.ssn join stay as t3 on t1.stay = t3.stayid where t3.room = 111 <end>"}, {"text": "Show the album names, ids and the number of tracks for each album.", "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "show the album names ids and the number of tracks for each album", "sql_clean": "<start> select t1.title , t2.albumid , count(*) from album as t1 join track as t2 on t1.albumid = t2.albumid group by t2.albumid <end>"}, {"text": "Count the number of cities in Australia.", "sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of cities in australia", "sql_clean": "<start> select count(*) from city as t1 join country as t2 on t1.country_id = t2.country_id where t2.country = 'australia' <end>"}, {"text": "What are the names of the technicians that have not been assigned to repair machines?", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "db_id": "machine_repair", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the technicians that have not been assigned to repair machines", "sql_clean": "<start> select name from technician where technician_id not in (select technician_id from repair_assignment) <end>"}, {"text": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of wrestlers and their teams in elimination ordered descending by days held", "sql_clean": "<start> select t2.name , t1.team from elimination as t1 join wrestler as t2 on t1.wrestler_id = t2.wrestler_id order by t2.days_held desc <end>"}, {"text": "Find the names and phone numbers of customers living in California state.", "sql": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'", "db_id": "customer_deliveries", "schema": {"tables": [], "columns": []}, "text_clean": "find the names and phone numbers of customers living in california state", "sql_clean": "<start> select t1.customer_name , t1.customer_phone from customers as t1 join customer_addresses as t2 on t1.customer_id = t2.customer_id join addresses as t3 on t2.address_id = t3.address_id where t3.state_province_county = 'california' <end>"}, {"text": "Count the number of countries.", "sql": "SELECT count(*) FROM county_public_safety", "db_id": "county_public_safety", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of countries", "sql_clean": "<start> select count(*) from county_public_safety <end>"}, {"text": "For each distinct test result, find the number of students who got the result.", "sql": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "for each distinct test result find the number of students who got the result", "sql_clean": "<start> select test_result , count(*) from student_tests_taken group by test_result order by count(*) desc <end>"}, {"text": "What is the description of the type of the company who concluded its contracts most recently?", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "what is the description of the type of the company who concluded its contracts most recently", "sql_clean": "<start> select t1.company_name from third_party_companies as t1 join maintenance_contracts as t2 on t1.company_id = t2.maintenance_contract_company_id join ref_company_types as t3 on t1.company_type_code = t3.company_type_code order by t2.contract_end_date desc limit 1 <end>"}, {"text": "Please show the most common reigns of wrestlers.", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "please show the most common reigns of wrestlers", "sql_clean": "<start> select reign from wrestler group by reign order by count(*) desc limit 1 <end>"}, {"text": "What is the full name of the instructor who has a course named COMPUTER LITERACY?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what is the full name of the instructor who has a course named computer literacy", "sql_clean": "<start> select t2.fname , t2.lname from course as t1 join faculty as t2 on t1.instructor = t2.facid where t1.cname = computer literacy <end>"}, {"text": "Show the name of storms which don't have affected region in record.", "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "show the name of storms which don t have affected region in record", "sql_clean": "<start> select name from storm where storm_id not in (select storm_id from affected_region) <end>"}, {"text": "How many distinct companies are there?", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "how many distinct companies are there", "sql_clean": "<start> select count(distinct company) from entrepreneur <end>"}, {"text": "Return the names and typical buying prices for all products.", "sql": "SELECT product_name ,  typical_buying_price FROM products", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "return the names and typical buying prices for all products", "sql_clean": "<start> select product_name , typical_buying_price from products <end>"}, {"text": "Which organisation type hires most research staff?", "sql": "SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id  =  T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY count(*) DESC LIMIT 1", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "which organisation type hires most research staff", "sql_clean": "<start> select t1.organisation_type from organisations as t1 join research_staff as t2 on t1.organisation_id = t2.employer_organisation_id group by t1.organisation_type order by count(*) desc limit 1 <end>"}, {"text": "Please show the software platforms of devices in descending order of the count.", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "please show the software platforms of devices in descending order of the count", "sql_clean": "<start> select software_platform from device group by software_platform order by count(*) desc <end>"}, {"text": "what are the order id and customer id of the oldest order?", "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "db_id": "tracking_orders", "schema": {"tables": [], "columns": []}, "text_clean": "what are the order id and customer id of the oldest order", "sql_clean": "<start> select order_id , customer_id from orders order by date_order_placed limit 1 <end>"}, {"text": "What is the song with the most vocals?", "sql": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the song with the most vocals", "sql_clean": "<start> select title from vocals as t1 join songs as t2 on t1.songid = t2.songid group by t1.songid order by count(*) desc limit 1 <end>"}, {"text": "How many times did Boston Red Stockings lose in 2009 postseason?", "sql": "SELECT count(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings' AND T1.year = 2009;", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many times did boston red stockings lose in 2009 postseason", "sql_clean": "<start> select count(*) from postseason as t1 join team as t2 on t1.team_id_loser = t2.team_id_br where t2.name = 'boston red stockings' and t1.year = 2009; <end>"}, {"text": "How many tracks are in the AAC audio file media type?", "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many tracks are in the aac audio file media type", "sql_clean": "<start> select count(*) from mediatype as t1 join track as t2 on t1.mediatypeid = t2.mediatypeid where t1.name = aac audio file <end>"}, {"text": "What is the description of the service type which offers both the photo product and the film product?", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "what is the description of the service type which offers both the photo product and the film product", "sql_clean": "<start> select t1.service_type_description from ref_service_types as t1 join services as t2 on t1.service_type_code = t2.service_type_code where t2.product_name = 'photo' intersect select t1.service_type_description from ref_service_types as t1 join services as t2 on t1.service_type_code = t2.service_type_code where t2.product_name = 'film' <end>"}, {"text": "How many members of club \"Bootup Baltimore\" are younger than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many members of club bootup baltimore are younger than 18", "sql_clean": "<start> select count(*) from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t1.clubname = bootup baltimore and t3.age < 18 <end>"}, {"text": "List the top 5 genres by number of tracks. List genres name and total tracks.", "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the top 5 genres by number of tracks list genres name and total tracks", "sql_clean": "<start> select t1.name , count(*) from genres as t1 join tracks as t2 on t2.genre_id = t1.id group by t1.id order by count(*) desc limit 5; <end>"}, {"text": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "db_id": "insurance_fnol", "schema": {"tables": [], "columns": []}, "text_clean": "what are the open and close dates of all the policies used by the customer who have diana in part of their names", "sql_clean": "<start> select t2.date_opened , t2.date_closed from customers as t1 join customers_policies as t2 on t1.customer_id = t2.customer_id where t1.customer_name like %diana% <end>"}, {"text": "How many rooms have a king bed?", "sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many rooms have a king bed", "sql_clean": "<start> select count(*) from rooms where bedtype = king; <end>"}, {"text": "How many different payment methods are there?", "sql": "SELECT count(DISTINCT payment_method) FROM customers", "db_id": "customer_deliveries", "schema": {"tables": [], "columns": []}, "text_clean": "how many different payment methods are there", "sql_clean": "<start> select count(distinct payment_method) from customers <end>"}, {"text": "Find the name and partition id for users who tweeted less than twice.", "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "db_id": "twitter_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and partition id for users who tweeted less than twice", "sql_clean": "<start> select t1.name , t1.partitionid from user_profiles as t1 join tweets as t2 on t1.uid = t2.uid group by t2.uid having count(*) < 2 <end>"}, {"text": "What is the description, code and the corresponding count of each service type?", "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "what is the description code and the corresponding count of each service type", "sql_clean": "<start> select t1.service_type_description , t2.service_type_code , count(*) from ref_service_types as t1 join services as t2 on t1.service_type_code = t2.service_type_code group by t2.service_type_code <end>"}, {"text": "Which apartments have type code \"Flat\"? Give me their apartment numbers.", "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "which apartments have type code flat give me their apartment numbers", "sql_clean": "<start> select apt_number from apartments where apt_type_code = flat <end>"}, {"text": "List the date of perpetrators in descending order of the number of people killed.", "sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "db_id": "perpetrator", "schema": {"tables": [], "columns": []}, "text_clean": "list the date of perpetrators in descending order of the number of people killed", "sql_clean": "<start> select date from perpetrator order by killed desc <end>"}, {"text": "How many students got accepted after the tryout?", "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "how many students got accepted after the tryout", "sql_clean": "<start> select count(*) from tryout where decision = 'yes' <end>"}, {"text": "Find the first names of students with age above 22.", "sql": "SELECT Fname FROM STUDENT WHERE Age  >  22", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the first names of students with age above 22", "sql_clean": "<start> select fname from student where age > 22 <end>"}, {"text": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?", "sql": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids and full names for employees who work in a department that has someone with a first name that contains the letter t", "sql_clean": "<start> select employee_id , first_name , last_name from employees where department_id in ( select department_id from employees where first_name like '%t%' ) <end>"}, {"text": "For each type, what is the average tonnage?", "sql": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE", "db_id": "ship_mission", "schema": {"tables": [], "columns": []}, "text_clean": "for each type what is the average tonnage", "sql_clean": "<start> select type , avg(tonnage) from ship group by type <end>"}, {"text": "Show order ids and the number of products in each order.", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "show order ids and the number of products in each order", "sql_clean": "<start> select order_id , count(distinct product_id) from order_items group by order_id <end>"}, {"text": "What are the ids of the students who either registered or attended a course?", "sql": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of the students who either registered or attended a course", "sql_clean": "<start> select student_id from student_course_registrations union select student_id from student_course_attendance <end>"}, {"text": "Find the number of female students (with F sex) living in Smith Hall", "sql": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of female students with f sex living in smith hall", "sql_clean": "<start> select count(*) from student as t1 join lives_in as t2 on t1.stuid = t2.stuid join dorm as t3 on t3.dormid = t2.dormid where t3.dorm_name = 'smith hall' and t1.sex = 'f' <end>"}, {"text": "List the organisation id with the maximum outcome count, and the count.", "sql": "SELECT T1.organisation_id ,  count(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.organisation_id ORDER BY count(*) DESC LIMIT 1", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "list the organisation id with the maximum outcome count and the count", "sql_clean": "<start> select t1.organisation_id , count(*) from projects as t1 join project_outcomes as t2 on t1.project_id = t2.project_id group by t1.organisation_id order by count(*) desc limit 1 <end>"}, {"text": "What is the name and age of the pilot younger than 30 who has won the most number of times?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "db_id": "aircraft", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name and age of the pilot younger than 30 who has won the most number of times", "sql_clean": "<start> select t1.name , t1.age from pilot as t1 join match as t2 on t1.pilot_id = t2.winning_pilot where t1.age < 30 group by t2.winning_pilot order by count(*) desc limit 1 <end>"}, {"text": "List the names of all the physicians who prescribe Thesisin as medication.", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of all the physicians who prescribe thesisin as medication", "sql_clean": "<start> select distinct t1.name from physician as t1 join prescribes as t2 on t1.employeeid = t2.physician join medication as t3 on t3.code = t2.medication where t3.name = thesisin <end>"}, {"text": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.", "sql": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross", "sql_clean": "<start> select title , director from movie where year <= 2000 order by gross_worldwide desc limit 1 <end>"}, {"text": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?", "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the drivers first names last names and ids for all those that had more than 8 stops or participated in more than 5 races", "sql_clean": "<start> select t1.forename , t1.surname , t1.driverid from drivers as t1 join pitstops as t2 on t1.driverid = t2.driverid group by t1.driverid having count(*) > 8 union select t1.forename , t1.surname , t1.driverid from drivers as t1 join results as t2 on t1.driverid = t2.driverid group by t1.driverid having count(*) > 5 <end>"}, {"text": "Which college has any student who is a goalie and succeeded in the tryout.", "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "which college has any student who is a goalie and succeeded in the tryout", "sql_clean": "<start> select cname from tryout where decision = 'yes' and ppos = 'goalie' <end>"}, {"text": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?", "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the last name of the professor whose office is located in dre 102 and when were they hired", "sql_clean": "<start> select t1.emp_lname , t1.emp_hiredate from employee as t1 join professor as t2 on t1.emp_num = t2.emp_num where t2.prof_office = 'dre 102' <end>"}, {"text": "Which address do not have any member with the black membership card?", "sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'", "db_id": "coffee_shop", "schema": {"tables": [], "columns": []}, "text_clean": "which address do not have any member with the black membership card", "sql_clean": "<start> select address from member except select address from member where membership_card = 'black' <end>"}, {"text": "Who is the founders of companies whose first letter is S?", "sql": "SELECT founder FROM manufacturers WHERE name LIKE 'S%'", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "who is the founders of companies whose first letter is s", "sql_clean": "<start> select founder from manufacturers where name like 's%' <end>"}, {"text": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all the female members of club bootup baltimore show the first name and last name", "sql_clean": "<start> select t3.fname , t3.lname from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t1.clubname = bootup baltimore and t3.sex = f <end>"}, {"text": "Find the total number of students in each department.", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the total number of students in each department", "sql_clean": "<start> select count(*) , dept_name from student group by dept_name <end>"}, {"text": "How films are produced by each studio?", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "how films are produced by each studio", "sql_clean": "<start> select studio , count(*) from film group by studio <end>"}, {"text": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?", "sql": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id", "db_id": "local_govt_mdm", "schema": {"tables": [], "columns": []}, "text_clean": "wat is the tax source system code and master customer id of the taxes related to each parking fine id", "sql_clean": "<start> select t1.source_system_code , t1.master_customer_id , t2.council_tax_id from cmi_cross_references as t1 join parking_fines as t2 on t1.cmi_cross_ref_id = t2.cmi_cross_ref_id <end>"}, {"text": "What are the names and distances for all airplanes?", "sql": "SELECT name ,  distance FROM Aircraft", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and distances for all airplanes", "sql_clean": "<start> select name , distance from aircraft <end>"}, {"text": "Which engineer has visited the most times? Show the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "which engineer has visited the most times show the engineer id first name and last name", "sql_clean": "<start> select t1.engineer_id , t1.first_name , t1.last_name from maintenance_engineers as t1 join engineer_visits as t2 group by t1.engineer_id order by count(*) desc limit 1 <end>"}, {"text": "List the names of all routes in alphabetic order.", "sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name", "db_id": "customer_deliveries", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of all routes in alphabetic order", "sql_clean": "<start> select route_name from delivery_routes order by route_name <end>"}, {"text": "How many drivers did not participate in the races held in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many drivers did not participate in the races held in 2009", "sql_clean": "<start> select count(distinct driverid) from results where raceid not in( select raceid from races where year != 2009 ) <end>"}, {"text": "List the id and type of each thing, and the details of the organization that owns it.", "sql": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id", "db_id": "local_govt_and_lot", "schema": {"tables": [], "columns": []}, "text_clean": "list the id and type of each thing and the details of the organization that owns it", "sql_clean": "<start> select t1.thing_id , t1.type_of_thing_code , t2.organization_details from things as t1 join organizations as t2 on t1.organization_id = t2.organization_id <end>"}, {"text": "What is the customer first, last name and id with least number of accounts.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what is the customer first last name and id with least number of accounts", "sql_clean": "<start> select t2.customer_first_name , t2.customer_last_name , t1.customer_id from accounts as t1 join customers as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by count(*) asc limit 1 <end>"}, {"text": "List the dates and vote percents of elections.", "sql": "SELECT Date ,  Vote_Percent FROM election", "db_id": "election_representative", "schema": {"tables": [], "columns": []}, "text_clean": "list the dates and vote percents of elections", "sql_clean": "<start> select date , vote_percent from election <end>"}, {"text": "Find the names of all modern rooms with a base price below $160 and two beds.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of all modern rooms with a base price below 160 and two beds", "sql_clean": "<start> select roomname from rooms where baseprice < 160 and beds = 2 and decor = 'modern'; <end>"}, {"text": "Tell me the price ranges for all the hotels.", "sql": "SELECT price_range FROM HOTELS", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "tell me the price ranges for all the hotels", "sql_clean": "<start> select price_range from hotels <end>"}, {"text": "What are the id of students who registered course 301?", "sql": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "what are the id of students who registered course 301", "sql_clean": "<start> select student_id from student_course_attendance where course_id = 301 <end>"}, {"text": "Show all majors.", "sql": "SELECT DISTINCT Major FROM Student", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "show all majors", "sql_clean": "<start> select distinct major from student <end>"}, {"text": "Who is the oldest person whose job is student?", "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "who is the oldest person whose job is student", "sql_clean": "<start> select name from person where job = 'student' and age = (select max(age) from person where job = 'student' ) <end>"}, {"text": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.", "sql": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "who is performing in the back stage position for the song badlands show the first name and the last name", "sql_clean": "<start> select t2.firstname , t2.lastname from performance as t1 join band as t2 on t1.bandmate = t2.id join songs as t3 on t3.songid = t1.songid where t3.title = badlands and t1.stageposition = back <end>"}, {"text": "How many Bangladeshi artists are listed?", "sql": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many bangladeshi artists are listed", "sql_clean": "<start> select count(*) from artist where country = bangladesh <end>"}, {"text": "How many distinct claim outcome codes are there?", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "how many distinct claim outcome codes are there", "sql_clean": "<start> select count(distinct claim_outcome_code) from claims_processing <end>"}, {"text": "What is the name of the school with smallest enrollment size per state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the school with smallest enrollment size per state", "sql_clean": "<start> select cname , state , min(enr) from college group by state <end>"}, {"text": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"", "db_id": "customer_complaints", "schema": {"tables": [], "columns": []}, "text_clean": "what are lines 1 and 2 of the addressed of the customer with the email vbogisich example org", "sql_clean": "<start> select address_line_1 , address_line_2 from customers where email_address = vbogisich@example.org <end>"}, {"text": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all the films longer than 100 minutes or rated pg except those who cost more than 200 for replacement list the titles", "sql_clean": "<start> select title from film where length > 100 or rating = 'pg' except select title from film where replacement_cost > 200 <end>"}, {"text": "List the names of members who did not attend any performance.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM member_attendance)", "db_id": "performance_attendance", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of members who did not attend any performance", "sql_clean": "<start> select name from member where member_id not in (select member_id from member_attendance) <end>"}, {"text": "For each zip code, return how many times max wind speed reached 25?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "for each zip code return how many times max wind speed reached 25", "sql_clean": "<start> select zip_code , count(*) from weather where max_wind_speed_mph >= 25 group by zip_code <end>"}, {"text": "What is the name and distance for aircraft with id 12?", "sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name and distance for aircraft with id 12", "sql_clean": "<start> select name , distance from aircraft where aid = 12 <end>"}, {"text": "Which movies have 'Deleted Scenes' as a substring in the special feature?", "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "which movies have deleted scenes as a substring in the special feature", "sql_clean": "<start> select title from film where special_features like '%deleted scenes%' <end>"}, {"text": "Show all storm names except for those with at least two affected regions.", "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "show all storm names except for those with at least two affected regions", "sql_clean": "<start> select name from storm except select t1.name from storm as t1 join affected_region as t2 on t1.storm_id = t2.storm_id group by t1.storm_id having count(*) >= 2 <end>"}, {"text": "Return the most common full name among all actors.", "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "return the most common full name among all actors", "sql_clean": "<start> select first_name , last_name from actor group by first_name , last_name order by count(*) desc limit 1 <end>"}, {"text": "Find the distinct years when the governor was named \"Eliot Spitzer\".", "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"", "db_id": "election", "schema": {"tables": [], "columns": []}, "text_clean": "find the distinct years when the governor was named eliot spitzer", "sql_clean": "<start> select distinct year from party where governor = eliot spitzer <end>"}, {"text": "What is the number of departments in Division \"AS\"?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what is the number of departments in division as", "sql_clean": "<start> select count(*) from department where division = as <end>"}, {"text": "Show the names of journalists and the dates of the events they reported.", "sql": "SELECT T3.Name ,  T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID  =  T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID  =  T3.journalist_ID", "db_id": "news_report", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of journalists and the dates of the events they reported", "sql_clean": "<start> select t3.name , t2.date from news_report as t1 join event as t2 on t1.event_id = t2.event_id join journalist as t3 on t1.journalist_id = t3.journalist_id <end>"}, {"text": "Which gender makes up the majority of the staff?", "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "which gender makes up the majority of the staff", "sql_clean": "<start> select gender from staff group by gender order by count(*) desc limit 1 <end>"}, {"text": "Which teams had more than 3 eliminations?", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "which teams had more than 3 eliminations", "sql_clean": "<start> select team from elimination group by team having count(*) > 3 <end>"}, {"text": "What is the transaction type that has processed the greatest total amount in transactions?", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what is the transaction type that has processed the greatest total amount in transactions", "sql_clean": "<start> select transaction_type from financial_transactions group by transaction_type order by sum(transaction_amount) desc limit 1 <end>"}, {"text": "Find the phone number of all the customers and staff.", "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "db_id": "customer_complaints", "schema": {"tables": [], "columns": []}, "text_clean": "find the phone number of all the customers and staff", "sql_clean": "<start> select phone_number from customers union select phone_number from staff <end>"}, {"text": "What are the ids of the candidates that have an outcome code of Pass?", "sql": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of the candidates that have an outcome code of pass", "sql_clean": "<start> select candidate_id from candidate_assessments where asessment_outcome_code = pass <end>"}, {"text": "Show all the distinct product names with price higher than the average.", "sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "show all the distinct product names with price higher than the average", "sql_clean": "<start> select distinct product_name from products where product_price > (select avg(product_price) from products) <end>"}, {"text": "What are the first and last names of all the female students who have president votes?", "sql": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last names of all the female students who have president votes", "sql_clean": "<start> select distinct t1.fname , t1.lname from student as t1 join voting_record as t2 on t1.stuid = t2.president_vote where t1.sex = f <end>"}, {"text": "Find the names of all reviewers who rated Gone with the Wind.", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of all reviewers who rated gone with the wind", "sql_clean": "<start> select distinct t3.name from rating as t1 join movie as t2 on t1.mid = t2.mid join reviewer as t3 on t1.rid = t3.rid where t2.title = 'gone with the wind' <end>"}, {"text": "Which 3 wineries produce the most wines made from white grapes?", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "which 3 wineries produce the most wines made from white grapes", "sql_clean": "<start> select t2.winery from grapes as t1 join wine as t2 on t1.grape = t2.grape where t1.color = white group by t2.winery order by count(*) desc limit 3 <end>"}, {"text": "Which school has the fewest professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "which school has the fewest professors", "sql_clean": "<start> select t1.school_code from department as t1 join professor as t2 on t1.dept_code = t2.dept_code group by t1.school_code order by count(*) limit 1 <end>"}, {"text": "Who directed Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "who directed avatar", "sql_clean": "<start> select director from movie where title = 'avatar' <end>"}, {"text": "Find the name and price of the product that has been ordered the greatest number of times.", "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1", "db_id": "customer_deliveries", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and price of the product that has been ordered the greatest number of times", "sql_clean": "<start> select t1.product_name , t1.product_price from products as t1 join regular_order_products as t2 on t1.product_id = t2.product_id group by t2.product_id order by count(*) desc limit 1 <end>"}, {"text": "What are the names and year of joining for artists that do not have the country \"United States\"?", "sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and year of joining for artists that do not have the country united states", "sql_clean": "<start> select name , year_join from artist where country != 'united states' <end>"}, {"text": "Return the address of customer 10.", "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "return the address of customer 10", "sql_clean": "<start> select t1.address_details from addresses as t1 join customer_addresses as t2 on t1.address_id = t2.address_id where t2.customer_id = 10 <end>"}, {"text": "Count the number of different colleges that players who play for Columbus Crew are from.", "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of different colleges that players who play for columbus crew are from", "sql_clean": "<start> select count(distinct t1.college) from match_season as t1 join team as t2 on t1.team = t2.team_id where t2.name = columbus crew <end>"}, {"text": "List document type codes and the number of documents in each code.", "sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "list document type codes and the number of documents in each code", "sql_clean": "<start> select document_type_code , count(*) from documents group by document_type_code <end>"}, {"text": "Show the names of pilots and the number of records they have.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name", "db_id": "pilot_record", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of pilots and the number of records they have", "sql_clean": "<start> select t2.pilot_name , count(*) from pilot_record as t1 join pilot as t2 on t1.pilot_id = t2.pilot_id group by t2.pilot_name <end>"}, {"text": "How many employees have a first name of Ludie?", "sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "how many employees have a first name of ludie", "sql_clean": "<start> select count(*) from staff where first_name = ludie; <end>"}, {"text": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top", "sql_clean": "<start> select t1.famous_title from artist as t1 join volume as t2 on t1.artist_id = t2.artist_id where t2.weeks_on_top > 2 intersect select t1.famous_title from artist as t1 join volume as t2 on t1.artist_id = t2.artist_id where t2.weeks_on_top < 2 <end>"}, {"text": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".", "sql": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'", "db_id": "protein_institute", "schema": {"tables": [], "columns": []}, "text_clean": "show the names and locations of institutions that are founded after 1990 and have the type private", "sql_clean": "<start> select institution , location from institution where founded > 1990 and type = 'private' <end>"}, {"text": "Show all director names who have a movie in both year 1999 and 2000.", "sql": "SELECT director FROM movie WHERE YEAR  =  2000 INTERSECT SELECT director FROM movie WHERE YEAR  =  1999", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "show all director names who have a movie in both year 1999 and 2000", "sql_clean": "<start> select director from movie where year = 2000 intersect select director from movie where year = 1999 <end>"}, {"text": "Show the minimum, average, maximum order quantity of all invoices.", "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "show the minimum average maximum order quantity of all invoices", "sql_clean": "<start> select min(order_quantity) , avg(order_quantity) , max(order_quantity) from invoices <end>"}, {"text": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "in zip code 94107 on which day neither fog nor rain was not observed", "sql_clean": "<start> select date from weather where zip_code = 94107 and events != fog and events != rain <end>"}, {"text": "List the names of all distinct medications, ordered in an alphabetical order.", "sql": "SELECT DISTINCT name FROM medication ORDER BY name", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of all distinct medications ordered in an alphabetical order", "sql_clean": "<start> select distinct name from medication order by name <end>"}, {"text": "Find the first name of students who are living in the dorm that has most number of amenities.", "sql": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first name of students who are living in the dorm that has most number of amenities", "sql_clean": "<start> select t1.fname from student as t1 join lives_in as t2 on t1.stuid = t2.stuid where t2.dormid in (select t2.dormid from dorm as t3 join has_amenity as t4 on t3.dormid = t4.dormid join dorm_amenity as t5 on t4.amenid = t5.amenid group by t3.dormid order by count(*) desc limit 1) <end>"}, {"text": "What is the average hours across all projects?", "sql": "SELECT avg(hours) FROM projects", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average hours across all projects", "sql_clean": "<start> select avg(hours) from projects <end>"}, {"text": "Count the number of distinct claim outcome codes.", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of distinct claim outcome codes", "sql_clean": "<start> select count(distinct claim_outcome_code) from claims_processing <end>"}, {"text": "How many department stores does the store chain South have?", "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "how many department stores does the store chain south have", "sql_clean": "<start> select count(*) from department_stores as t1 join department_store_chain as t2 on t1.dept_store_chain_id = t2.dept_store_chain_id where t2.dept_store_chain_name = south <end>"}, {"text": "Show the id and builder of the railway that are associated with the most trains.", "sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "railway", "schema": {"tables": [], "columns": []}, "text_clean": "show the id and builder of the railway that are associated with the most trains", "sql_clean": "<start> select t2.railway_id , t1.builder from railway as t1 join train as t2 on t1.railway_id = t2.railway_id group by t2.railway_id order by count(*) desc limit 1 <end>"}, {"text": "Find all the locations whose names contain the word \"film\".", "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "find all the locations whose names contain the word film", "sql_clean": "<start> select location_name from locations where location_name like %film% <end>"}, {"text": "List countries that have more than one swimmer.", "sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1", "db_id": "swimming", "schema": {"tables": [], "columns": []}, "text_clean": "list countries that have more than one swimmer", "sql_clean": "<start> select nationality , count(*) from swimmer group by nationality having count(*) > 1 <end>"}, {"text": "What are the titles of courses that are offered in more than one department?", "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the titles of courses that are offered in more than one department", "sql_clean": "<start> select title from course group by title having count(*) > 1 <end>"}, {"text": "Count the number of documents with the type code BK that correspond to each product id.", "sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of documents with the type code bk that correspond to each product id", "sql_clean": "<start> select count(*) , project_id from documents where document_type_code = bk group by project_id <end>"}, {"text": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".", "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "find the contact channel code that was used by the customer named tillman ernser", "sql_clean": "<start> select distinct channel_code from customers as t1 join customer_contact_channels as t2 on t1.customer_id = t2.customer_id where t1.customer_name = tillman ernser <end>"}, {"text": "Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.", "sql": "SELECT T1.subject_id ,  T2.subject_name ,  COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*) ASC", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "find the subject id name of subject and the corresponding number of courses for each subject and sort by the course count in ascending order", "sql_clean": "<start> select t1.subject_id , t2.subject_name , count(*) from courses as t1 join subjects as t2 on t1.subject_id = t2.subject_id group by t1.subject_id order by count(*) asc <end>"}, {"text": "Which apartment type code appears the most often?", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "which apartment type code appears the most often", "sql_clean": "<start> select apt_type_code from apartments group by apt_type_code order by count(*) desc limit 1 <end>"}, {"text": "Give me the product type, name and price for all the products supplied by supplier id 3.", "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "give me the product type name and price for all the products supplied by supplier id 3", "sql_clean": "<start> select t2.product_type_code , t2.product_name , t2.product_price from product_suppliers as t1 join products as t2 on t1.product_id = t2.product_id where t1.supplier_id = 3 <end>"}, {"text": "Return the the names of the drama workshop groups that are located in Feliciaberg city.", "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "return the the names of the drama workshop groups that are located in feliciaberg city", "sql_clean": "<start> select t2.store_name from addresses as t1 join drama_workshop_groups as t2 on t1.address_id = t2.address_id where t1.city_town = feliciaberg <end>"}, {"text": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the grapes appelations and wines with scores above 93 sorted by name", "sql_clean": "<start> select grape , appelation , name from wine where score > 93 order by name <end>"}, {"text": "List the builders of railways in ascending alphabetical order.", "sql": "SELECT Builder FROM railway ORDER BY Builder ASC", "db_id": "railway", "schema": {"tables": [], "columns": []}, "text_clean": "list the builders of railways in ascending alphabetical order", "sql_clean": "<start> select builder from railway order by builder asc <end>"}, {"text": "Show the names of roller coasters and names of country they are in.", "sql": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID", "db_id": "roller_coaster", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of roller coasters and names of country they are in", "sql_clean": "<start> select t2.name , t1.name from country as t1 join roller_coaster as t2 on t1.country_id = t2.country_id <end>"}, {"text": "Return the names of all regions other than Denmark.", "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "return the names of all regions other than denmark", "sql_clean": "<start> select region_name from region where region_name != 'denmark' <end>"}, {"text": "Find the average age and experience working length of journalists working on different role type.", "sql": "SELECT avg(t1.age) ,  avg(Years_working) ,  t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id  =  t2.journalist_id GROUP BY t2.work_type", "db_id": "news_report", "schema": {"tables": [], "columns": []}, "text_clean": "find the average age and experience working length of journalists working on different role type", "sql_clean": "<start> select avg(t1.age) , avg(years_working) , t2.work_type from journalist as t1 join news_report as t2 on t1.journalist_id = t2.journalist_id group by t2.work_type <end>"}, {"text": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the different customers who have taken out a loan ordered by the total amount that they have taken", "sql_clean": "<start> select t1.cust_name from customer as t1 join loan as t2 on t1.cust_id = t2.cust_id group by t1.cust_name order by sum(t2.amount) <end>"}, {"text": "What are the different regions of clubs in ascending alphabetical order?", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different regions of clubs in ascending alphabetical order", "sql_clean": "<start> select distinct region from club order by region asc <end>"}, {"text": "Show the unique first names, last names, and phone numbers for all customers with any account.", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "show the unique first names last names and phone numbers for all customers with any account", "sql_clean": "<start> select distinct t1.customer_first_name , t1.customer_last_name , t1.phone_number from customers as t1 join accounts as t2 on t1.customer_id = t2.customer_id <end>"}, {"text": "What campuses are located in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "db_id": "csu_1", "schema": {"tables": [], "columns": []}, "text_clean": "what campuses are located in los angeles county and opened after 1950", "sql_clean": "<start> select campus from campuses where county = los angeles and year > 1950 <end>"}, {"text": "What is the total rating of channel for each channel owner?", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total rating of channel for each channel owner", "sql_clean": "<start> select sum(rating_in_percent) , owner from channel group by owner <end>"}, {"text": "What are the ids of the problems which are reported after 1978-06-26?", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of the problems which are reported after 1978 06 26", "sql_clean": "<start> select problem_id from problems where date_problem_reported > 1978-06-26 <end>"}, {"text": "Which states have more than 2 parks?", "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "which states have more than 2 parks", "sql_clean": "<start> select state from park group by state having count(*) > 2; <end>"}, {"text": "Which patient is undergoing the most recent treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "which patient is undergoing the most recent treatment", "sql_clean": "<start> select patient from undergoes order by dateundergoes limit 1 <end>"}, {"text": "Return the founded year for the school with the largest enrollment.", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "db_id": "university_basketball", "schema": {"tables": [], "columns": []}, "text_clean": "return the founded year for the school with the largest enrollment", "sql_clean": "<start> select founded from university order by enrollment desc limit 1 <end>"}, {"text": "What are the total enrollments of universities of each affiliation type?", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "db_id": "university_basketball", "schema": {"tables": [], "columns": []}, "text_clean": "what are the total enrollments of universities of each affiliation type", "sql_clean": "<start> select sum(enrollment) , affiliation from university group by affiliation <end>"}, {"text": "Show the id and name of the employee with maximum salary.", "sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "show the id and name of the employee with maximum salary", "sql_clean": "<start> select eid , name from employee order by salary desc limit 1 <end>"}, {"text": "How many employees live in Georgia?", "sql": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "how many employees live in georgia", "sql_clean": "<start> select count(*) from addresses where state_province_county = georgia; <end>"}, {"text": "What is the total number of students enrolled in schools without any goalies?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total number of students enrolled in schools without any goalies", "sql_clean": "<start> select sum(enr) from college where cname not in (select cname from tryout where ppos = goalie) <end>"}, {"text": "Show all product sizes.", "sql": "SELECT DISTINCT product_size FROM Products", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "show all product sizes", "sql_clean": "<start> select distinct product_size from products <end>"}, {"text": "What are the name and level of catalog structure with level number between 5 and 10", "sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "what are the name and level of catalog structure with level number between 5 and 10", "sql_clean": "<start> select catalog_level_name , catalog_level_number from catalog_structure where catalog_level_number between 5 and 10 <end>"}, {"text": "What is all the information about the basketball match?", "sql": "SELECT * FROM basketball_match", "db_id": "university_basketball", "schema": {"tables": [], "columns": []}, "text_clean": "what is all the information about the basketball match", "sql_clean": "<start> select * from basketball_match <end>"}, {"text": "What are the details and id of the project with the most outcomes?", "sql": "SELECT T1.project_details ,  T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id ORDER BY count(*) DESC LIMIT 1", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what are the details and id of the project with the most outcomes", "sql_clean": "<start> select t1.project_details , t1.project_id from projects as t1 join project_outcomes as t2 on t1.project_id = t2.project_id group by t1.project_id order by count(*) desc limit 1 <end>"}, {"text": "How many captains are in each rank?", "sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many captains are in each rank", "sql_clean": "<start> select count(*) , rank from captain group by rank <end>"}, {"text": "How many elections are there?", "sql": "SELECT count(*) FROM election", "db_id": "election_representative", "schema": {"tables": [], "columns": []}, "text_clean": "how many elections are there", "sql_clean": "<start> select count(*) from election <end>"}, {"text": "Show the names of players and names of their coaches.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID", "db_id": "riding_club", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of players and names of their coaches", "sql_clean": "<start> select t3.player_name , t2.coach_name from player_coach as t1 join coach as t2 on t1.coach_id = t2.coach_id join player as t3 on t1.player_id = t3.player_id <end>"}, {"text": "Show the names of members and the location of the performances they attended.", "sql": "SELECT T2.Name ,  T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID  =  T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID  =  T3.Performance_ID", "db_id": "performance_attendance", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of members and the location of the performances they attended", "sql_clean": "<start> select t2.name , t3.location from member_attendance as t1 join member as t2 on t1.member_id = t2.member_id join performance as t3 on t1.performance_id = t3.performance_id <end>"}, {"text": "How many patents outcomes were listed for all the projects?", "sql": "SELECT count(*) FROM Project_outcomes WHERE outcome_code  =  'Patent'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "how many patents outcomes were listed for all the projects", "sql_clean": "<start> select count(*) from project_outcomes where outcome_code = 'patent' <end>"}, {"text": "Count the number of colors.", "sql": "SELECT count(*) FROM ref_colors", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of colors", "sql_clean": "<start> select count(*) from ref_colors <end>"}, {"text": "How many wrestlers are there?", "sql": "SELECT count(*) FROM wrestler", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "how many wrestlers are there", "sql_clean": "<start> select count(*) from wrestler <end>"}, {"text": "Find the wineries that have at least four wines.", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the wineries that have at least four wines", "sql_clean": "<start> select winery from wine group by winery having count(*) >= 4 <end>"}, {"text": "Find all students taught by MARROTTE KIRK. Output first and last names of students.", "sql": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all students taught by marrotte kirk output first and last names of students", "sql_clean": "<start> select t1.firstname , t1.lastname from list as t1 join teachers as t2 on t1.classroom = t2.classroom where t2.firstname = marrotte and t2.lastname = kirk <end>"}, {"text": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "who is the president of the club bootup baltimore give me the first and last name", "sql_clean": "<start> select t3.fname , t3.lname from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t1.clubname = bootup baltimore and t2.position = president <end>"}, {"text": "What is all the customer information for customers in NY state?", "sql": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is all the customer information for customers in ny state", "sql_clean": "<start> select * from customer where state = ny <end>"}, {"text": "What are the ids of all students who have attended at least one course?", "sql": "SELECT student_id FROM student_course_attendance", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of all students who have attended at least one course", "sql_clean": "<start> select student_id from student_course_attendance <end>"}, {"text": "What is the title of the course with Differential Geometry as a prerequisite?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the title of the course with differential geometry as a prerequisite", "sql_clean": "<start> select title from course where course_id in (select t1.course_id from prereq as t1 join course as t2 on t1.prereq_id = t2.course_id where t2.title = 'differential geometry') <end>"}, {"text": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.", "sql": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all first grade students who are not taught by otha moyer report their first and last names", "sql_clean": "<start> select distinct t1.firstname , t1.lastname from list as t1 join teachers as t2 on t1.classroom = t2.classroom where t1.grade = 1 except select t1.firstname , t1.lastname from list as t1 join teachers as t2 on t1.classroom = t2.classroom where t2.firstname = otha and t2.lastname = moyer <end>"}, {"text": "What are the maximum and minimum number of silver medals for clubs.", "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "db_id": "sports_competition", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum and minimum number of silver medals for clubs", "sql_clean": "<start> select max(silver) , min(silver) from club_rank <end>"}, {"text": "find the name of all departments that do actually have one or more employees assigned to them.", "sql": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of all departments that do actually have one or more employees assigned to them", "sql_clean": "<start> select distinct t2.department_name from employees as t1 join departments as t2 on t1.department_id = t2.department_id <end>"}, {"text": "Show the names of buildings except for those having an institution founded in 2003.", "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003", "db_id": "protein_institute", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of buildings except for those having an institution founded in 2003", "sql_clean": "<start> select name from building except select t1.name from building as t1 join institution as t2 on t1.building_id = t2.building_id where t2.founded = 2003 <end>"}, {"text": "Return the names of wrestlers with fewer than 100 days held.", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "return the names of wrestlers with fewer than 100 days held", "sql_clean": "<start> select name from wrestler where days_held < 100 <end>"}, {"text": "What is the reviewer id of Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the reviewer id of daniel lewis", "sql_clean": "<start> select rid from reviewer where name = daniel lewis <end>"}, {"text": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.", "sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005", "db_id": "pilot_record", "schema": {"tables": [], "columns": []}, "text_clean": "show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000", "sql_clean": "<start> select position from pilot where join_year < 2000 intersect select position from pilot where join_year > 2005 <end>"}, {"text": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the minimum salary for the departments whose average salary is above the average payment of all instructors", "sql_clean": "<start> select min(salary) , dept_name from instructor group by dept_name having avg(salary) > (select avg(salary) from instructor) <end>"}, {"text": "How many parks does Atlanta city have?", "sql": "SELECT count(*) FROM park WHERE city = 'Atlanta';", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many parks does atlanta city have", "sql_clean": "<start> select count(*) from park where city = 'atlanta'; <end>"}, {"text": "Provide the last name of the youngest student.", "sql": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "provide the last name of the youngest student", "sql_clean": "<start> select lname from student where age = (select min(age) from student) <end>"}, {"text": "What is the most common role for the staff?", "sql": "SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what is the most common role for the staff", "sql_clean": "<start> select role_code from project_staff group by role_code order by count(*) desc limit 1 <end>"}, {"text": "In how many different cities are banks located?", "sql": "SELECT count(DISTINCT city) FROM bank", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "in how many different cities are banks located", "sql_clean": "<start> select count(distinct city) from bank <end>"}, {"text": "What is the average age of the members of the club \"Bootup Baltimore\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average age of the members of the club bootup baltimore", "sql_clean": "<start> select avg(t3.age) from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t1.clubname = bootup baltimore <end>"}, {"text": "How many tests have result \"Fail\"?", "sql": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "how many tests have result fail", "sql_clean": "<start> select count(*) from student_tests_taken where test_result = fail <end>"}, {"text": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "db_id": "insurance_fnol", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of customers who have used either the service close a policy or the service upgrade a policy", "sql_clean": "<start> select t1.customer_name from customers as t1 join first_notification_of_loss as t2 on t1.customer_id = t2.customer_id join services as t3 on t2.service_id = t3.service_id where t3.service_name = close a policy or t3.service_name = upgrade a policy <end>"}, {"text": "Give me the average and minimum price (in Euro) of the products.", "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "give me the average and minimum price in euro of the products", "sql_clean": "<start> select avg(price_in_euros) , min(price_in_euros) from catalog_contents <end>"}, {"text": "What are the distinct nominees of the musicals with the award that is not \"Tony Award\"?", "sql": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\"", "db_id": "musical", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct nominees of the musicals with the award that is not tony award", "sql_clean": "<start> select distinct nominee from musical where award != tony award <end>"}, {"text": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "find the the names of the tourist attractions that the tourist named alison visited but rosalind did not visit", "sql_clean": "<start> select t1.name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1.tourist_attraction_id = t3.tourist_attraction_id and t2.tourist_id = t3.tourist_id where t2.tourist_details = alison except select t1.name from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1.tourist_attraction_id = t3.tourist_attraction_id and t2.tourist_id = t3.tourist_id where t2.tourist_details = rosalind <end>"}, {"text": "What are the names of people in ascending order of weight?", "sql": "SELECT Name FROM People ORDER BY Weight ASC", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of people in ascending order of weight", "sql_clean": "<start> select name from people order by weight asc <end>"}, {"text": "Show all party names and the number of members in each party.", "sql": "SELECT T2.party_name ,  count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id", "db_id": "party_people", "schema": {"tables": [], "columns": []}, "text_clean": "show all party names and the number of members in each party", "sql_clean": "<start> select t2.party_name , count(*) from member as t1 join party as t2 on t1.party_id = t2.party_id group by t1.party_id <end>"}, {"text": "Show the location code, the starting date and ending data in that location for all the documents.", "sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "show the location code the starting date and ending data in that location for all the documents", "sql_clean": "<start> select location_code , date_in_location_from , date_in_locaton_to from document_locations <end>"}, {"text": "What are the full names of customers with the account name 900?", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "what are the full names of customers with the account name 900", "sql_clean": "<start> select t2.customer_first_name , t2.customer_last_name from accounts as t1 join customers as t2 on t1.customer_id = t2.customer_id where t1.account_name = 900 <end>"}, {"text": "What is the number of distinct publication dates?", "sql": "SELECT COUNT (DISTINCT Publication_Date) FROM publication", "db_id": "book_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the number of distinct publication dates", "sql_clean": "<start> select count (distinct publication_date) from publication <end>"}, {"text": "What are the names of representatives and the dates of elections they participated in.", "sql": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID", "db_id": "election_representative", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of representatives and the dates of elections they participated in", "sql_clean": "<start> select t2.name , t1.date from election as t1 join representative as t2 on t1.representative_id = t2.representative_id <end>"}, {"text": "What are the dates of ceremony and results for each music festival?", "sql": "SELECT Date_of_ceremony ,  RESULT FROM music_festival", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "what are the dates of ceremony and results for each music festival", "sql_clean": "<start> select date_of_ceremony , result from music_festival <end>"}, {"text": "Which employees do not destroy any document? Find their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "which employees do not destroy any document find their employee ids", "sql_clean": "<start> select employee_id from employees except select destroyed_by_employee_id from documents_to_be_destroyed <end>"}, {"text": "Who are the players from UCLA?", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "who are the players from ucla", "sql_clean": "<start> select player from match_season where college = ucla <end>"}, {"text": "What are the different types of vocals?", "sql": "SELECT DISTINCT TYPE FROM vocals", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different types of vocals", "sql_clean": "<start> select distinct type from vocals <end>"}, {"text": "Find the total population of the districts where the area is bigger than the average city area.", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "db_id": "store_product", "schema": {"tables": [], "columns": []}, "text_clean": "find the total population of the districts where the area is bigger than the average city area", "sql_clean": "<start> select sum(city_population) from district where city_area > (select avg(city_area) from district) <end>"}, {"text": "Find distinct cities of addresses of people?", "sql": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "find distinct cities of addresses of people", "sql_clean": "<start> select distinct t1.city from addresses as t1 join people_addresses as t2 on t1.address_id = t2.address_id <end>"}, {"text": "Find the name of the organization that has published the largest number of papers.", "sql": "SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid  =  t2.instid JOIN papers AS t3 ON t2.paperid  =  t3.paperid GROUP BY t1.name ORDER BY count(*) DESC LIMIT 1", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the organization that has published the largest number of papers", "sql_clean": "<start> select t1.name from inst as t1 join authorship as t2 on t1.instid = t2.instid join papers as t3 on t2.paperid = t3.paperid group by t1.name order by count(*) desc limit 1 <end>"}, {"text": "Find the entry name of the catalog with the highest price (in USD).", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "find the entry name of the catalog with the highest price in usd", "sql_clean": "<start> select catalog_entry_name from catalog_contents order by price_in_dollars desc limit 1 <end>"}, {"text": "What are the personal names used both by some course authors and some students?", "sql": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "what are the personal names used both by some course authors and some students", "sql_clean": "<start> select personal_name from course_authors_and_tutors intersect select personal_name from students <end>"}, {"text": "What are the dates when customers with ids between 10 and 20 became customers?", "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "what are the dates when customers with ids between 10 and 20 became customers", "sql_clean": "<start> select date_became_customer from customers where customer_id between 10 and 20 <end>"}, {"text": "When are the birthdays of customer who are classified as 'Good Customer' status?", "sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "when are the birthdays of customer who are classified as good customer status", "sql_clean": "<start> select date_of_birth from customers where customer_status_code = 'good customer' <end>"}, {"text": "How many unique labels are there for albums?", "sql": "SELECT count(DISTINCT label) FROM albums", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "how many unique labels are there for albums", "sql_clean": "<start> select count(distinct label) from albums <end>"}, {"text": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "db_id": "medicine_enzyme_interaction", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct name location and products of the enzymes which has any inhibitor interaction", "sql_clean": "<start> select distinct t1.name , t1.location , t1.product from enzyme as t1 join medicine_enzyme_interaction as t2 on t2.enzyme_id = t1.id where t2.interaction_type = 'inhibitor' <end>"}, {"text": "Show all student IDs with the number of sports and total number of games played", "sql": "SELECT StuID ,  count(*) ,  sum(gamesplayed) FROM Sportsinfo GROUP BY StuID", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "show all student ids with the number of sports and total number of games played", "sql_clean": "<start> select stuid , count(*) , sum(gamesplayed) from sportsinfo group by stuid <end>"}, {"text": "What are the names of all songs produced by the artist with the first name \"Marianne\"?", "sql": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.firstname  =  \"Marianne\"", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all songs produced by the artist with the first name marianne", "sql_clean": "<start> select t3.title from performance as t1 join band as t2 on t1.bandmate = t2.id join songs as t3 on t3.songid = t1.songid where t2.firstname = marianne <end>"}, {"text": "What is the most common maximum page size?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "db_id": "store_product", "schema": {"tables": [], "columns": []}, "text_clean": "what is the most common maximum page size", "sql_clean": "<start> select max_page_size from product group by max_page_size order by count(*) desc limit 1 <end>"}, {"text": "Show the first name, last name, and phone number for all female faculty members.", "sql": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "show the first name last name and phone number for all female faculty members", "sql_clean": "<start> select fname , lname , phone from faculty where sex = 'f' <end>"}, {"text": "How many students play video games?", "sql": "SELECT count(DISTINCT StuID) FROM Plays_games", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many students play video games", "sql_clean": "<start> select count(distinct stuid) from plays_games <end>"}, {"text": "Find all information about student addresses, and sort by monthly rental in descending order.", "sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC", "db_id": "behavior_monitoring", "schema": {"tables": [], "columns": []}, "text_clean": "find all information about student addresses and sort by monthly rental in descending order", "sql_clean": "<start> select * from student_addresses order by monthly_rental desc <end>"}, {"text": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.", "sql": "SELECT DISTINCT T2.Hardware_Model_name , T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15;", "db_id": "phone_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15", "sql_clean": "<start> select distinct t2.hardware_model_name , t2.company_name from screen_mode as t1 join phone as t2 on t1.graphics_mode = t2.screen_mode where t1.used_kb between 10 and 15; <end>"}, {"text": "Give the address of the staff member who has the first name Elsa.", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "give the address of the staff member who has the first name elsa", "sql_clean": "<start> select t2.address from staff as t1 join address as t2 on t1.address_id = t2.address_id where t1.first_name = 'elsa' <end>"}, {"text": "What is the area for the appelation which produced the most wines prior to 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the area for the appelation which produced the most wines prior to 2010", "sql_clean": "<start> select t1.area from appellations as t1 join wine as t2 on t1.appelation = t2.appelation group by t2.appelation having t2.year < 2010 order by count(*) desc limit 1 <end>"}, {"text": "Find the first name of students not enrolled in any course.", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "find the first name of students not enrolled in any course", "sql_clean": "<start> select fname from student where stuid not in (select stuid from enrolled_in) <end>"}, {"text": "Find the number of papers published by authors from the institution \"Tokohu University\".", "sql": "SELECT count(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Tokohu University\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of papers published by authors from the institution tokohu university", "sql_clean": "<start> select count(distinct t1.title) from papers as t1 join authorship as t2 on t1.paperid = t2.paperid join inst as t3 on t2.instid = t3.instid where t3.name = tokohu university <end>"}, {"text": "What is the name and price of the cheapest product?", "sql": "SELECT name ,  price FROM Products ORDER BY price ASC LIMIT 1", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name and price of the cheapest product", "sql_clean": "<start> select name , price from products order by price asc limit 1 <end>"}, {"text": "What is the name of the customer with the worst credit score?", "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the customer with the worst credit score", "sql_clean": "<start> select cust_name from customer order by credit_score limit 1 <end>"}, {"text": "What are the first names of all professors not teaching any classes?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first names of all professors not teaching any classes", "sql_clean": "<start> select emp_fname from employee where emp_jobcode = 'prof' except select t1.emp_fname from employee as t1 join class as t2 on t1.emp_num = t2.prof_num <end>"}, {"text": "What campuses opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "db_id": "csu_1", "schema": {"tables": [], "columns": []}, "text_clean": "what campuses opened between 1935 and 1939", "sql_clean": "<start> select campus from campuses where year >= 1935 and year <= 1939 <end>"}, {"text": "How many party events do we have?", "sql": "SELECT count(*) FROM party_events", "db_id": "party_people", "schema": {"tables": [], "columns": []}, "text_clean": "how many party events do we have", "sql_clean": "<start> select count(*) from party_events <end>"}, {"text": "What is the total budget amount for school \"Glenn\" in all years?", "sql": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'", "db_id": "school_finance", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total budget amount for school glenn in all years", "sql_clean": "<start> select sum(t1.budgeted) from budget as t1 join school as t2 on t1.school_id = t2.school_id where t2.school_name = 'glenn' <end>"}, {"text": "Please show the most common type of ships.", "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "ship_mission", "schema": {"tables": [], "columns": []}, "text_clean": "please show the most common type of ships", "sql_clean": "<start> select type from ship group by type order by count(*) desc limit 1 <end>"}, {"text": "What is the average rating of songs for each language?", "sql": "SELECT avg(rating) ,  languages FROM song GROUP BY languages", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average rating of songs for each language", "sql_clean": "<start> select avg(rating) , languages from song group by languages <end>"}, {"text": "Which programs are never broadcasted in the morning? Give me the names of the programs.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "which programs are never broadcasted in the morning give me the names of the programs", "sql_clean": "<start> select name from program except select t1.name from program as t1 join broadcast as t2 on t1.program_id = t2.program_id where t2.time_of_day = morning <end>"}, {"text": "Find the last names of faculties who are members of computer science department.", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "find the last names of faculties who are members of computer science department", "sql_clean": "<start> select t2.lname from department as t1 join faculty as t2 on t1.dno = t3.dno join member_of as t3 on t2.facid = t3.facid where t1.dname = computer science <end>"}, {"text": "What are the names of rooms that have either king or queen bed?", "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of rooms that have either king or queen bed", "sql_clean": "<start> select roomname from rooms where bedtype = king or bedtype = queen; <end>"}, {"text": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841", "sql_clean": "<start> select distinct driverid , stop from pitstops where duration > (select min(duration) from pitstops where raceid = 841) <end>"}, {"text": "Show all customer ids and the number of cards owned by each customer.", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "show all customer ids and the number of cards owned by each customer", "sql_clean": "<start> select customer_id , count(*) from customers_cards group by customer_id <end>"}, {"text": "Find the players' first name and last name who won award both in 1960 and in 1961.", "sql": "SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1960 INTERSECT SELECT T1.name_first , T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year  =  1961", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the players first name and last name who won award both in 1960 and in 1961", "sql_clean": "<start> select t1.name_first , t1.name_last from player as t1 join player_award as t2 where t2.year = 1960 intersect select t1.name_first , t1.name_last from player as t1 join player_award as t2 where t2.year = 1961 <end>"}, {"text": "Show all video game types and the number of video games in each type.", "sql": "SELECT gtype ,  count(*) FROM Video_games GROUP BY gtype", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "show all video game types and the number of video games in each type", "sql_clean": "<start> select gtype , count(*) from video_games group by gtype <end>"}, {"text": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct salaries of all instructors who earned less than the maximum salary", "sql_clean": "<start> select distinct salary from instructor where salary < (select max(salary) from instructor) <end>"}, {"text": "Return the most frequent result across all musicals.", "sql": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "musical", "schema": {"tables": [], "columns": []}, "text_clean": "return the most frequent result across all musicals", "sql_clean": "<start> select result from musical group by result order by count(*) desc limit 1 <end>"}, {"text": "List the name and the number of enrolled student for each course.", "sql": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "list the name and the number of enrolled student for each course", "sql_clean": "<start> select t1.course_name , count(*) from courses as t1 join student_course_enrolment as t2 on t1.course_id = t2.course_id group by t1.course_name <end>"}, {"text": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the first names and offices of all instructors who have taught some course and the course description and the department name", "sql_clean": "<start> select t2.emp_fname , t4.prof_office , t3.crs_description , t5.dept_name from class as t1 join employee as t2 on t1.prof_num = t2.emp_num join course as t3 on t1.crs_code = t3.crs_code join professor as t4 on t2.emp_num = t4.emp_num join department as t5 on t4.dept_code = t5.dept_code <end>"}, {"text": "Which cities have regional population above 8000000 or below 5000000?", "sql": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000", "db_id": "city_record", "schema": {"tables": [], "columns": []}, "text_clean": "which cities have regional population above 8000000 or below 5000000", "sql_clean": "<start> select city from city where regional_population > 10000000 union select city from city where regional_population < 5000000 <end>"}, {"text": "What is the date of birth for the staff member named Janessa Sawayn?", "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what is the date of birth for the staff member named janessa sawayn", "sql_clean": "<start> select date_of_birth from staff where first_name = janessa and last_name = sawayn; <end>"}, {"text": "How many members have the black membership card?", "sql": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'", "db_id": "coffee_shop", "schema": {"tables": [], "columns": []}, "text_clean": "how many members have the black membership card", "sql_clean": "<start> select count(*) from member where membership_card = 'black' <end>"}, {"text": "What are the names of all the dorms that can accomdate more than 300 students?", "sql": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all the dorms that can accomdate more than 300 students", "sql_clean": "<start> select dorm_name from dorm where student_capacity > 300 <end>"}, {"text": "Find the number of students who is older than 20 in each dorm.", "sql": "SELECT count(*) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T1.age  >  20 GROUP BY T3.dorm_name", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of students who is older than 20 in each dorm", "sql_clean": "<start> select count(*) , t3.dorm_name from student as t1 join lives_in as t2 on t1.stuid = t2.stuid join dorm as t3 on t3.dormid = t2.dormid where t1.age > 20 group by t3.dorm_name <end>"}, {"text": "How many branches where have more than average number of memberships are there?", "sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "how many branches where have more than average number of memberships are there", "sql_clean": "<start> select count(*) from branch where membership_amount > (select avg(membership_amount) from branch) <end>"}, {"text": "What is the name of the media type that is least common across all tracks?", "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the media type that is least common across all tracks", "sql_clean": "<start> select t1.name from mediatype as t1 join track as t2 on t1.mediatypeid = t2.mediatypeid group by t2.mediatypeid order by count(*) asc limit 1 <end>"}, {"text": "Which department has more than 1 head at a time? List the id, name and the number of heads.", "sql": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1", "db_id": "department_management", "schema": {"tables": [], "columns": []}, "text_clean": "which department has more than 1 head at a time list the id name and the number of heads", "sql_clean": "<start> select t1.department_id , t1.name , count(*) from management as t2 join department as t1 on t1.department_id = t2.department_id group by t1.department_id having count(*) > 1 <end>"}, {"text": "For each country and airline name, how many routes are there?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "for each country and airline name how many routes are there", "sql_clean": "<start> select t1.country , t1.name , count(*) from airlines as t1 join routes as t2 on t1.alid = t2.alid group by t1.country , t1.name <end>"}, {"text": "Which party has two or more records?", "sql": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "db_id": "election", "schema": {"tables": [], "columns": []}, "text_clean": "which party has two or more records", "sql_clean": "<start> select party from party group by party having count(*) >= 2 <end>"}, {"text": "Find the student ID and login name of the student with the most course enrollments", "sql": "SELECT T1.student_id ,  T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "find the student id and login name of the student with the most course enrollments", "sql_clean": "<start> select t1.student_id , t2.login_name from student_course_enrolment as t1 join students as t2 on t1.student_id = t2.student_id group by t1.student_id order by count(*) desc limit 1 <end>"}, {"text": "What are the first and last names of all students who are living in a dorm with a TV Lounge?", "sql": "SELECT T1.fname ,  T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid  =  T4.amenid WHERE T4.amenity_name  =  'TV Lounge')", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last names of all students who are living in a dorm with a tv lounge", "sql_clean": "<start> select t1.fname , t1.lname from student as t1 join lives_in as t2 on t1.stuid = t2.stuid where t2.dormid in (select t3.dormid from has_amenity as t3 join dorm_amenity as t4 on t3.amenid = t4.amenid where t4.amenity_name = 'tv lounge') <end>"}, {"text": "In which year were most departments established?", "sql": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1", "db_id": "department_management", "schema": {"tables": [], "columns": []}, "text_clean": "in which year were most departments established", "sql_clean": "<start> select creation from department group by creation order by count(*) desc limit 1 <end>"}, {"text": "What are the first name and last name of Linda Smith's advisor?", "sql": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first name and last name of linda smith s advisor", "sql_clean": "<start> select t1.fname , t1.lname from faculty as t1 join student as t2 on t1.facid = t2.advisor where t2.fname = linda and t2.lname = smith <end>"}, {"text": "Find the name and id of accounts whose checking balance is below the maximum checking balance.", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and id of accounts whose checking balance is below the maximum checking balance", "sql_clean": "<start> select t1.custid , t1.name from accounts as t1 join checking as t2 on t1.custid = t2.custid where t2.balance < (select max(balance) from checking) <end>"}, {"text": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "which catalog contents have length below 3 or above 5 find the catalog entry names", "sql_clean": "<start> select catalog_entry_name from catalog_contents where length < 3 or width > 5 <end>"}, {"text": "Who is the person whose age is below 30?", "sql": "SELECT name FROM Person WHERE age  <  30", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "who is the person whose age is below 30", "sql_clean": "<start> select name from person where age < 30 <end>"}, {"text": "What are the types of vocals used in the song \"Demon Kitty Rag\"?", "sql": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the types of vocals used in the song demon kitty rag", "sql_clean": "<start> select count(*) from vocals as t1 join songs as t2 on t1.songid = t2.songid where title = demon kitty rag <end>"}, {"text": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.", "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "return the names and typical buying and selling prices for products that have yellow as their color description", "sql_clean": "<start> select t1.product_name , t1.typical_buying_price , t1.typical_selling_price from products as t1 join ref_colors as t2 on t1.color_code = t2.color_code where t2.color_description = yellow <end>"}, {"text": "Count the number of products.", "sql": "SELECT count(*) FROM products", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of products", "sql_clean": "<start> select count(*) from products <end>"}, {"text": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?", "sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2", "db_id": "election", "schema": {"tables": [], "columns": []}, "text_clean": "who were the comptrollers of the parties associated with the delegates from district 1 or district 2", "sql_clean": "<start> select t2.comptroller from election as t1 join party as t2 on t1.party = t2.party_id where t1.district = 1 or t1.district = 2 <end>"}, {"text": "What are the titles and average ratings for all movies that have the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the titles and average ratings for all movies that have the lowest average rating", "sql_clean": "<start> select t2.title , avg(t1.stars) from rating as t1 join movie as t2 on t1.mid = t2.mid group by t1.mid order by avg(t1.stars) limit 1 <end>"}, {"text": "Find the total number of king beds available.", "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the total number of king beds available", "sql_clean": "<start> select sum(beds) from rooms where bedtype = 'king'; <end>"}, {"text": "What are the names of all pilots listed by descending age?", "sql": "SELECT Name FROM pilot ORDER BY Age DESC", "db_id": "aircraft", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all pilots listed by descending age", "sql_clean": "<start> select name from pilot order by age desc <end>"}, {"text": "What are the codes, names, and descriptions of the different document types?", "sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "what are the codes names and descriptions of the different document types", "sql_clean": "<start> select document_type_code , document_type_name , document_type_description from ref_document_types <end>"}, {"text": "How many products are there in the records?", "sql": "SELECT count(*) FROM catalog_contents", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "how many products are there in the records", "sql_clean": "<start> select count(*) from catalog_contents <end>"}, {"text": "Find all the forenames of distinct drivers who was in position 1 as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all the forenames of distinct drivers who was in position 1 as standing and won", "sql_clean": "<start> select distinct t1.forename from drivers as t1 join driverstandings as t2 on t1.driverid = t2.driverid where t2.position = 1 and t2.wins = 1 <end>"}, {"text": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.", "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products", "sql_clean": "<start> select avg(total_amount_purchased) , avg(total_value_purchased) from product_suppliers where supplier_id = (select supplier_id from product_suppliers group by supplier_id order by count(*) desc limit 1) <end>"}, {"text": "How many phones are there?", "sql": "SELECT count(*) FROM phone", "db_id": "phone_market", "schema": {"tables": [], "columns": []}, "text_clean": "how many phones are there", "sql_clean": "<start> select count(*) from phone <end>"}, {"text": "What are the last names of faculty who are part of the computer science department?", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what are the last names of faculty who are part of the computer science department", "sql_clean": "<start> select t2.lname from department as t1 join faculty as t2 on t1.dno = t3.dno join member_of as t3 on t2.facid = t3.facid where t1.dname = computer science <end>"}, {"text": "What are the names of all the different reviewers who rates Gone with the Wind?", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all the different reviewers who rates gone with the wind", "sql_clean": "<start> select distinct t3.name from rating as t1 join movie as t2 on t1.mid = t2.mid join reviewer as t3 on t1.rid = t3.rid where t2.title = 'gone with the wind' <end>"}, {"text": "List the names of states that have more than 2 parks.", "sql": "SELECT state FROM park GROUP BY state HAVING count(*)  >  2;", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of states that have more than 2 parks", "sql_clean": "<start> select state from park group by state having count(*) > 2; <end>"}, {"text": "Which city has the most addresses? List the city name, number of addresses, and city id.", "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "which city has the most addresses list the city name number of addresses and city id", "sql_clean": "<start> select t2.city , count(*) , t1.city_id from address as t1 join city as t2 on t1.city_id = t2.city_id group by t1.city_id order by count(*) desc limit 1 <end>"}, {"text": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the number of states that has some colleges whose enrollment is smaller than the average enrollment", "sql_clean": "<start> select count(distinct state) from college where enr < (select avg(enr) from college) <end>"}, {"text": "What is the name of all tracks in the Rock genre?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of all tracks in the rock genre", "sql_clean": "<start> select t2.name from genres as t1 join tracks as t2 on t1.id = t2.genre_id where t1.name = rock; <end>"}, {"text": "Which physicians are trained in procedures that are more expensive than 5000?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "which physicians are trained in procedures that are more expensive than 5000", "sql_clean": "<start> select t1.name from physician as t1 join trained_in as t2 on t1.employeeid = t2.physician join procedures as t3 on t3.code = t2.treatment where t3.cost > 5000 <end>"}, {"text": "Find the names of customers who never placed an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of customers who never placed an order", "sql_clean": "<start> select customer_name from customers except select t1.customer_name from customers as t1 join customer_orders as t2 on t1.customer_id = t2.customer_id <end>"}, {"text": "What is the id of the order which has the most items?", "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "db_id": "tracking_orders", "schema": {"tables": [], "columns": []}, "text_clean": "what is the id of the order which has the most items", "sql_clean": "<start> select t1.order_id from orders as t1 join order_items as t2 on t1.order_id = t2.order_id group by t1.order_id order by count(*) desc limit 1 <end>"}, {"text": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "which problems were reported by the staff named dameon frami or jolie weber give me the ids of the problems", "sql_clean": "<start> select product_id from problems as t1 join staff as t2 on t1.reported_by_staff_id = t2.staff_id where t2.staff_first_name = dameon and t2.staff_last_name = frami union select product_id from problems as t1 join staff as t2 on t1.reported_by_staff_id = t2.staff_id where t2.staff_first_name = jolie and t2.staff_last_name = weber <end>"}, {"text": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.", "sql": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002", "db_id": "school_finance", "schema": {"tables": [], "columns": []}, "text_clean": "show each school name its budgeted amount and invested amount in year 2002 or after", "sql_clean": "<start> select t2.school_name , t1.budgeted , t1.invested from budget as t1 join school as t2 on t1.school_id = t2.school_id where t1.year >= 2002 <end>"}, {"text": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.", "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "which film actor actress starred the most films list his or her first name last name and actor id", "sql_clean": "<start> select t2.first_name , t2.last_name , t2.actor_id from film_actor as t1 join actor as t2 on t1.actor_id = t2.actor_id group by t2.actor_id order by count(*) desc limit 1 <end>"}, {"text": "What are the names and hours spent practicing of every student who received a yes at tryouts?", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and hours spent practicing of every student who received a yes at tryouts", "sql_clean": "<start> select t1.pname , t1.hs from player as t1 join tryout as t2 on t1.pid = t2.pid where t2.decision = 'yes' <end>"}, {"text": "For each reviewer id, what is the title and rating for the movie with the smallest rating?", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "for each reviewer id what is the title and rating for the movie with the smallest rating", "sql_clean": "<start> select t2.title , t1.rid , t1.stars , min(t1.stars) from rating as t1 join movie as t2 on t1.mid = t2.mid group by t1.rid <end>"}, {"text": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the forenames and surnames of drivers who participated in the races named australian grand prix but not the races named chinese grand prix", "sql_clean": "<start> select t3.forename , t3.surname from races as t1 join results as t2 on t1.raceid = t2.raceid join drivers as t3 on t2.driverid = t3.driverid where t1.name = australian grand prix except select t3.forename , t3.surname from races as t1 join results as t2 on t1.raceid = t2.raceid join drivers as t3 on t2.driverid = t3.driverid where t1.name = chinese grand prix <end>"}, {"text": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and balances of checking accounts belonging to the customer with the lowest savings balance", "sql_clean": "<start> select t1.name , t2.balance from accounts as t1 join checking as t2 on t1.custid = t2.custid join savings as t3 on t1.custid = t3.custid order by t3.balance limit 1 <end>"}, {"text": "Which apartment type code is the most common among apartments with more than one bathroom?", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "which apartment type code is the most common among apartments with more than one bathroom", "sql_clean": "<start> select apt_type_code from apartments where bathroom_count > 1 group by apt_type_code order by count(*) desc limit 1 <end>"}, {"text": "What are all the different zip codes that have a maximum dew point that was always below 70?", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are all the different zip codes that have a maximum dew point that was always below 70", "sql_clean": "<start> select distinct zip_code from weather except select distinct zip_code from weather where max_dew_point_f >= 70 <end>"}, {"text": "What are the personal names and family names of the students? Sort the result in alphabetical order of the family name.", "sql": "SELECT personal_name ,  family_name FROM Students ORDER BY family_name", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "what are the personal names and family names of the students sort the result in alphabetical order of the family name", "sql_clean": "<start> select personal_name , family_name from students order by family_name <end>"}, {"text": "What are the distinct first names, last names, and phone numbers for customers with accounts?", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct first names last names and phone numbers for customers with accounts", "sql_clean": "<start> select distinct t1.customer_first_name , t1.customer_last_name , t1.phone_number from customers as t1 join accounts as t2 on t1.customer_id = t2.customer_id <end>"}, {"text": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "db_id": "climbing", "schema": {"tables": [], "columns": []}, "text_clean": "show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200", "sql_clean": "<start> select country from mountain where height > 5600 intersect select country from mountain where height < 5200 <end>"}, {"text": "Show the ids for projects with at least 2 documents.", "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "show the ids for projects with at least 2 documents", "sql_clean": "<start> select project_id from documents group by project_id having count(*) >= 2 <end>"}, {"text": "Show the name of ships whose nationality is either United States or United Kingdom.", "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"", "db_id": "ship_mission", "schema": {"tables": [], "columns": []}, "text_clean": "show the name of ships whose nationality is either united states or united kingdom", "sql_clean": "<start> select name from ship where nationality = united states or nationality = united kingdom <end>"}, {"text": "What are the names of the aircraft that the least people are certified to fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the aircraft that the least people are certified to fly", "sql_clean": "<start> select t2.name from certificate as t1 join aircraft as t2 on t2.aid = t1.aid group by t1.aid order by count(*) desc limit 1 <end>"}, {"text": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of races that were held after 2017 and the circuits were in the country of spain", "sql_clean": "<start> select t1.name from races as t1 join circuits as t2 on t1.circuitid = t2.circuitid where t2.country = spain and t1.year > 2017 <end>"}, {"text": "Return the characteristic names of the 'sesame' product.", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "return the characteristic names of the sesame product", "sql_clean": "<start> select t3.characteristic_name from products as t1 join product_characteristics as t2 on t1.product_id = t2.product_id join characteristics as t3 on t2.characteristic_id = t3.characteristic_id where t1.product_name = sesame <end>"}, {"text": "Show the maximum and minimum share count of different transaction types.", "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code", "db_id": "tracking_share_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "show the maximum and minimum share count of different transaction types", "sql_clean": "<start> select transaction_type_code , max(share_count) , min(share_count) from transactions group by transaction_type_code <end>"}, {"text": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?", "sql": "SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T3.name LIKE '%Smith%'", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the project that has a scientist assigned to it whose name contains smith", "sql_clean": "<start> select t2.name from assignedto as t1 join projects as t2 on t1.project = t2.code join scientists as t3 on t1.scientist = t3.ssn where t3.name like '%smith%' <end>"}, {"text": "Give the distinct headquarters of manufacturers.", "sql": "SELECT DISTINCT headquarter FROM manufacturers", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "give the distinct headquarters of manufacturers", "sql_clean": "<start> select distinct headquarter from manufacturers <end>"}, {"text": "Find the types and details for all premises and order by the premise type.", "sql": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type", "db_id": "customers_campaigns_ecommerce", "schema": {"tables": [], "columns": []}, "text_clean": "find the types and details for all premises and order by the premise type", "sql_clean": "<start> select premises_type , premise_details from premises order by premises_type <end>"}, {"text": "What is the most popular first name of the actors?", "sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the most popular first name of the actors", "sql_clean": "<start> select first_name from actor group by first_name order by count(*) desc limit 1 <end>"}, {"text": "List the names of players in ascending order of votes.", "sql": "SELECT Player_name FROM player ORDER BY Votes ASC", "db_id": "riding_club", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of players in ascending order of votes", "sql_clean": "<start> select player_name from player order by votes asc <end>"}, {"text": "How many employees who are IT staff are from each city?", "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many employees who are it staff are from each city", "sql_clean": "<start> select count(*) , city from employees where title = 'it staff' group by city <end>"}, {"text": "How many colors are there?", "sql": "SELECT count(*) FROM ref_colors", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "how many colors are there", "sql_clean": "<start> select count(*) from ref_colors <end>"}, {"text": "What are the titles of papers published by \"Jeremy Gibbons\"?", "sql": "SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid  =  t2.authid JOIN papers AS t3 ON t2.paperid  =  t3.paperid WHERE  t1.fname  =  \"Jeremy\" AND t1.lname  =  \"Gibbons\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the titles of papers published by jeremy gibbons", "sql_clean": "<start> select t3.title from authors as t1 join authorship as t2 on t1.authid = t2.authid join papers as t3 on t2.paperid = t3.paperid where t1.fname = jeremy and t1.lname = gibbons <end>"}, {"text": "Show the id of each employee and the number of document destruction authorised by that employee.", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "show the id of each employee and the number of document destruction authorised by that employee", "sql_clean": "<start> select destruction_authorised_by_employee_id , count(*) from documents_to_be_destroyed group by destruction_authorised_by_employee_id <end>"}, {"text": "What is the name and city of the airport from most of the routes start?", "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name and city of the airport from most of the routes start", "sql_clean": "<start> select t1.name , t1.city , t2.src_apid from airports as t1 join routes as t2 on t1.apid = t2.src_apid group by t2.src_apid order by count(*) desc limit 1 <end>"}, {"text": "Who are the friends of Alice that are doctors?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "who are the friends of alice that are doctors", "sql_clean": "<start> select t2.friend from person as t1 join personfriend as t2 on t1.name = t2.friend where t2.name = 'alice' and t1.gender = 'male' and t1.job = 'doctor' <end>"}, {"text": "For each submission, show the author and their affiliated college.", "sql": "SELECT Author ,  College FROM submission", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "for each submission show the author and their affiliated college", "sql_clean": "<start> select author , college from submission <end>"}, {"text": "Count the number of storms in which at least 1 person died.", "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of storms in which at least 1 person died", "sql_clean": "<start> select count(*) from storm where number_deaths > 0 <end>"}, {"text": "How many documents have document type code CV or BK?", "sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "how many documents have document type code cv or bk", "sql_clean": "<start> select count(*) from all_documents where document_type_code = cv or document_type_code = bk <end>"}, {"text": "What is the last name of the student who received an A in the class with the code 10018?", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the last name of the student who received an a in the class with the code 10018", "sql_clean": "<start> select t1.stu_lname from student as t1 join enroll as t2 on t1.stu_num = t2.stu_num where t2.enroll_grade = 'a' and t2.class_code = 10018 <end>"}, {"text": "What are the last names of individuals who have been contact individuals for an organization?", "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id", "db_id": "e_government", "schema": {"tables": [], "columns": []}, "text_clean": "what are the last names of individuals who have been contact individuals for an organization", "sql_clean": "<start> select distinct t1.individual_last_name from individuals as t1 join organization_contact_individuals as t2 on t1.individual_id = t2.individual_id <end>"}, {"text": "Find the name of persons who are friends with Bob.", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of persons who are friends with bob", "sql_clean": "<start> select t1.name from person as t1 join personfriend as t2 on t1.name = t2.name where t2.friend = 'bob' <end>"}, {"text": "Show the park of the roller coaster with the highest speed.", "sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1", "db_id": "roller_coaster", "schema": {"tables": [], "columns": []}, "text_clean": "show the park of the roller coaster with the highest speed", "sql_clean": "<start> select park from roller_coaster order by speed desc limit 1 <end>"}, {"text": "What are the details and ways to get to tourist attractions related to royal family?", "sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "what are the details and ways to get to tourist attractions related to royal family", "sql_clean": "<start> select t1.royal_family_details , t2.how_to_get_there from royal_family as t1 join tourist_attractions as t2 on t1.royal_family_id = t2.tourist_attraction_id <end>"}, {"text": "Show the party that has the most people.", "sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "debate", "schema": {"tables": [], "columns": []}, "text_clean": "show the party that has the most people", "sql_clean": "<start> select party from people group by party order by count(*) desc limit 1 <end>"}, {"text": "List the names of all the customers in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of all the customers in alphabetical order", "sql_clean": "<start> select customer_details from customers order by customer_details <end>"}, {"text": "Which services have been used more than twice in first notification of loss? Return the service name.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "db_id": "insurance_fnol", "schema": {"tables": [], "columns": []}, "text_clean": "which services have been used more than twice in first notification of loss return the service name", "sql_clean": "<start> select t2.service_name from first_notification_of_loss as t1 join services as t2 on t1.service_id = t2.service_id group by t1.service_id having count(*) > 2 <end>"}, {"text": "What are the names of wines, sorted in alphabetical order?", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of wines sorted in alphabetical order", "sql_clean": "<start> select distinct name from wine order by name <end>"}, {"text": "Find the captain rank that has no captain in Third-rate ship of the line class.", "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the captain rank that has no captain in third rate ship of the line class", "sql_clean": "<start> select rank from captain except select rank from captain where class = 'third-rate ship of the line' <end>"}, {"text": "What are the names of the songs that are modern or sung in English?", "sql": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the songs that are modern or sung in english", "sql_clean": "<start> select song_name from song where genre_is = modern or languages = english <end>"}, {"text": "What are the speeds of the longest roller coaster?", "sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1", "db_id": "roller_coaster", "schema": {"tables": [], "columns": []}, "text_clean": "what are the speeds of the longest roller coaster", "sql_clean": "<start> select speed from roller_coaster order by length desc limit 1 <end>"}, {"text": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.", "sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "find the name city country and altitude or elevation of the airports in the city of new york", "sql_clean": "<start> select name , city , country , elevation from airports where city = 'new york' <end>"}, {"text": "Find the code of the location with the largest number of documents.", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "find the code of the location with the largest number of documents", "sql_clean": "<start> select location_code from document_locations group by location_code order by count(*) desc limit 1 <end>"}, {"text": "Find the year and semester when offers the largest number of courses.", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the year and semester when offers the largest number of courses", "sql_clean": "<start> select semester , year from section group by semester , year order by count(*) desc limit 1 <end>"}, {"text": "Return all the information for all employees without any department number.", "sql": "SELECT * FROM employees WHERE department_id  =  \"null\"", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "return all the information for all employees without any department number", "sql_clean": "<start> select * from employees where department_id = null <end>"}, {"text": "Which customer is associated with the latest policy?", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "which customer is associated with the latest policy", "sql_clean": "<start> select t2.customer_details from policies as t1 join customers as t2 on t1.customer_id = t2.customer_id where t1.start_date = (select max(start_date) from policies) <end>"}, {"text": "Find the number of students in one classroom.", "sql": "SELECT count(*) ,  classroom FROM list GROUP BY classroom", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of students in one classroom", "sql_clean": "<start> select count(*) , classroom from list group by classroom <end>"}, {"text": "How many assets does each third party company supply? List the count and the company id.", "sql": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "how many assets does each third party company supply list the count and the company id", "sql_clean": "<start> select count(*) , t1.company_id from third_party_companies as t1 join assets as t2 on t1.company_id = t2.supplier_company_id group by t1.company_id <end>"}, {"text": "What are the names of departments either in division AS, or in division EN and in building NEB?", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of departments either in division as or in division en and in building neb", "sql_clean": "<start> select dname from department where division = as union select dname from department where division = en and building = neb <end>"}, {"text": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of accounts whose checking balance is higher than corresponding saving balance", "sql_clean": "<start> select t1.name from accounts as t1 join checking as t2 on t1.custid = t2.custid join savings as t3 on t1.custid = t3.custid where t2.balance > t3.balance <end>"}, {"text": "Show names of actors in descending order of the year their musical is awarded.", "sql": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID ORDER BY T2.Year DESC", "db_id": "musical", "schema": {"tables": [], "columns": []}, "text_clean": "show names of actors in descending order of the year their musical is awarded", "sql_clean": "<start> select t1.name from actor as t1 join musical as t2 on t1.musical_id = t2.musical_id order by t2.year desc <end>"}, {"text": "What are the different types of forms?", "sql": "SELECT DISTINCT form_type_code FROM forms", "db_id": "e_government", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different types of forms", "sql_clean": "<start> select distinct form_type_code from forms <end>"}, {"text": "List the publication dates of publications with 3 lowest prices.", "sql": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3", "db_id": "book_2", "schema": {"tables": [], "columns": []}, "text_clean": "list the publication dates of publications with 3 lowest prices", "sql_clean": "<start> select publication_date from publication order by price asc limit 3 <end>"}, {"text": "Which channels are broadcast in the morning? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "which channels are broadcast in the morning give me the channel names", "sql_clean": "<start> select t1.name from channel as t1 join broadcast as t2 on t1.channel_id = t2.channel_id where t2.time_of_day = 'morning' <end>"}, {"text": "Show the names of pilots from team \"Bradley\" or \"Fordham\".", "sql": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\"", "db_id": "pilot_record", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of pilots from team bradley or fordham", "sql_clean": "<start> select pilot_name from pilot where team = bradley or team = fordham <end>"}, {"text": "What is the name and sex of the candidate with the highest support rate?", "sql": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1", "db_id": "candidate_poll", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name and sex of the candidate with the highest support rate", "sql_clean": "<start> select t1.name , t1.sex from people as t1 join candidate as t2 on t1.people_id = t2.people_id order by t2.support_rate desc limit 1 <end>"}, {"text": "List the name and phone number of all suppliers in the alphabetical order of their addresses.", "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "list the name and phone number of all suppliers in the alphabetical order of their addresses", "sql_clean": "<start> select t1.supplier_name , t1.supplier_phone from suppliers as t1 join supplier_addresses as t2 on t1.supplier_id = t2.supplier_id join addresses as t3 on t2.address_id = t3.address_id order by t3.address_details <end>"}, {"text": "What are the first names of all students in course ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first names of all students in course acct 211", "sql_clean": "<start> select t3.stu_fname from class as t1 join enroll as t2 on t1.class_code = t2.class_code join student as t3 on t2.stu_num = t3.stu_num where t1.crs_code = 'acct-211' <end>"}, {"text": "Find courses that ran in Fall 2009 but not in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find courses that ran in fall 2009 but not in spring 2010", "sql_clean": "<start> select course_id from section where semester = 'fall' and year = 2009 except select course_id from section where semester = 'spring' and year = 2010 <end>"}, {"text": "Show all investor details.", "sql": "SELECT Investor_details FROM INVESTORS", "db_id": "tracking_share_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "show all investor details", "sql_clean": "<start> select investor_details from investors <end>"}, {"text": "How many storms had death records?", "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "how many storms had death records", "sql_clean": "<start> select count(*) from storm where number_deaths > 0 <end>"}, {"text": "For each team, return the team name, id and the maximum salary among the team.", "sql": "SELECT T1.name ,  T1.team_id ,  max(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id  =  T2.team_id GROUP BY T1.team_id;", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "for each team return the team name id and the maximum salary among the team", "sql_clean": "<start> select t1.name , t1.team_id , max(t2.salary) from team as t1 join salary as t2 on t1.team_id = t2.team_id group by t1.team_id; <end>"}, {"text": "What are the planned delivery date and actual delivery date for each booking?", "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "what are the planned delivery date and actual delivery date for each booking", "sql_clean": "<start> select planned_delivery_date , actual_delivery_date from bookings <end>"}, {"text": "How many entrepreneurs are there?", "sql": "SELECT count(*) FROM entrepreneur", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "how many entrepreneurs are there", "sql_clean": "<start> select count(*) from entrepreneur <end>"}, {"text": "What is the last name of the musician that has been at the back position the most?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the last name of the musician that has been at the back position the most", "sql_clean": "<start> select t2.lastname from performance as t1 join band as t2 on t1.bandmate = t2.id where stageposition = back group by lastname order by count(*) desc limit 1 <end>"}, {"text": "What is the name of the 3 employees who get paid the least?", "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the 3 employees who get paid the least", "sql_clean": "<start> select name from employee order by salary asc limit 3 <end>"}, {"text": "What is the minimum, maximum, and average seating for all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "db_id": "race_track", "schema": {"tables": [], "columns": []}, "text_clean": "what is the minimum maximum and average seating for all tracks", "sql_clean": "<start> select min(seating) , max(seating) , avg(seating) from track <end>"}, {"text": "Find the name and email of the user followed by the least number of people.", "sql": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1", "db_id": "twitter_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and email of the user followed by the least number of people", "sql_clean": "<start> select name , email from user_profiles order by followers limit 1 <end>"}, {"text": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.", "sql": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the last name of students who is either female sex is f and living in the city of code bal or male sex is m and in age of below 20", "sql_clean": "<start> select lname from student where sex = 'f' and city_code = 'bal' union select lname from student where sex = 'm' and age < 20 <end>"}, {"text": "What are the names of all songs that have a lower rating than some song of blues genre?", "sql": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all songs that have a lower rating than some song of blues genre", "sql_clean": "<start> select song_name from song where rating < (select max(rating) from song where genre_is = blues) <end>"}, {"text": "What are the ids of the trips that lasted the longest and how long did they last?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of the trips that lasted the longest and how long did they last", "sql_clean": "<start> select id , duration from trip order by duration desc limit 3 <end>"}, {"text": "What are the different product names, and what is the sum of quantity ordered for each product?", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different product names and what is the sum of quantity ordered for each product", "sql_clean": "<start> select t2.product_name , sum(t1.product_quantity) from order_items as t1 join products as t2 on t1.product_id = t2.product_id group by t2.product_name <end>"}, {"text": "List the names of patients who have made appointments.", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of patients who have made appointments", "sql_clean": "<start> select name from appointment as t1 join patient as t2 on t1.patient = t2.ssn <end>"}, {"text": "Find the name and address of the department that has the highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and address of the department that has the highest number of students", "sql_clean": "<start> select t2.dept_name , t2.dept_address from student as t1 join department as t2 on t1.dept_code = t2.dept_code group by t1.dept_code order by count(*) desc limit 1 <end>"}, {"text": "Which customers do not have any policies? Find the details of these customers.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "which customers do not have any policies find the details of these customers", "sql_clean": "<start> select customer_details from customers except select t1.customer_details from customers as t1 join customer_policies as t2 on t1.customer_id = t2.customer_id <end>"}, {"text": "Which advisor has most number of students?", "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "which advisor has most number of students", "sql_clean": "<start> select advisor from student group by advisor order by count(*) desc limit 1 <end>"}, {"text": "List the names and origins of people who are not body builders.", "sql": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id", "db_id": "body_builder", "schema": {"tables": [], "columns": []}, "text_clean": "list the names and origins of people who are not body builders", "sql_clean": "<start> select name , birth_place from people except select t1.name , t1.birth_place from people as t1 join body_builder as t2 on t1.people_id = t2.people_id <end>"}, {"text": "What is the campus fee of \"San Francisco State University\" in year 2000?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "db_id": "csu_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the campus fee of san francisco state university in year 2000", "sql_clean": "<start> select t1.campusfee from csu_fees as t1 join campuses as t2 on t1.campus = t2.id where t2.campus = san francisco state university and t1.year = 2000 <end>"}, {"text": "Show the manager name with most number of gas stations opened after 2000.", "sql": "SELECT manager_name FROM gas_station WHERE open_year  >  2000 GROUP BY manager_name ORDER BY count(*) DESC LIMIT 1", "db_id": "gas_company", "schema": {"tables": [], "columns": []}, "text_clean": "show the manager name with most number of gas stations opened after 2000", "sql_clean": "<start> select manager_name from gas_station where open_year > 2000 group by manager_name order by count(*) desc limit 1 <end>"}, {"text": "Find the name of customers who do not have an saving account.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of customers who do not have an saving account", "sql_clean": "<start> select cust_name from customer except select cust_name from customer where acc_type = 'saving' <end>"}, {"text": "Which classroom has the most students?", "sql": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1", "db_id": "student_1", "schema": {"tables": [], "columns": []}, "text_clean": "which classroom has the most students", "sql_clean": "<start> select classroom from list group by classroom order by count(*) desc limit 1 <end>"}, {"text": "Find the number of distinct projects.", "sql": "SELECT count(DISTINCT name) FROM projects", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of distinct projects", "sql_clean": "<start> select count(distinct name) from projects <end>"}, {"text": "What are the other account details for the account with the name 338?", "sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what are the other account details for the account with the name 338", "sql_clean": "<start> select other_account_details from accounts where account_name = 338 <end>"}, {"text": "Find the number of rooms located on each block floor.", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of rooms located on each block floor", "sql_clean": "<start> select count(*) , t1.blockfloor from block as t1 join room as t2 on t1.blockfloor = t2.blockfloor and t1.blockcode = t2.blockcode group by t1.blockfloor <end>"}, {"text": "Find the titles of all movies that have no ratings.", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the titles of all movies that have no ratings", "sql_clean": "<start> select title from movie where mid not in (select mid from rating) <end>"}, {"text": "What is the average snatch score of body builders?", "sql": "SELECT avg(Snatch) FROM body_builder", "db_id": "body_builder", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average snatch score of body builders", "sql_clean": "<start> select avg(snatch) from body_builder <end>"}, {"text": "What is the name, city, country, and elevation for every airport in the city of New York?", "sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name city country and elevation for every airport in the city of new york", "sql_clean": "<start> select name , city , country , elevation from airports where city = 'new york' <end>"}, {"text": "What is the name of the race that occurred most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the race that occurred most recently", "sql_clean": "<start> select name from races order by date desc limit 1 <end>"}, {"text": "Find the distinct majors of students who have treasurer votes.", "sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the distinct majors of students who have treasurer votes", "sql_clean": "<start> select distinct t1.major from student as t1 join voting_record as t2 on t1.stuid = t2.treasurer_vote <end>"}, {"text": "Find the average checking balance.", "sql": "SELECT avg(balance) FROM checking", "db_id": "small_bank_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the average checking balance", "sql_clean": "<start> select avg(balance) from checking <end>"}, {"text": "What are the titles of the books whose writer is not \"Elaine Lee\"?", "sql": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\"", "db_id": "book_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the titles of the books whose writer is not elaine lee", "sql_clean": "<start> select title from book where writer != elaine lee <end>"}, {"text": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?", "sql": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the types of vocals that the musician with the first name solveig played in the song a bar in amsterdam", "sql_clean": "<start> select type from vocals as t1 join songs as t2 on t1.songid = t2.songid join band as t3 on t1.bandmate = t3.id where t3.firstname = solveig and t2.title = a bar in amsterdam <end>"}, {"text": "Show ids for all employees who don't have a certificate.", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "show ids for all employees who don t have a certificate", "sql_clean": "<start> select eid from employee except select eid from certificate <end>"}, {"text": "Give the names of characteristics that are in two or more products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "give the names of characteristics that are in two or more products", "sql_clean": "<start> select t3.characteristic_name from products as t1 join product_characteristics as t2 on t1.product_id = t2.product_id join characteristics as t3 on t2.characteristic_id = t3.characteristic_id group by t3.characteristic_name having count(*) >= 2 <end>"}, {"text": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.", "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'", "db_id": "customers_campaigns_ecommerce", "schema": {"tables": [], "columns": []}, "text_clean": "show the shipping charge and customer id for customer orders with order status cancelled or paid", "sql_clean": "<start> select order_shipping_charges , customer_id from customer_orders where order_status_code = 'cancelled' or order_status_code = 'paid' <end>"}, {"text": "What are the maximum scores the team Boston Red Stockings got when the team won in postseason?", "sql": "SELECT max(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner  =  T2.team_id_br WHERE T2.name  =  'Boston Red Stockings';", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum scores the team boston red stockings got when the team won in postseason", "sql_clean": "<start> select max(t1.wins) from postseason as t1 join team as t2 on t1.team_id_winner = t2.team_id_br where t2.name = 'boston red stockings'; <end>"}, {"text": "What are the students ids of students who have more than one allergy?", "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the students ids of students who have more than one allergy", "sql_clean": "<start> select stuid from has_allergy group by stuid having count(*) >= 2 <end>"}, {"text": "Which department has the largest number of employees?", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "which department has the largest number of employees", "sql_clean": "<start> select name from department group by departmentid order by count(departmentid) desc limit 1; <end>"}, {"text": "What are the three countries that the least players are from?", "sql": "SELECT birth_country FROM player GROUP BY birth_country ORDER BY count(*) ASC LIMIT 3;", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the three countries that the least players are from", "sql_clean": "<start> select birth_country from player group by birth_country order by count(*) asc limit 3; <end>"}, {"text": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?", "sql": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "find the first and last name of the staff members who reported problems from the product rem but not aut", "sql_clean": "<start> select t3.staff_first_name , t3.staff_last_name from problems as t1 join product as t2 join staff as t3 on t1.product_id = t2.product_id and t1.reported_by_staff_id = t3.staff_id where t2.product_name = rem except select t3.staff_first_name , t3.staff_last_name from problems as t1 join product as t2 join staff as t3 on t1.product_id = t2.product_id and t1.reported_by_staff_id = t3.staff_id where t2.product_name = aut <end>"}, {"text": "Find the id of routes whose source and destination airports are in the United States.", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "find the id of routes whose source and destination airports are in the united states", "sql_clean": "<start> select rid from routes where dst_apid in (select apid from airports where country = 'united states') and src_apid in (select apid from airports where country = 'united states') <end>"}, {"text": "What is the total access count of documents that are of the most common document type?", "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "db_id": "document_management", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total access count of documents that are of the most common document type", "sql_clean": "<start> select sum(access_count) from documents group by document_type_code order by count(*) desc limit 1 <end>"}, {"text": "What are the start date and end date of each apartment booking?", "sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "what are the start date and end date of each apartment booking", "sql_clean": "<start> select booking_start_date , booking_end_date from apartment_bookings <end>"}, {"text": "What are the top 3 artists with the largest number of songs in the language Bangla?", "sql": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the top 3 artists with the largest number of songs in the language bangla", "sql_clean": "<start> select t1.artist_name from artist as t1 join song as t2 on t1.artist_name = t2.artist_name where t2.languages = bangla group by t2.artist_name order by count(*) desc limit 3 <end>"}, {"text": "What are the employee ids of employees who report to Payam, and what are their salaries?", "sql": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the employee ids of employees who report to payam and what are their salaries", "sql_clean": "<start> select employee_id , salary from employees where manager_id = (select employee_id from employees where first_name = 'payam' ) <end>"}, {"text": "Which clubs have one or more members whose advisor is \"1121\"?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "which clubs have one or more members whose advisor is 1121", "sql_clean": "<start> select distinct t1.clubname from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t3.advisor = 1121 <end>"}, {"text": "What are the issue dates of volumes associated with the artist aged 23 or younger?", "sql": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "what are the issue dates of volumes associated with the artist aged 23 or younger", "sql_clean": "<start> select issue_date from artist as t1 join volume as t2 on t1.artist_id = t2.artist_id where t1.age <= 23 <end>"}, {"text": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?", "sql": "SELECT count(*) FROM Project_Staff WHERE role_code  =  'leader' OR date_from  <  '1989-04-24 23:51:54'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "how many project staff worked as leaders or started working before 1989 04 24 23 51 54", "sql_clean": "<start> select count(*) from project_staff where role_code = 'leader' or date_from < '1989-04-24 23:51:54' <end>"}, {"text": "Show ids for all aircrafts with more than 1000 distance.", "sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "show ids for all aircrafts with more than 1000 distance", "sql_clean": "<start> select aid from aircraft where distance > 1000 <end>"}, {"text": "What is the name of the ship that is commanded by the youngest captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the ship that is commanded by the youngest captain", "sql_clean": "<start> select t1.name from ship as t1 join captain as t2 on t1.ship_id = t2.ship_id order by t2.age limit 1 <end>"}, {"text": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "find the name and attribute id of the attribute definitions with attribute value 0", "sql_clean": "<start> select t1.attribute_name , t1.attribute_id from attribute_definitions as t1 join catalog_contents_additional_attributes as t2 on t1.attribute_id = t2.attribute_id where t2.attribute_value = 0 <end>"}, {"text": "Show the name, role code, and date of birth for the employee with name 'Armani'.", "sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "show the name role code and date of birth for the employee with name armani", "sql_clean": "<start> select employee_name , role_code , date_of_birth from employees where employee_name = 'armani' <end>"}, {"text": "Which nurses are in charge of patients undergoing treatments?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "which nurses are in charge of patients undergoing treatments", "sql_clean": "<start> select distinct t2.name from undergoes as t1 join nurse as t2 on t1.assistingnurse = t2.employeeid <end>"}, {"text": "Find the number of distinct products Rodrick Heaney has bought so far.", "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of distinct products rodrick heaney has bought so far", "sql_clean": "<start> select count(distinct t3.product_id) from customers as t1 join customer_orders as t2 on t1.customer_id = t2.customer_id join order_items as t3 on t2.order_id = t3.order_id where t1.customer_name = rodrick heaney <end>"}, {"text": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "what are the product ids for the problems reported by christop berge with closure authorised by ashley medhurst", "sql_clean": "<start> select product_id from problems as t1 join staff as t2 on t1.reported_by_staff_id = t2.staff_id where t2.staff_first_name = christop and t2.staff_last_name = berge intersect select product_id from problems as t1 join staff as t2 on t1.closure_authorised_by_staff_id = t2.staff_id where t2.staff_first_name = ashley and t2.staff_last_name = medhurst <end>"}, {"text": "What are the names of wines made from red grapes and with prices above 50?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of wines made from red grapes and with prices above 50", "sql_clean": "<start> select t2.name from grapes as t1 join wine as t2 on t1.grape = t2.grape where t1.color = red and t2.price > 50 <end>"}, {"text": "Find the full names of faculties who are members of department with department number 520.", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "find the full names of faculties who are members of department with department number 520", "sql_clean": "<start> select t1.fname , t1.lname from faculty as t1 join member_of as t2 on t1.facid = t2.facid where t2.dno = 520 <end>"}, {"text": "What is the number of distinct teams that suffer elimination?", "sql": "SELECT COUNT (DISTINCT team) FROM elimination", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "what is the number of distinct teams that suffer elimination", "sql_clean": "<start> select count (distinct team) from elimination <end>"}, {"text": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different account ids that have made financial transactions as well as how many transactions correspond to each", "sql_clean": "<start> select account_id , count(*) from financial_transactions group by account_id <end>"}, {"text": "What is the average number of hours spent practicing for students who got rejected?", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average number of hours spent practicing for students who got rejected", "sql_clean": "<start> select avg(t1.hs) from player as t1 join tryout as t2 on t1.pid = t2.pid where t2.decision = 'no' <end>"}, {"text": "Find the max, average, and minimum gpa of all students in each department.", "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the max average and minimum gpa of all students in each department", "sql_clean": "<start> select max(stu_gpa) , avg(stu_gpa) , min(stu_gpa) , dept_code from student group by dept_code <end>"}, {"text": "How many professors attained either Ph.D. or Masters degrees?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many professors attained either ph d or masters degrees", "sql_clean": "<start> select count(*) from professor where prof_high_degree = 'ph.d.' or prof_high_degree = 'ma' <end>"}, {"text": "Find the titles of items that received both a rating higher than 8 and a rating below 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  >  8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rating  <  5", "db_id": "epinions_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the titles of items that received both a rating higher than 8 and a rating below 5", "sql_clean": "<start> select t1.title from item as t1 join review as t2 on t1.i_id = t2.i_id where t2.rating > 8 intersect select t1.title from item as t1 join review as t2 on t1.i_id = t2.i_id where t2.rating < 5 <end>"}, {"text": "How many games were played in park \"Columbia Park\" in 1907?", "sql": "SELECT count(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id  =  T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park';", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many games were played in park columbia park in 1907", "sql_clean": "<start> select count(*) from home_game as t1 join park as t2 on t1.park_id = t2.park_id where t1.year = 1907 and t2.park_name = 'columbia park'; <end>"}, {"text": "What is the id of the reviewer whose name includes the word \"Mike\"?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the id of the reviewer whose name includes the word mike", "sql_clean": "<start> select rid from reviewer where name like %mike% <end>"}, {"text": "Show all male student ids who don't play football.", "sql": "SELECT StuID FROM Student WHERE sex  =  'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname  =  \"Football\"", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "show all male student ids who don t play football", "sql_clean": "<start> select stuid from student where sex = 'm' except select stuid from sportsinfo where sportname = football <end>"}, {"text": "What are the names of musicals who have at 3 or more actors?", "sql": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3", "db_id": "musical", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of musicals who have at 3 or more actors", "sql_clean": "<start> select t2.name from actor as t1 join musical as t2 on t1.musical_id = t2.musical_id group by t1.musical_id having count(*) >= 3 <end>"}, {"text": "Which type of policy is most frequently used? Give me the policy type code.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "which type of policy is most frequently used give me the policy type code", "sql_clean": "<start> select policy_type_code from policies group by policy_type_code order by count(*) desc limit 1 <end>"}, {"text": "How many departments does the college has?", "sql": "SELECT count(DISTINCT dept_name) FROM department", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many departments does the college has", "sql_clean": "<start> select count(distinct dept_name) from department <end>"}, {"text": "Count the number of artists.", "sql": "SELECT count(*) FROM artist", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of artists", "sql_clean": "<start> select count(*) from artist <end>"}, {"text": "Return the full name of the customer who made the first rental.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "return the full name of the customer who made the first rental", "sql_clean": "<start> select t1.first_name , t1.last_name from customer as t1 join rental as t2 on t1.customer_id = t2.customer_id order by t2.rental_date asc limit 1 <end>"}, {"text": "What is the most popular payment method?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "what is the most popular payment method", "sql_clean": "<start> select payment_method_code from payments group by payment_method_code order by count(*) desc limit 1 <end>"}, {"text": "Who is the youngest employee in the company? List employee's first and last name.", "sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "who is the youngest employee in the company list employee s first and last name", "sql_clean": "<start> select first_name , last_name from employees order by birth_date desc limit 1; <end>"}, {"text": "Return the different statuses of cities, ascending by frequency.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "return the different statuses of cities ascending by frequency", "sql_clean": "<start> select status from city group by status order by count(*) asc <end>"}, {"text": "What is the last name of the artist who sang the most songs?", "sql": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the last name of the artist who sang the most songs", "sql_clean": "<start> select t2.lastname from performance as t1 join band as t2 on t1.bandmate = t2.id join songs as t3 on t3.songid = t1.songid group by lastname order by count(*) desc limit 1 <end>"}, {"text": "How many Professors are in building NEB?", "sql": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many professors are in building neb", "sql_clean": "<start> select count(*) from faculty where rank = professor and building = neb <end>"}, {"text": "How many scientists are there?", "sql": "SELECT count(*) FROM scientists", "db_id": "scientist_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many scientists are there", "sql_clean": "<start> select count(*) from scientists <end>"}, {"text": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what is average lesson price taught by staff with first name as janessa and last name as sawayn", "sql_clean": "<start> select avg(price) from lessons as t1 join staff as t2 on t1.staff_id = t2.staff_id where t2.first_name = janessa and t2.last_name = sawayn; <end>"}, {"text": "What are the names of all students who successfully tried out for the position of striker?", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all students who successfully tried out for the position of striker", "sql_clean": "<start> select t1.pname from player as t1 join tryout as t2 on t1.pid = t2.pid where t2.decision = 'yes' and t2.ppos = 'striker' <end>"}, {"text": "Show the parties that have both representatives in New York state and representatives in Pennsylvania state.", "sql": "SELECT Party FROM representative WHERE State  =  \"New York\" INTERSECT SELECT Party FROM representative WHERE State  =  \"Pennsylvania\"", "db_id": "election_representative", "schema": {"tables": [], "columns": []}, "text_clean": "show the parties that have both representatives in new york state and representatives in pennsylvania state", "sql_clean": "<start> select party from representative where state = new york intersect select party from representative where state = pennsylvania <end>"}, {"text": "What is the type description of the organization whose detail is listed as 'quo'?", "sql": "SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type  =  T2.organisation_type WHERE T2.organisation_details  =  'quo'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what is the type description of the organization whose detail is listed as quo", "sql_clean": "<start> select t1.organisation_type_description from organisation_types as t1 join organisations as t2 on t1.organisation_type = t2.organisation_type where t2.organisation_details = 'quo' <end>"}, {"text": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.", "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all the rooms that have a price higher than 160 and can accommodate more than 2 people report room names and ids", "sql_clean": "<start> select roomname , roomid from rooms where baseprice > 160 and maxoccupancy > 2; <end>"}, {"text": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5", "db_id": "store_product", "schema": {"tables": [], "columns": []}, "text_clean": "find products with max page size as a4 or pages per minute color smaller than 5", "sql_clean": "<start> select product from product where max_page_size = a4 or pages_per_minute_color < 5 <end>"}, {"text": "Show the people that have been comptroller the most times and the corresponding number of times.", "sql": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "election", "schema": {"tables": [], "columns": []}, "text_clean": "show the people that have been comptroller the most times and the corresponding number of times", "sql_clean": "<start> select comptroller , count(*) from party group by comptroller order by count(*) desc limit 1 <end>"}, {"text": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all employees who have a certificate to fly boeing 737 800", "sql_clean": "<start> select t1.name from employee as t1 join certificate as t2 on t1.eid = t2.eid join aircraft as t3 on t3.aid = t2.aid where t3.name = boeing 737-800 <end>"}, {"text": "Find the total budgets of the Marketing or Finance department.", "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the total budgets of the marketing or finance department", "sql_clean": "<start> select sum(budget) from department where dept_name = 'marketing' or dept_name = 'finance' <end>"}, {"text": "Which month has the most happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1", "db_id": "coffee_shop", "schema": {"tables": [], "columns": []}, "text_clean": "which month has the most happy hours", "sql_clean": "<start> select month from happy_hour group by month order by count(*) desc limit 1 <end>"}, {"text": "What destination has the fewest number of flights?", "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what destination has the fewest number of flights", "sql_clean": "<start> select destination from flight group by destination order by count(*) limit 1 <end>"}, {"text": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?", "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of products from the supplier with id 2 which are more expensive than the average price across all products", "sql_clean": "<start> select t1.product_id from product_suppliers as t1 join products as t2 on t1.product_id = t2.product_id where t1.supplier_id = 2 and t2.product_price > (select avg(product_price) from products) <end>"}, {"text": "What is the name of the song that was released in the most recent year?", "sql": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the song that was released in the most recent year", "sql_clean": "<start> select song_name , releasedate from song order by releasedate desc limit 1 <end>"}, {"text": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the salaray and name of the employee with the most certificates to fly planes more than 5000", "sql_clean": "<start> select t1.name from employee as t1 join certificate as t2 on t1.eid = t2.eid join aircraft as t3 on t3.aid = t2.aid where t3.distance > 5000 group by t1.eid order by count(*) desc limit 1 <end>"}, {"text": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year", "sql_clean": "<start> select max(t2.fastestlapspeed) , t1.name , t1.year from races as t1 join results as t2 on t1.raceid = t2.raceid where t1.year > 2014 group by t1.name order by t1.year <end>"}, {"text": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly", "sql_clean": "<start> select t2.name from certificate as t1 join aircraft as t2 on t2.aid = t1.aid where t2.distance > 5000 group by t1.aid order by count(*) >= 5 <end>"}, {"text": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".", "sql": "SELECT max(Sales_billion) ,  min(Sales_billion) FROM Companies WHERE Industry != \"Banking\"", "db_id": "company_office", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum and minimum sales of the companies whose industries are not banking", "sql_clean": "<start> select max(sales_billion) , min(sales_billion) from companies where industry != banking <end>"}, {"text": "What is the party that has the largest number of representatives?", "sql": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "election_representative", "schema": {"tables": [], "columns": []}, "text_clean": "what is the party that has the largest number of representatives", "sql_clean": "<start> select party , count(*) from representative group by party order by count(*) desc limit 1 <end>"}, {"text": "What are the names of artists that have not had any exhibitions?", "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of artists that have not had any exhibitions", "sql_clean": "<start> select name from artist where artist_id not in (select artist_id from exhibition) <end>"}, {"text": "What are the id of all the files in mp3 format?", "sql": "SELECT f_id FROM files WHERE formats  =  \"mp3\"", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the id of all the files in mp3 format", "sql_clean": "<start> select f_id from files where formats = mp3 <end>"}, {"text": "What document status codes do we have?", "sql": "SELECT document_status_code FROM Ref_Document_Status;", "db_id": "cre_Doc_Control_Systems", "schema": {"tables": [], "columns": []}, "text_clean": "what document status codes do we have", "sql_clean": "<start> select document_status_code from ref_document_status; <end>"}, {"text": "What is the average price for each type of product?", "sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average price for each type of product", "sql_clean": "<start> select product_type_code , avg(product_price) from products group by product_type_code <end>"}, {"text": "Return the name and job title of the staff with the latest date assigned.", "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "return the name and job title of the staff with the latest date assigned", "sql_clean": "<start> select t1.staff_name , t2.job_title_code from staff as t1 join staff_department_assignments as t2 on t1.staff_id = t2.staff_id order by t2.date_assigned_to desc limit 1 <end>"}, {"text": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "what are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000", "sql_clean": "<start> select investor from entrepreneur where money_requested > 140000 intersect select investor from entrepreneur where money_requested < 120000 <end>"}, {"text": "Find the average ram mib size of the chip models that are never used by any phone.", "sql": "SELECT avg(RAM_MiB) FROM chip_model WHERE model_name NOT IN (SELECT chip_model FROM phone)", "db_id": "phone_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the average ram mib size of the chip models that are never used by any phone", "sql_clean": "<start> select avg(ram_mib) from chip_model where model_name not in (select chip_model from phone) <end>"}, {"text": "What is the name of all tracks in the album named Balls to the Wall?", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of all tracks in the album named balls to the wall", "sql_clean": "<start> select t2.name from albums as t1 join tracks as t2 on t1.id = t2.genre_id where t1.title = balls to the wall; <end>"}, {"text": "What are the first names for all students who are from the major numbered 600?", "sql": "SELECT Fname FROM Student WHERE Major  =  600", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first names for all students who are from the major numbered 600", "sql_clean": "<start> select fname from student where major = 600 <end>"}, {"text": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many trips stated from a station in mountain view and ended at one in palo alto", "sql_clean": "<start> select count(*) from station as t1 join trip as t2 join station as t3 join trip as t4 on t1.id = t2.start_station_id and t2.id = t4.id and t3.id = t4.end_station_id where t1.city = mountain view and t3.city = palo alto <end>"}, {"text": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year", "sql_clean": "<start> select avg(t2.fastestlapspeed) , t1.name , t1.year from races as t1 join results as t2 on t1.raceid = t2.raceid where t1.year > 2014 group by t1.name order by t1.year <end>"}, {"text": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of tourist attractions that can be reached by bus or is at address 254 ottilie junction", "sql_clean": "<start> select t2.name from locations as t1 join tourist_attractions as t2 on t1.location_id = t2.location_id where t1.address = 254 ottilie junction or t2.how_to_get_there = bus <end>"}, {"text": "Show the names and genders of players with a coach starting after 2011.", "sql": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011", "db_id": "riding_club", "schema": {"tables": [], "columns": []}, "text_clean": "show the names and genders of players with a coach starting after 2011", "sql_clean": "<start> select t3.player_name , t3.gender from player_coach as t1 join coach as t2 on t1.coach_id = t2.coach_id join player as t3 on t1.player_id = t3.player_id where t1.starting_year > 2011 <end>"}, {"text": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "db_id": "farm", "schema": {"tables": [], "columns": []}, "text_clean": "which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500", "sql_clean": "<start> select status from city where population > 1500 intersect select status from city where population < 500 <end>"}, {"text": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "return the colleges that have players who play the midfielder position as well as players who play the defender position", "sql_clean": "<start> select college from match_season where position = midfielder intersect select college from match_season where position = defender <end>"}, {"text": "List the locations of schools in ascending order of enrollment.", "sql": "SELECT LOCATION FROM school ORDER BY Enrollment ASC", "db_id": "school_player", "schema": {"tables": [], "columns": []}, "text_clean": "list the locations of schools in ascending order of enrollment", "sql_clean": "<start> select location from school order by enrollment asc <end>"}, {"text": "List the cities which have more than one airport and number of airports.", "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "list the cities which have more than one airport and number of airports", "sql_clean": "<start> select city , count(*) from airports group by city having count(*) > 1 <end>"}, {"text": "Please show different software platforms and the corresponding number of devices using each.", "sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "please show different software platforms and the corresponding number of devices using each", "sql_clean": "<start> select software_platform , count(*) from device group by software_platform <end>"}, {"text": "What is the location of the club named \"Tennis Club\"?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the location of the club named tennis club", "sql_clean": "<start> select clublocation from club where clubname = tennis club <end>"}, {"text": "Find the id of the customer who made the most orders.", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "db_id": "tracking_orders", "schema": {"tables": [], "columns": []}, "text_clean": "find the id of the customer who made the most orders", "sql_clean": "<start> select t1.customer_id from customers as t1 join orders as t2 on t1.customer_id = t2.customer_id group by t1.customer_id order by count(*) desc limit 1 <end>"}, {"text": "How many products are there?", "sql": "SELECT count(*) FROM products", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "how many products are there", "sql_clean": "<start> select count(*) from products <end>"}, {"text": "What are the details of the three most expensive hotels?", "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "what are the details of the three most expensive hotels", "sql_clean": "<start> select other_hotel_details from hotels order by price_range desc limit 3 <end>"}, {"text": "Find all the players' first name and last name who have empty death record.", "sql": "SELECT name_first ,  name_last FROM player WHERE death_year = '';", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "find all the players first name and last name who have empty death record", "sql_clean": "<start> select name_first , name_last from player where death_year = ''; <end>"}, {"text": "Show details of all visitors.", "sql": "SELECT Tourist_Details FROM VISITORS", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "show details of all visitors", "sql_clean": "<start> select tourist_details from visitors <end>"}, {"text": "What is the total number of hours per work and number of games played by David Shieber?", "sql": "SELECT sum(hoursperweek) ,  sum(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.Fname  =  \"David\" AND T2.Lname  =  \"Shieber\"", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total number of hours per work and number of games played by david shieber", "sql_clean": "<start> select sum(hoursperweek) , sum(gamesplayed) from sportsinfo as t1 join student as t2 on t1.stuid = t2.stuid where t2.fname = david and t2.lname = shieber <end>"}, {"text": "What is the name and opening year for the branch that registered the most members in 2016?", "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name and opening year for the branch that registered the most members in 2016", "sql_clean": "<start> select t2.name , t2.open_year from membership_register_branch as t1 join branch as t2 on t1.branch_id = t2.branch_id where t1.register_year = 2016 group by t2.branch_id order by count(*) desc limit 1 <end>"}, {"text": "Count the number of programs broadcast for each time section of a day.", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "db_id": "program_share", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of programs broadcast for each time section of a day", "sql_clean": "<start> select count(*) , time_of_day from broadcast group by time_of_day <end>"}, {"text": "List the branch name and city without any registered members.", "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "list the branch name and city without any registered members", "sql_clean": "<start> select name , city from branch where branch_id not in (select branch_id from membership_register_branch) <end>"}, {"text": "What are the first names of all teachers who have taught a course and the corresponding descriptions?", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first names of all teachers who have taught a course and the corresponding descriptions", "sql_clean": "<start> select t2.emp_fname , t3.crs_description from class as t1 join employee as t2 on t1.prof_num = t2.emp_num join course as t3 on t1.crs_code = t3.crs_code <end>"}, {"text": "What is zip code of customer with first name as Carole and last name as Bernhard?", "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "db_id": "driving_school", "schema": {"tables": [], "columns": []}, "text_clean": "what is zip code of customer with first name as carole and last name as bernhard", "sql_clean": "<start> select t2.zip_postcode from customers as t1 join addresses as t2 on t1.customer_address_id = t2.address_id where t1.first_name = carole and t1.last_name = bernhard <end>"}, {"text": "What are the names of the songs whose title has the word \"the\"?", "sql": "SELECT title FROM songs WHERE title LIKE '% the %'", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the songs whose title has the word the", "sql_clean": "<start> select title from songs where title like '% the %' <end>"}, {"text": "List the names of all distinct wines in alphabetical order.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of all distinct wines in alphabetical order", "sql_clean": "<start> select distinct name from wine order by name <end>"}, {"text": "List the physicians' employee ids together with their primary affiliation departments' ids.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the physicians employee ids together with their primary affiliation departments ids", "sql_clean": "<start> select physician , department from affiliated_with where primaryaffiliation = 1 <end>"}, {"text": "How many cards does customer Art Turcotte have?", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "how many cards does customer art turcotte have", "sql_clean": "<start> select count(*) from customers_cards as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.customer_first_name = art and t2.customer_last_name = turcotte <end>"}, {"text": "What are the headquarters without companies that are in the banking industry?", "sql": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'", "db_id": "gas_company", "schema": {"tables": [], "columns": []}, "text_clean": "what are the headquarters without companies that are in the banking industry", "sql_clean": "<start> select headquarters from company except select headquarters from company where main_industry = 'banking' <end>"}, {"text": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.", "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "find the date became customers of the customers whose id is between 10 and 20", "sql_clean": "<start> select date_became_customer from customers where customer_id between 10 and 20 <end>"}, {"text": "Which countries have at least 3 cities?", "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3", "db_id": "sakila_1", "schema": {"tables": [], "columns": []}, "text_clean": "which countries have at least 3 cities", "sql_clean": "<start> select t2.country from city as t1 join country as t2 on t1.country_id = t2.country_id group by t2.country_id having count(*) >= 3 <end>"}, {"text": "How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many movies were made before 2000", "sql_clean": "<start> select count(*) from movie where year < 2000 <end>"}, {"text": "Find the number of items without any review.", "sql": "SELECT count(*) FROM item WHERE i_id NOT IN (SELECT i_id FROM review)", "db_id": "epinions_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of items without any review", "sql_clean": "<start> select count(*) from item where i_id not in (select i_id from review) <end>"}, {"text": "List the first and last name of the students who do not have any food type allergy.", "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the first and last name of the students who do not have any food type allergy", "sql_clean": "<start> select fname , lname from student where stuid not in (select t1.stuid from has_allergy as t1 join allergy_type as t2 on t1.allergy = t2.allergy where t2.allergytype = food) <end>"}, {"text": "Show the names of all the activities Mark Giuliano participates in.", "sql": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of all the activities mark giuliano participates in", "sql_clean": "<start> select t3.activity_name from faculty as t1 join faculty_participates_in as t2 on t1.facid = t2.facid join activity as t3 on t3.actid = t2.actid where t1.fname = mark and t1.lname = giuliano <end>"}, {"text": "List the state in the US with the most invoices.", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the state in the us with the most invoices", "sql_clean": "<start> select billing_state , count(*) from invoices where billing_country = usa group by billing_state order by count(*) desc limit 1; <end>"}, {"text": "What are the first name and last name of all the instructors?", "sql": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first name and last name of all the instructors", "sql_clean": "<start> select fname , lname from faculty where rank = instructor <end>"}, {"text": "Find the maximum and minimum monthly rental for all student addresses.", "sql": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses", "db_id": "behavior_monitoring", "schema": {"tables": [], "columns": []}, "text_clean": "find the maximum and minimum monthly rental for all student addresses", "sql_clean": "<start> select max(monthly_rental) , min(monthly_rental) from student_addresses <end>"}, {"text": "What are the tracks that Dean Peeters bought?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the tracks that dean peeters bought", "sql_clean": "<start> select t1.name from tracks as t1 join invoice_lines as t2 on t1.id = t2.track_id join invoices as t3 on t3.id = t2.invoice_id join customers as t4 on t4.id = t3.customer_id where t4.first_name = daan and t4.last_name = peeters; <end>"}, {"text": "What is the average enrollment of schools?", "sql": "SELECT avg(Enrollment) FROM school", "db_id": "school_player", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average enrollment of schools", "sql_clean": "<start> select avg(enrollment) from school <end>"}, {"text": "What are the different card type codes?", "sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "what are the different card type codes", "sql_clean": "<start> select distinct card_type_code from customers_cards <end>"}, {"text": "Find the names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of customers who never ordered product latte", "sql_clean": "<start> select customer_name from customers except select t1.customer_name from customers as t1 join customer_orders as t2 on t1.customer_id = t2.customer_id join order_items as t3 on t2.order_id = t3.order_id join products as t4 on t3.product_id = t4.product_id where t4.product_details = 'latte' <end>"}, {"text": "What are the details of all products?", "sql": "SELECT DISTINCT product_details FROM products", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "what are the details of all products", "sql_clean": "<start> select distinct product_details from products <end>"}, {"text": "Find the name of the product that has the smallest capacity.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the product that has the smallest capacity", "sql_clean": "<start> select catalog_entry_name from catalog_contents order by capacity asc limit 1 <end>"}, {"text": "List the names of companies in descending order of market value.", "sql": "SELECT name FROM Companies ORDER BY Market_Value_billion DESC", "db_id": "company_office", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of companies in descending order of market value", "sql_clean": "<start> select name from companies order by market_value_billion desc <end>"}, {"text": "Find the name of the user who has the largest number of followers.", "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "db_id": "twitter_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the user who has the largest number of followers", "sql_clean": "<start> select name from user_profiles order by followers desc limit 1 <end>"}, {"text": "Return all the distinct secretary votes made in the fall election cycle.", "sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "return all the distinct secretary votes made in the fall election cycle", "sql_clean": "<start> select distinct secretary_vote from voting_record where election_cycle = fall <end>"}, {"text": "Which city is the address of the store named \"FJA Filming\" located in?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "which city is the address of the store named fja filming located in", "sql_clean": "<start> select t1.city_town from addresses as t1 join stores as t2 on t1.address_id = t2.address_id where t2.store_name = fja filming <end>"}, {"text": "Show all church names that have hosted least two weddings.", "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2", "db_id": "wedding", "schema": {"tables": [], "columns": []}, "text_clean": "show all church names that have hosted least two weddings", "sql_clean": "<start> select t1.name from church as t1 join wedding as t2 on t1.church_id = t2.church_id group by t1.church_id having count(*) >= 2 <end>"}, {"text": "Return the types of film market estimations in 1995.", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "return the types of film market estimations in 1995", "sql_clean": "<start> select type from film_market_estimation where year = 1995 <end>"}, {"text": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"", "db_id": "entertainment_awards", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of festivals that have nominated artworks of type program talent show", "sql_clean": "<start> select t3.festival_name from nomination as t1 join artwork as t2 on t1.artwork_id = t2.artwork_id join festival_detail as t3 on t1.festival_id = t3.festival_id where t2.type = program talent show <end>"}, {"text": "Find the number of students in each major.", "sql": "SELECT count(*) ,  major FROM student GROUP BY major", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of students in each major", "sql_clean": "<start> select count(*) , major from student group by major <end>"}, {"text": "List the file size and format for all songs that have resolution lower than 800.", "sql": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the file size and format for all songs that have resolution lower than 800", "sql_clean": "<start> select distinct t1.file_size , t1.formats from files as t1 join song as t2 on t1.f_id = t2.f_id where t2.resolution < 800 <end>"}, {"text": "What are each physician's employee id and department id primarily affiliated.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are each physician s employee id and department id primarily affiliated", "sql_clean": "<start> select physician , department from affiliated_with where primaryaffiliation = 1 <end>"}, {"text": "What are the phone numbers for each employee?", "sql": "SELECT Phone FROM EMPLOYEE", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the phone numbers for each employee", "sql_clean": "<start> select phone from employee <end>"}, {"text": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "what are the highest and lowest prices of products grouped by and alphabetically ordered by product type", "sql_clean": "<start> select max(product_price) , min(product_price) , product_type_code from products group by product_type_code order by product_type_code <end>"}, {"text": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.", "sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "which tourist attractions are related to royal family tell me their details and how we can get there", "sql_clean": "<start> select t1.royal_family_details , t2.how_to_get_there from royal_family as t1 join tourist_attractions as t2 on t1.royal_family_id = t2.tourist_attraction_id <end>"}, {"text": "Find the name of bank branch that provided the greatest total amount of loans.", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "db_id": "loan_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of bank branch that provided the greatest total amount of loans", "sql_clean": "<start> select t1.bname from bank as t1 join loan as t2 on t1.branch_id = t2.branch_id group by t1.bname order by sum(t2.amount) desc limit 1 <end>"}, {"text": "What are the names of buildings sorted in descending order of building height?", "sql": "SELECT name FROM buildings ORDER BY Height DESC", "db_id": "company_office", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of buildings sorted in descending order of building height", "sql_clean": "<start> select name from buildings order by height desc <end>"}, {"text": "How many technicians are there?", "sql": "SELECT count(*) FROM technician", "db_id": "machine_repair", "schema": {"tables": [], "columns": []}, "text_clean": "how many technicians are there", "sql_clean": "<start> select count(*) from technician <end>"}, {"text": "Show the names of companies in the banking or retailing industry?", "sql": "SELECT Name FROM company WHERE Industry  =  \"Banking\" OR Industry  =  \"Retailing\"", "db_id": "company_employee", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of companies in the banking or retailing industry", "sql_clean": "<start> select name from company where industry = banking or industry = retailing <end>"}, {"text": "What is average and maximum salary of all employees.", "sql": "SELECT avg(salary) ,  max(salary) FROM Employee", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is average and maximum salary of all employees", "sql_clean": "<start> select avg(salary) , max(salary) from employee <end>"}, {"text": "Return the the details of all products.", "sql": "SELECT DISTINCT product_details FROM products", "db_id": "customers_and_addresses", "schema": {"tables": [], "columns": []}, "text_clean": "return the the details of all products", "sql_clean": "<start> select distinct product_details from products <end>"}, {"text": "display the full name (first and last name), and salary of those employees who working in any department located in London.", "sql": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "display the full name first and last name and salary of those employees who working in any department located in london", "sql_clean": "<start> select first_name , last_name , salary from employees as t1 join departments as t2 on t1.department_id = t2.department_id join locations as t3 on t2.location_id = t3.location_id where t3.city = 'london' <end>"}, {"text": "What is the complete description of the researcher role.", "sql": "SELECT role_description FROM Staff_Roles WHERE role_code  =  'researcher'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what is the complete description of the researcher role", "sql_clean": "<start> select role_description from staff_roles where role_code = 'researcher' <end>"}, {"text": "How many classes does the professor whose last name is Graztevski teach?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many classes does the professor whose last name is graztevski teach", "sql_clean": "<start> select count(*) from employee as t1 join class as t2 on t1.emp_num = t2.prof_num where t1.emp_lname = 'graztevski' <end>"}, {"text": "List the name of ships whose nationality is not \"United States\".", "sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"", "db_id": "ship_mission", "schema": {"tables": [], "columns": []}, "text_clean": "list the name of ships whose nationality is not united states", "sql_clean": "<start> select name from ship where nationality != united states <end>"}, {"text": "What is the software platform that is most common amongst all devices?", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "what is the software platform that is most common amongst all devices", "sql_clean": "<start> select software_platform from device group by software_platform order by count(*) desc limit 1 <end>"}, {"text": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "for each product that has problems find the number of problems reported after 1986 11 13 and the product id", "sql_clean": "<start> select count(*) , t2.product_id from problems as t1 join product as t2 on t1.product_id = t2.product_id where t1.date_problem_reported > 1986-11-13 group by t2.product_id <end>"}, {"text": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?", "sql": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "what are the famous title of the artists associated with volumes with more than 2 weeks on top", "sql_clean": "<start> select t1.famous_title from artist as t1 join volume as t2 on t1.artist_id = t2.artist_id where t2.weeks_on_top > 2 <end>"}, {"text": "How many workshops did each author submit to? Return the author name and the number of workshops.", "sql": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "how many workshops did each author submit to return the author name and the number of workshops", "sql_clean": "<start> select t2.author , count(distinct t1.workshop_id) from acceptance as t1 join submission as t2 on t1.submission_id = t2.submission_id group by t2.author <end>"}, {"text": "List names for drivers from Hartford city and younger than 40.", "sql": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40", "db_id": "school_bus", "schema": {"tables": [], "columns": []}, "text_clean": "list names for drivers from hartford city and younger than 40", "sql_clean": "<start> select name from driver where home_city = 'hartford' and age < 40 <end>"}, {"text": "Find the last names of faculties in building Barton in alphabetic order.", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "db_id": "college_3", "schema": {"tables": [], "columns": []}, "text_clean": "find the last names of faculties in building barton in alphabetic order", "sql_clean": "<start> select lname from faculty where building = barton order by lname <end>"}, {"text": "Which part fault requires the most number of skills to fix? List part id and name.", "sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1", "db_id": "assets_maintenance", "schema": {"tables": [], "columns": []}, "text_clean": "which part fault requires the most number of skills to fix list part id and name", "sql_clean": "<start> select t1.part_id , t1.part_name from parts as t1 join part_faults as t2 on t1.part_id = t2.part_id join skills_required_to_fix as t3 on t2.part_fault_id = t3.part_fault_id group by t1.part_id order by count(*) desc limit 1 <end>"}, {"text": "Count the number of products in the category 'Seeds'.", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of products in the category seeds", "sql_clean": "<start> select count(*) from products where product_category_code = seeds <end>"}, {"text": "What are the names of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of courses without prerequisites", "sql_clean": "<start> select title from course where course_id not in (select course_id from prereq) <end>"}, {"text": "Show the ministers and the time they took and left office, listed by the time they left office.", "sql": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "db_id": "party_people", "schema": {"tables": [], "columns": []}, "text_clean": "show the ministers and the time they took and left office listed by the time they left office", "sql_clean": "<start> select minister , took_office , left_office from party order by left_office <end>"}, {"text": "What is the total and maximum duration for all trips with the bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total and maximum duration for all trips with the bike id 636", "sql_clean": "<start> select sum(duration) , max(duration) from trip where bike_id = 636 <end>"}, {"text": "Who is the advisor of student with ID 1004?", "sql": "SELECT Advisor FROM Student WHERE StuID  =  1004", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "who is the advisor of student with id 1004", "sql_clean": "<start> select advisor from student where stuid = 1004 <end>"}, {"text": "Which room has cheapest base price? List the room's name and the base price.", "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "which room has cheapest base price list the room s name and the base price", "sql_clean": "<start> select roomname , baseprice from rooms order by baseprice asc limit 1; <end>"}, {"text": "List the email addresses of the drama workshop groups located in Alaska state.", "sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "list the email addresses of the drama workshop groups located in alaska state", "sql_clean": "<start> select t2.store_email_address from addresses as t1 join drama_workshop_groups as t2 on t1.address_id = t2.address_id where t1.state_county = alaska <end>"}, {"text": "What is the name, city, and country of the airport with the lowest altitude?", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name city and country of the airport with the lowest altitude", "sql_clean": "<start> select name , city , country from airports order by elevation limit 1 <end>"}, {"text": "How many wines are produced at Robert Biale winery?", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many wines are produced at robert biale winery", "sql_clean": "<start> select count(*) from wine where winery = robert biale <end>"}, {"text": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of colleges in la that have more than 15 000 students and of colleges in az with less than 13 000 students", "sql_clean": "<start> select cname from college where enr < 13000 and state = az union select cname from college where enr > 15000 and state = la <end>"}, {"text": "What is the maximum OMIM value in the database?", "sql": "SELECT max(OMIM) FROM enzyme", "db_id": "medicine_enzyme_interaction", "schema": {"tables": [], "columns": []}, "text_clean": "what is the maximum omim value in the database", "sql_clean": "<start> select max(omim) from enzyme <end>"}, {"text": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"", "db_id": "entrepreneur", "schema": {"tables": [], "columns": []}, "text_clean": "return the dates of birth for entrepreneurs who have either the investor simon woodroffe or peter jones", "sql_clean": "<start> select t2.date_of_birth from entrepreneur as t1 join people as t2 on t1.people_id = t2.people_id where t1.investor = simon woodroffe or t1.investor = peter jones <end>"}, {"text": "Sort the names of products in ascending order of their price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "sort the names of products in ascending order of their price", "sql_clean": "<start> select product_name from products order by product_price asc <end>"}, {"text": "How many allergies are there?", "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many allergies are there", "sql_clean": "<start> select count(distinct allergy) from allergy_type <end>"}, {"text": "How many customers have email that contains \"gmail.com\"?", "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"", "db_id": "chinook_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many customers have email that contains gmail com", "sql_clean": "<start> select count(*) from customer where email like %gmail.com% <end>"}, {"text": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "what are the times of elimination for any instances in which the elimination was done by punk or orton", "sql_clean": "<start> select time from elimination where eliminated_by = punk or eliminated_by = orton <end>"}, {"text": "How many CSU campuses are there?", "sql": "SELECT count(*) FROM campuses", "db_id": "csu_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many csu campuses are there", "sql_clean": "<start> select count(*) from campuses <end>"}, {"text": "Find the average age of students living in each dorm and the name of dorm.", "sql": "SELECT avg(T1.age) ,  T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid GROUP BY T3.dorm_name", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the average age of students living in each dorm and the name of dorm", "sql_clean": "<start> select avg(t1.age) , t3.dorm_name from student as t1 join lives_in as t2 on t1.stuid = t2.stuid join dorm as t3 on t3.dormid = t2.dormid group by t3.dorm_name <end>"}, {"text": "Find the state of the college which player Charles is attending.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the state of the college which player charles is attending", "sql_clean": "<start> select t1.state from college as t1 join tryout as t2 on t1.cname = t2.cname join player as t3 on t2.pid = t3.pid where t3.pname = 'charles' <end>"}, {"text": "What is the minimum snatch score?", "sql": "SELECT min(snatch) FROM body_builder", "db_id": "body_builder", "schema": {"tables": [], "columns": []}, "text_clean": "what is the minimum snatch score", "sql_clean": "<start> select min(snatch) from body_builder <end>"}, {"text": "How many distinct students are enrolled in courses?", "sql": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "how many distinct students are enrolled in courses", "sql_clean": "<start> select count(distinct student_id) from student_course_enrolment <end>"}, {"text": "For each movie that received more than 3 reviews, what is the average rating?", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "for each movie that received more than 3 reviews what is the average rating", "sql_clean": "<start> select mid , avg(stars) from rating group by mid having count(*) >= 2 <end>"}, {"text": "Count the number of characteristics the product 'sesame' has.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of characteristics the product sesame has", "sql_clean": "<start> select count(*) from products as t1 join product_characteristics as t2 on t1.product_id = t2.product_id where t1.product_name = sesame <end>"}, {"text": "What are the total points of gymnasts, ordered by their floor exercise points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "db_id": "gymnast", "schema": {"tables": [], "columns": []}, "text_clean": "what are the total points of gymnasts ordered by their floor exercise points descending", "sql_clean": "<start> select total_points from gymnast order by floor_exercise_points desc <end>"}, {"text": "Show the names of products that are in at least two events.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2", "db_id": "solvency_ii", "schema": {"tables": [], "columns": []}, "text_clean": "show the names of products that are in at least two events", "sql_clean": "<start> select t1.product_name from products as t1 join products_in_events as t2 on t1.product_id = t2.product_id group by t1.product_name having count(*) >= 2 <end>"}, {"text": "Find the ids of reviewers who didn't only give 4 star.", "sql": "SELECT rID FROM Rating WHERE stars != 4", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the ids of reviewers who didn t only give 4 star", "sql_clean": "<start> select rid from rating where stars != 4 <end>"}, {"text": "Count the number of different ranks of captain.", "sql": "SELECT count(DISTINCT rank) FROM captain", "db_id": "ship_1", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of different ranks of captain", "sql_clean": "<start> select count(distinct rank) from captain <end>"}, {"text": "Find the number of tweets in record.", "sql": "SELECT count(*) FROM tweets", "db_id": "twitter_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of tweets in record", "sql_clean": "<start> select count(*) from tweets <end>"}, {"text": "In the year 2000, what is the campus fee for San Francisco State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "db_id": "csu_1", "schema": {"tables": [], "columns": []}, "text_clean": "in the year 2000 what is the campus fee for san francisco state university", "sql_clean": "<start> select t1.campusfee from csu_fees as t1 join campuses as t2 on t1.campus = t2.id where t2.campus = san francisco state university and t1.year = 2000 <end>"}, {"text": "What are the names of the customers and staff members?", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "db_id": "insurance_and_eClaims", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of the customers and staff members", "sql_clean": "<start> select customer_details from customers union select staff_details from staff <end>"}, {"text": "Find the name of all the clubs at \"AKW\".", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of all the clubs at akw", "sql_clean": "<start> select clubname from club where clublocation = akw <end>"}, {"text": "What are all the calendar dates and day Numbers?", "sql": "SELECT calendar_date ,  day_Number FROM Ref_calendar", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "what are all the calendar dates and day numbers", "sql_clean": "<start> select calendar_date , day_number from ref_calendar <end>"}, {"text": "Return the song in the volume that has spent the most weeks on top?", "sql": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1", "db_id": "music_4", "schema": {"tables": [], "columns": []}, "text_clean": "return the song in the volume that has spent the most weeks on top", "sql_clean": "<start> select song from volume order by weeks_on_top desc limit 1 <end>"}, {"text": "What are the unique block codes that have available rooms?", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the unique block codes that have available rooms", "sql_clean": "<start> select distinct blockcode from room where unavailable = 0 <end>"}, {"text": "Show the station name and number of trains in each station.", "sql": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id", "db_id": "train_station", "schema": {"tables": [], "columns": []}, "text_clean": "show the station name and number of trains in each station", "sql_clean": "<start> select t2.name , count(*) from train_station as t1 join station as t2 on t1.station_id = t2.station_id group by t1.station_id <end>"}, {"text": "What are the names of all colleges that have two or more players?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "db_id": "match_season", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all colleges that have two or more players", "sql_clean": "<start> select college from match_season group by college having count(*) >= 2 <end>"}, {"text": "Find the name of the storm that affected both Afghanistan and Albania regions.", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the storm that affected both afghanistan and albania regions", "sql_clean": "<start> select t3.name from affected_region as t1 join region as t2 on t1.region_id = t2.region_id join storm as t3 on t1.storm_id = t3.storm_id where t2.region_name = 'afghanistan' intersect select t3.name from affected_region as t1 join region as t2 on t1.region_id = t2.region_id join storm as t3 on t1.storm_id = t3.storm_id where t2.region_name = 'albania' <end>"}, {"text": "Show the times of elimination by \"Punk\" or \"Orton\".", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "show the times of elimination by punk or orton", "sql_clean": "<start> select time from elimination where eliminated_by = punk or eliminated_by = orton <end>"}, {"text": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids for courses in the fall of 2009 or the spring of 2010", "sql_clean": "<start> select course_id from section where semester = 'fall' and year = 2009 union select course_id from section where semester = 'spring' and year = 2010 <end>"}, {"text": "How many customers live in Prague city?", "sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many customers live in prague city", "sql_clean": "<start> select count(*) from customers where city = prague; <end>"}, {"text": "What are the ids of the students who registered for some courses but had the least number of courses for all students?", "sql": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1", "db_id": "student_assessment", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of the students who registered for some courses but had the least number of courses for all students", "sql_clean": "<start> select student_id from student_course_registrations group by student_id order by count(*) limit 1 <end>"}, {"text": "What is the name of the product with the color description 'yellow'?", "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "what is the name of the product with the color description yellow", "sql_clean": "<start> select t1.product_name from products as t1 join ref_colors as t2 on t1.color_code = t2.color_code where t2.color_description = 'yellow' <end>"}, {"text": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "db_id": "race_track", "schema": {"tables": [], "columns": []}, "text_clean": "find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats", "sql_clean": "<start> select location from track where seating > 90000 intersect select location from track where seating < 70000 <end>"}, {"text": "Show the document name and the document date for all documents on project with details 'Graph Database project'.", "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "db_id": "cre_Docs_and_Epenses", "schema": {"tables": [], "columns": []}, "text_clean": "show the document name and the document date for all documents on project with details graph database project", "sql_clean": "<start> select document_name , document_date from documents as t1 join projects as t2 on t1.project_id = t2.project_id where t2.project_details = 'graph database project' <end>"}, {"text": "Find the name of the person who has friends with age above 40 but not under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name of the person who has friends with age above 40 but not under age 30", "sql_clean": "<start> select t1.name from person as t1 join personfriend as t2 on t1.name = t2.name where t2.friend in (select name from person where age > 40) except select t1.name from person as t1 join personfriend as t2 on t1.name = t2.name where t2.friend in (select name from person where age < 30) <end>"}, {"text": "How many order items correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "how many order items correspond to each order id", "sql_clean": "<start> select order_id , count(*) from order_items group by order_id <end>"}, {"text": "List all countries of markets in descending order of number of cities.", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "db_id": "film_rank", "schema": {"tables": [], "columns": []}, "text_clean": "list all countries of markets in descending order of number of cities", "sql_clean": "<start> select country from market order by number_cities desc <end>"}, {"text": "Show times of elimination of wrestlers with days held more than 50.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "show times of elimination of wrestlers with days held more than 50", "sql_clean": "<start> select t1.time from elimination as t1 join wrestler as t2 on t1.wrestler_id = t2.wrestler_id where t2.days_held > 50 <end>"}, {"text": "What are the names of hosts who did not host any party in our record?", "sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "db_id": "party_host", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of hosts who did not host any party in our record", "sql_clean": "<start> select name from host where host_id not in (select host_id from party_host) <end>"}, {"text": "What are the names of representatives in descending order of votes?", "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC", "db_id": "election_representative", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of representatives in descending order of votes", "sql_clean": "<start> select t2.name from election as t1 join representative as t2 on t1.representative_id = t2.representative_id order by votes desc <end>"}, {"text": "Return the description for the courses named \"database\".", "sql": "SELECT course_description FROM COURSES WHERE course_name  =  \"database\"", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "return the description for the courses named database", "sql_clean": "<start> select course_description from courses where course_name = database <end>"}, {"text": "Show all book categories and the number of books in each category.", "sql": "SELECT category ,  count(*) FROM book_club GROUP BY category", "db_id": "culture_company", "schema": {"tables": [], "columns": []}, "text_clean": "show all book categories and the number of books in each category", "sql_clean": "<start> select category , count(*) from book_club group by category <end>"}, {"text": "Which event names were used more than twice for party events?", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "db_id": "party_people", "schema": {"tables": [], "columns": []}, "text_clean": "which event names were used more than twice for party events", "sql_clean": "<start> select event_name from party_events group by event_name having count(*) > 2 <end>"}, {"text": "What are the first names of all students who took ACCT-211 and received a C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "db_id": "college_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first names of all students who took acct 211 and received a c", "sql_clean": "<start> select t3.stu_fname from class as t1 join enroll as t2 on t1.class_code = t2.class_code join student as t3 on t2.stu_num = t3.stu_num where t1.crs_code = 'acct-211' and t2.enroll_grade = 'c' <end>"}, {"text": "What are the names and urls of images, sorted alphabetically?", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "db_id": "document_management", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and urls of images sorted alphabetically", "sql_clean": "<start> select image_name , image_url from images order by image_name <end>"}, {"text": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.", "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "for each tourist attraction return its name and the date when the tourists named vincent or vivian visited there", "sql_clean": "<start> select t1.name , t3.visit_date from tourist_attractions as t1 join visitors as t2 join visits as t3 on t1.tourist_attraction_id = t3.tourist_attraction_id and t2.tourist_id = t3.tourist_id where t2.tourist_details = vincent or t2.tourist_details = vivian <end>"}, {"text": "For each city, list their names in decreasing order by their highest station latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "for each city list their names in decreasing order by their highest station latitude", "sql_clean": "<start> select city from station group by city order by max(lat) desc <end>"}, {"text": "Return the names and ids of all products whose price is between 600 and 700.", "sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700", "db_id": "department_store", "schema": {"tables": [], "columns": []}, "text_clean": "return the names and ids of all products whose price is between 600 and 700", "sql_clean": "<start> select product_name , product_id from products where product_price between 600 and 700 <end>"}, {"text": "What is the count of states with college students playing in the mid position but not as goalies?", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the count of states with college students playing in the mid position but not as goalies", "sql_clean": "<start> select count(*) from (select t1.state from college as t1 join tryout as t2 on t1.cname = t2.cname where t2.ppos = 'mid' except select t1.state from college as t1 join tryout as t2 on t1.cname = t2.cname where t2.ppos = 'goalie') <end>"}, {"text": "What is the count of distinct employees with certificates?", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the count of distinct employees with certificates", "sql_clean": "<start> select count(distinct eid) from certificate <end>"}, {"text": "For each player, show the team and the location of school they belong to.", "sql": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID", "db_id": "school_player", "schema": {"tables": [], "columns": []}, "text_clean": "for each player show the team and the location of school they belong to", "sql_clean": "<start> select t1.team , t2.location from player as t1 join school as t2 on t1.school_id = t2.school_id <end>"}, {"text": "List every album ordered by album title in ascending order.", "sql": "SELECT title FROM albums ORDER BY title;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "list every album ordered by album title in ascending order", "sql_clean": "<start> select title from albums order by title; <end>"}, {"text": "Show the region name with at least two storms.", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "show the region name with at least two storms", "sql_clean": "<start> select t1.region_name from region as t1 join affected_region as t2 on t1.region_id = t2.region_id group by t1.region_id having count(*) >= 2 <end>"}, {"text": "Find the email and phone number of the customers who have never filed a complaint before.", "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "db_id": "customer_complaints", "schema": {"tables": [], "columns": []}, "text_clean": "find the email and phone number of the customers who have never filed a complaint before", "sql_clean": "<start> select email_address , phone_number from customers where customer_id not in (select customer_id from complaints) <end>"}, {"text": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.", "sql": "SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id  =  T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code  =  T3.document_type_code WHERE T3.document_description  =  'Initial Application'", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "for grants with both documents described as regular and documents described as initial application list its start date", "sql_clean": "<start> select t1.grant_start_date from grants as t1 join documents as t2 on t1.grant_id = t2.grant_id join document_types as t3 on t2.document_type_code = t3.document_type_code where t3.document_description = 'regular' intersect select t1.grant_start_date from grants as t1 join documents as t2 on t1.grant_id = t2.grant_id join document_types as t3 on t2.document_type_code = t3.document_type_code where t3.document_description = 'initial application' <end>"}, {"text": "Select the names and the prices of all the products in the store.", "sql": "SELECT name ,  price FROM products", "db_id": "manufactory_1", "schema": {"tables": [], "columns": []}, "text_clean": "select the names and the prices of all the products in the store", "sql_clean": "<start> select name , price from products <end>"}, {"text": "Show all allergy types.", "sql": "SELECT DISTINCT allergytype FROM Allergy_type", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "show all allergy types", "sql_clean": "<start> select distinct allergytype from allergy_type <end>"}, {"text": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?", "sql": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the student capacity and type of gender for the dorm whose name as the phrase donor in it", "sql_clean": "<start> select student_capacity , gender from dorm where dorm_name like '%donor%' <end>"}, {"text": "Show id, first name and last name for all customers and the number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "show id first name and last name for all customers and the number of accounts", "sql_clean": "<start> select t1.customer_id , t2.customer_first_name , t2.customer_last_name , count(*) from accounts as t1 join customers as t2 on t1.customer_id = t2.customer_id group by t1.customer_id <end>"}, {"text": "How many people graduated from San Francisco State University in 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "db_id": "csu_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many people graduated from san francisco state university in 2004", "sql_clean": "<start> select sum(t1.graduate) from discipline_enrollments as t1 join campuses as t2 on t1.campus = t2.id where t1.year = 2004 and t2.campus = san francisco state university <end>"}, {"text": "Find the forename and surname of drivers whose nationality is German?", "sql": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the forename and surname of drivers whose nationality is german", "sql_clean": "<start> select forename , surname from drivers where nationality = german <end>"}, {"text": "What are the names and average salaries for departments with average salary higher than 42000?", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names and average salaries for departments with average salary higher than 42000", "sql_clean": "<start> select dept_name , avg (salary) from instructor group by dept_name having avg (salary) > 42000 <end>"}, {"text": "Show all product names and the total quantity ordered for each product name.", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "db_id": "customers_and_invoices", "schema": {"tables": [], "columns": []}, "text_clean": "show all product names and the total quantity ordered for each product name", "sql_clean": "<start> select t2.product_name , sum(t1.product_quantity) from order_items as t1 join products as t2 on t1.product_id = t2.product_id group by t2.product_name <end>"}, {"text": "Find the zip code in which the average mean visibility is lower than 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "db_id": "bike_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the zip code in which the average mean visibility is lower than 10", "sql_clean": "<start> select zip_code from weather group by zip_code having avg(mean_visibility_miles) < 10 <end>"}, {"text": "How many documents can one grant have at most? List the grant id and number.", "sql": "SELECT grant_id ,  count(*) FROM Documents GROUP BY grant_id ORDER BY count(*) DESC LIMIT 1", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "how many documents can one grant have at most list the grant id and number", "sql_clean": "<start> select grant_id , count(*) from documents group by grant_id order by count(*) desc limit 1 <end>"}, {"text": "Which membership card has more than 5 members?", "sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5", "db_id": "coffee_shop", "schema": {"tables": [], "columns": []}, "text_clean": "which membership card has more than 5 members", "sql_clean": "<start> select membership_card from member group by membership_card having count(*) > 5 <end>"}, {"text": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of students and their respective departments ordered by number of credits from least to greatest", "sql_clean": "<start> select name , dept_name from student order by tot_cred <end>"}, {"text": "What are the names of all aicrafts that have never won any match?", "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)", "db_id": "aircraft", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all aicrafts that have never won any match", "sql_clean": "<start> select aircraft from aircraft where aircraft_id not in (select winning_aircraft from match) <end>"}, {"text": "What are the names of all instructors in the Comp. Sci. department?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of all instructors in the comp sci department", "sql_clean": "<start> select name from instructor where dept_name = 'comp. sci.' <end>"}, {"text": "Find the code of the role that have the most employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "db_id": "cre_Doc_Tracking_DB", "schema": {"tables": [], "columns": []}, "text_clean": "find the code of the role that have the most employees", "sql_clean": "<start> select role_code from employees group by role_code order by count(*) desc limit 1 <end>"}, {"text": "Show all the planned delivery dates and actual delivery dates of bookings.", "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "show all the planned delivery dates and actual delivery dates of bookings", "sql_clean": "<start> select planned_delivery_date , actual_delivery_date from bookings <end>"}, {"text": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?", "sql": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'", "db_id": "gas_company", "schema": {"tables": [], "columns": []}, "text_clean": "what are the headquarters that have both a company in the banking and oil and gas industries", "sql_clean": "<start> select headquarters from company where main_industry = 'banking' intersect select headquarters from company where main_industry = 'oil and gas' <end>"}, {"text": "What is the total number of enrollment of schools that do not have any goalie player?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "what is the total number of enrollment of schools that do not have any goalie player", "sql_clean": "<start> select sum(enr) from college where cname not in (select cname from tryout where ppos = goalie) <end>"}, {"text": "What is the forename and surname of the driver with the shortest laptime?", "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "db_id": "formula_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the forename and surname of the driver with the shortest laptime", "sql_clean": "<start> select t1.forename , t1.surname from drivers as t1 join laptimes as t2 on t1.driverid = t2.driverid order by t2.milliseconds limit 1 <end>"}, {"text": "What is the average quantity of stocks?", "sql": "SELECT avg(Quantity) FROM stock", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average quantity of stocks", "sql_clean": "<start> select avg(quantity) from stock <end>"}, {"text": "How many male students (sex is 'M') are allergic to any type of food?", "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "db_id": "allergy_1", "schema": {"tables": [], "columns": []}, "text_clean": "how many male students sex is m are allergic to any type of food", "sql_clean": "<start> select count(*) from student where sex = m and stuid in (select stuid from has_allergy as t1 join allergy_type as t2 on t1.allergy = t2.allergy where t2.allergytype = food) <end>"}, {"text": "How many different levels do members have?", "sql": "SELECT count(DISTINCT LEVEL) FROM member", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "how many different levels do members have", "sql_clean": "<start> select count(distinct level) from member <end>"}, {"text": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"", "db_id": "customers_card_transactions", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of credit cards that the customer with first name blanche and last name huels has", "sql_clean": "<start> select count(*) from customers_cards as t1 join customers as t2 on t1.customer_id = t2.customer_id where t2.customer_first_name = blanche and t2.customer_last_name = huels and t1.card_type_code = credit <end>"}, {"text": "Find the total claimed amount of all the claims.", "sql": "SELECT sum(Amount_Claimed) FROM Claims", "db_id": "insurance_policies", "schema": {"tables": [], "columns": []}, "text_clean": "find the total claimed amount of all the claims", "sql_clean": "<start> select sum(amount_claimed) from claims <end>"}, {"text": "How many females are in the network?", "sql": "SELECT count(*) FROM Person WHERE gender  =  'female'", "db_id": "network_2", "schema": {"tables": [], "columns": []}, "text_clean": "how many females are in the network", "sql_clean": "<start> select count(*) from person where gender = 'female' <end>"}, {"text": "What are the first and last names of the customers with the 10 cheapest invoices?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "db_id": "store_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the first and last names of the customers with the 10 cheapest invoices", "sql_clean": "<start> select t1.first_name , t1.last_name from customers as t1 join invoices as t2 on t2.customer_id = t1.id order by total limit 10; <end>"}, {"text": "Show all distinct location names.", "sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "show all distinct location names", "sql_clean": "<start> select distinct location_name from locations <end>"}, {"text": "Show the party with drivers from Hartford and drivers older than 40.", "sql": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40", "db_id": "school_bus", "schema": {"tables": [], "columns": []}, "text_clean": "show the party with drivers from hartford and drivers older than 40", "sql_clean": "<start> select party from driver where home_city = 'hartford' and age > 40 <end>"}, {"text": "Which submission received the highest score in acceptance result. Show me the result.", "sql": "SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "which submission received the highest score in acceptance result show me the result", "sql_clean": "<start> select t1.result from acceptance as t1 join submission as t2 on t1.submission_id = t2.submission_id order by t2.scores desc limit 1 <end>"}, {"text": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the top 3 wineries with the greatest number of wines made of white color grapes", "sql_clean": "<start> select t2.winery from grapes as t1 join wine as t2 on t1.grape = t2.grape where t1.color = white group by t2.winery order by count(*) desc limit 3 <end>"}, {"text": "How many policies are listed for the customer named \"Dayana Robel\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "db_id": "insurance_fnol", "schema": {"tables": [], "columns": []}, "text_clean": "how many policies are listed for the customer named dayana robel", "sql_clean": "<start> select count(*) from customers as t1 join customers_policies as t2 on t1.customer_id = t2.customer_id where t1.customer_name = dayana robel <end>"}, {"text": "What are the papers published under the institution \"Indiana University\"?", "sql": "SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid  =  t2.paperid JOIN inst AS t3 ON t2.instid  =  t3.instid WHERE t3.name  =  \"Indiana University\"", "db_id": "icfp_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the papers published under the institution indiana university", "sql_clean": "<start> select distinct t1.title from papers as t1 join authorship as t2 on t1.paperid = t2.paperid join inst as t3 on t2.instid = t3.instid where t3.name = indiana university <end>"}, {"text": "Find the average height of the players who belong to the college called 'Yale University'.", "sql": "SELECT avg(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id  =  T2.player_id JOIN college AS T3 ON T3.college_id  =  T2.college_id WHERE T3.name_full  =  'Yale University';", "db_id": "baseball_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the average height of the players who belong to the college called yale university", "sql_clean": "<start> select avg(t1.height) from player as t1 join player_college as t2 on t1.player_id = t2.player_id join college as t3 on t3.college_id = t2.college_id where t3.name_full = 'yale university'; <end>"}, {"text": "Which tourist attractions does the visitor with detail 'Vincent' visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"", "db_id": "cre_Theme_park", "schema": {"tables": [], "columns": []}, "text_clean": "which tourist attractions does the visitor with detail vincent visit", "sql_clean": "<start> select t1.name from tourist_attractions as t1 join visits as t2 on t1.tourist_attraction_id = t2.tourist_attraction_id join visitors as t3 on t2.tourist_id = t3.tourist_id where t3.tourist_details = vincent <end>"}, {"text": "What are the names of artists who are Male and are from UK?", "sql": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the names of artists who are male and are from uk", "sql_clean": "<start> select artist_name from artist where country = uk and gender = male <end>"}, {"text": "Show theme and year for all exhibitions with ticket prices lower than 15.", "sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "db_id": "theme_gallery", "schema": {"tables": [], "columns": []}, "text_clean": "show theme and year for all exhibitions with ticket prices lower than 15", "sql_clean": "<start> select theme , year from exhibition where ticket_price < 15 <end>"}, {"text": "List the dates of enrollment and completion of the student with personal name \"Karson\".", "sql": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"", "db_id": "e_learning", "schema": {"tables": [], "columns": []}, "text_clean": "list the dates of enrollment and completion of the student with personal name karson", "sql_clean": "<start> select t1.date_of_enrolment , t1.date_of_completion from student_course_enrolment as t1 join students as t2 on t1.student_id = t2.student_id where t2.personal_name = karson <end>"}, {"text": "What are the maximum price and score of wines for each year?", "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "db_id": "wine_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum price and score of wines for each year", "sql_clean": "<start> select max(price) , max(score) , year from wine group by year <end>"}, {"text": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.", "sql": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;", "db_id": "restaurant_1", "schema": {"tables": [], "columns": []}, "text_clean": "at which restaurant did the students spend the least amount of time list restaurant and the time students spent on in total", "sql_clean": "<start> select restaurant.resname , sum(visits_restaurant.spent) from visits_restaurant join restaurant on visits_restaurant.resid = restaurant.resid group by restaurant.resid order by sum(visits_restaurant.spent) asc limit 1; <end>"}, {"text": "List the names of products that are not in any event.", "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)", "db_id": "solvency_ii", "schema": {"tables": [], "columns": []}, "text_clean": "list the names of products that are not in any event", "sql_clean": "<start> select product_name from products where product_id not in (select product_id from products_in_events) <end>"}, {"text": "What are the IDs of customers who have \"Diana\" in part of their names?", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "db_id": "insurance_fnol", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of customers who have diana in part of their names", "sql_clean": "<start> select customer_id from customers where customer_name like %diana% <end>"}, {"text": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "db_id": "movie_1", "schema": {"tables": [], "columns": []}, "text_clean": "in what years did a movie receive a 4 or 5 star rating and list the years from oldest to most recently", "sql_clean": "<start> select distinct year from movie as t1 join rating as t2 on t1.mid = t2.mid where t2.stars >= 4 order by t1.year <end>"}, {"text": "List the name of all rooms sorted by their prices.", "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;", "db_id": "inn_1", "schema": {"tables": [], "columns": []}, "text_clean": "list the name of all rooms sorted by their prices", "sql_clean": "<start> select roomname from rooms order by baseprice; <end>"}, {"text": "Show all distinct product categories along with the number of mailshots in each category.", "sql": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category", "db_id": "customers_campaigns_ecommerce", "schema": {"tables": [], "columns": []}, "text_clean": "show all distinct product categories along with the number of mailshots in each category", "sql_clean": "<start> select product_category , count(*) from mailshot_campaigns group by product_category <end>"}, {"text": "Which head's name has the substring 'Ha'? List the id and name.", "sql": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", "db_id": "department_management", "schema": {"tables": [], "columns": []}, "text_clean": "which head s name has the substring ha list the id and name", "sql_clean": "<start> select head_id , name from head where name like '%ha%' <end>"}, {"text": "What is the last name of the first individual contacted from the organization with the maximum UK Vat number across all organizations?", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1", "db_id": "e_government", "schema": {"tables": [], "columns": []}, "text_clean": "what is the last name of the first individual contacted from the organization with the maximum uk vat number across all organizations", "sql_clean": "<start> select t3.individual_last_name from organizations as t1 join organization_contact_individuals as t2 on t1.organization_id = t2.organization_id join individuals as t3 on t2.individual_id = t3.individual_id where t1.uk_vat_number = (select max(uk_vat_number) from organizations) order by t2.date_contact_to asc limit 1 <end>"}, {"text": "What are the entry names of catalog with the attribute possessed by most entries.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "db_id": "product_catalog", "schema": {"tables": [], "columns": []}, "text_clean": "what are the entry names of catalog with the attribute possessed by most entries", "sql_clean": "<start> select t1.catalog_entry_name from catalog_contents as t1 join catalog_contents_additional_attributes as t2 on t1.catalog_entry_id = t2.catalog_entry_id where t2.attribute_value = (select attribute_value from catalog_contents_additional_attributes group by attribute_value order by count(*) desc limit 1) <end>"}, {"text": "List the problem id and log id which are assigned to the staff named Rylan Homenick.", "sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "db_id": "tracking_software_problems", "schema": {"tables": [], "columns": []}, "text_clean": "list the problem id and log id which are assigned to the staff named rylan homenick", "sql_clean": "<start> select distinct t2.problem_id , t2.problem_log_id from staff as t1 join problem_log as t2 on t1.staff_id = t2.assigned_to_staff_id where t1.staff_first_name = rylan and t1.staff_last_name = homenick <end>"}, {"text": "What are the carriers of devices whose software platforms are not \"Android\"?", "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'", "db_id": "device", "schema": {"tables": [], "columns": []}, "text_clean": "what are the carriers of devices whose software platforms are not android", "sql_clean": "<start> select carrier from device where software_platform != 'android' <end>"}, {"text": "What is the average total score of body builders with height bigger than 200?", "sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "db_id": "body_builder", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average total score of body builders with height bigger than 200", "sql_clean": "<start> select avg(t1.total) from body_builder as t1 join people as t2 on t1.people_id = t2.people_id where t2.height > 200 <end>"}, {"text": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find names of instructors with salary greater than that of some at least one instructor in the biology department", "sql_clean": "<start> select name from instructor where salary > (select min(salary) from instructor where dept_name = 'biology') <end>"}, {"text": "Show the ids of the students who don't participate in any activity.", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in", "db_id": "activity_1", "schema": {"tables": [], "columns": []}, "text_clean": "show the ids of the students who don t participate in any activity", "sql_clean": "<start> select stuid from student except select stuid from participates_in <end>"}, {"text": "Find the busiest source airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "db_id": "flight_4", "schema": {"tables": [], "columns": []}, "text_clean": "find the busiest source airport that runs most number of routes in china", "sql_clean": "<start> select t1.name from airports as t1 join routes as t2 on t1.apid = t2.src_apid where t1.country = 'china' group by t1.name order by count(*) desc limit 1 <end>"}, {"text": "Find the title of course that is provided by both Statistics and Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the title of course that is provided by both statistics and psychology departments", "sql_clean": "<start> select title from course where dept_name = 'statistics' intersect select title from course where dept_name = 'psychology' <end>"}, {"text": "Find the highest rank of all reviews.", "sql": "SELECT min(rank) FROM review", "db_id": "epinions_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the highest rank of all reviews", "sql_clean": "<start> select min(rank) from review <end>"}, {"text": "What is the average number of rooms of apartments with type code \"Studio\"?", "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"", "db_id": "apartment_rentals", "schema": {"tables": [], "columns": []}, "text_clean": "what is the average number of rooms of apartments with type code studio", "sql_clean": "<start> select avg(room_count) from apartments where apt_type_code = studio <end>"}, {"text": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?", "sql": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"", "db_id": "music_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the maximum and minimum resolution of songs whose duration is 3 minutes", "sql_clean": "<start> select max(t2.resolution) , min(t2.resolution) from files as t1 join song as t2 on t1.f_id = t2.f_id where t1.duration like 3:% <end>"}, {"text": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.", "sql": "SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id WHERE T2.rank  >  3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id  =  T2.i_id GROUP BY T2.i_id HAVING avg(T2.rating)  >  5", "db_id": "epinions_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of items whose rank is higher than 3 and whose average rating is above 5", "sql_clean": "<start> select t1.title from item as t1 join review as t2 on t1.i_id = t2.i_id where t2.rank > 3 intersect select t1.title from item as t1 join review as t2 on t1.i_id = t2.i_id group by t2.i_id having avg(t2.rating) > 5 <end>"}, {"text": "Report the distinct advisors who have more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2", "db_id": "voter_2", "schema": {"tables": [], "columns": []}, "text_clean": "report the distinct advisors who have more than 2 students", "sql_clean": "<start> select advisor from student group by advisor having count(*) > 2 <end>"}, {"text": "Show the member name and hometown who registered a branch in 2016.", "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016", "db_id": "shop_membership", "schema": {"tables": [], "columns": []}, "text_clean": "show the member name and hometown who registered a branch in 2016", "sql_clean": "<start> select t2.name , t2.hometown from membership_register_branch as t1 join member as t2 on t1.member_id = t2.member_id where t1.register_year = 2016 <end>"}, {"text": "Count the number of submissions.", "sql": "SELECT count(*) FROM submission", "db_id": "workshop_paper", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of submissions", "sql_clean": "<start> select count(*) from submission <end>"}, {"text": "What is the most common amenity in the dorms?", "sql": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1", "db_id": "dorm_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is the most common amenity in the dorms", "sql_clean": "<start> select t1.amenity_name from dorm_amenity as t1 join has_amenity as t2 on t1.amenid = t2.amenid group by t2.amenid order by count(*) desc limit 1 <end>"}, {"text": "Find the names of nurses who are nursing an undergoing treatment.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "db_id": "hospital_1", "schema": {"tables": [], "columns": []}, "text_clean": "find the names of nurses who are nursing an undergoing treatment", "sql_clean": "<start> select distinct t2.name from undergoes as t1 join nurse as t2 on t1.assistingnurse = t2.employeeid <end>"}, {"text": "Find the number of complaints with Product Failure type for each complaint status.", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code", "db_id": "customer_complaints", "schema": {"tables": [], "columns": []}, "text_clean": "find the number of complaints with product failure type for each complaint status", "sql_clean": "<start> select complaint_status_code , count(*) from complaints where complaint_type_code = product failure group by complaint_status_code <end>"}, {"text": "Find the payment method that is used the most often in all the invoices. Give me its code.", "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1", "db_id": "cre_Drama_Workshop_Groups", "schema": {"tables": [], "columns": []}, "text_clean": "find the payment method that is used the most often in all the invoices give me its code", "sql_clean": "<start> select payment_method_code from invoices group by payment_method_code order by count(*) desc limit 1 <end>"}, {"text": "Count the number of regions.", "sql": "SELECT count(*) FROM region", "db_id": "storm_record", "schema": {"tables": [], "columns": []}, "text_clean": "count the number of regions", "sql_clean": "<start> select count(*) from region <end>"}, {"text": "What are the ids of all students who don't play sports?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo", "db_id": "game_1", "schema": {"tables": [], "columns": []}, "text_clean": "what are the ids of all students who don t play sports", "sql_clean": "<start> select stuid from student except select stuid from sportsinfo <end>"}, {"text": "How many songs have a shared vocal?", "sql": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"", "db_id": "music_2", "schema": {"tables": [], "columns": []}, "text_clean": "how many songs have a shared vocal", "sql_clean": "<start> select count(distinct title) from vocals as t1 join songs as t2 on t1.songid = t2.songid where type = shared <end>"}, {"text": "What are the distinct buildings with capacities of greater than 50?", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "db_id": "college_2", "schema": {"tables": [], "columns": []}, "text_clean": "what are the distinct buildings with capacities of greater than 50", "sql_clean": "<start> select distinct building from classroom where capacity > 50 <end>"}, {"text": "Give the color description that is least common across products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "db_id": "products_gen_characteristics", "schema": {"tables": [], "columns": []}, "text_clean": "give the color description that is least common across products", "sql_clean": "<start> select t2.color_description from products as t1 join ref_colors as t2 on t1.color_code = t2.color_code group by t2.color_description order by count(*) asc limit 1 <end>"}, {"text": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "db_id": "club_1", "schema": {"tables": [], "columns": []}, "text_clean": "which clubs have one or more members from the city with code bal give me the names of the clubs", "sql_clean": "<start> select distinct t1.clubname from club as t1 join member_of_club as t2 on t1.clubid = t2.clubid join student as t3 on t2.stuid = t3.stuid where t3.city_code = bal <end>"}, {"text": "What is all the information about the Marketing department?", "sql": "SELECT * FROM  departments WHERE department_name  =  'Marketing'", "db_id": "hr_1", "schema": {"tables": [], "columns": []}, "text_clean": "what is all the information about the marketing department", "sql_clean": "<start> select * from departments where department_name = 'marketing' <end>"}, {"text": "List the time of elimination of the wrestlers with largest days held.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "db_id": "wrestler", "schema": {"tables": [], "columns": []}, "text_clean": "list the time of elimination of the wrestlers with largest days held", "sql_clean": "<start> select t1.time from elimination as t1 join wrestler as t2 on t1.wrestler_id = t2.wrestler_id order by t2.days_held desc limit 1 <end>"}, {"text": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "db_id": "soccer_2", "schema": {"tables": [], "columns": []}, "text_clean": "find the name enrollment of the colleges whose size is bigger than 10000 and location is in state la", "sql_clean": "<start> select cname , enr from college where enr > 10000 and state = la <end>"}, {"text": "Show origins of all flights with destination Honolulu.", "sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "db_id": "flight_1", "schema": {"tables": [], "columns": []}, "text_clean": "show origins of all flights with destination honolulu", "sql_clean": "<start> select origin from flight where destination = honolulu <end>"}, {"text": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?", "sql": "SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code  =  T2.document_type_code JOIN Grants AS T3 ON T1.grant_id  =  T3.grant_id WHERE T2.document_description  =  'Regular' OR T3.grant_amount  >  100", "db_id": "tracking_grants_for_research", "schema": {"tables": [], "columns": []}, "text_clean": "what are the response received dates for the documents described as regular or granted with more than 100", "sql_clean": "<start> select t1.response_received_date from documents as t1 join document_types as t2 on t1.document_type_code = t2.document_type_code join grants as t3 on t1.grant_id = t3.grant_id where t2.document_description = 'regular' or t3.grant_amount > 100 <end>"}]